<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Knx.Bus.Common</name>
    </assembly>
    <members>
        <member name="T:Knx.Bus.Common.CancelableProgress">
            <summary>
            The cancelable callback of an asynchronous operation.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.CancelableProgress.#ctor(System.Threading.Tasks.Task,System.Threading.CancellationTokenSource)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.CancelableProgress" /> class.
            </summary>
            <param name="worker">The worker task.</param>
            <param name="tokenSource">The cancellation token source to be used for cancelling the operation.</param>
        </member>
        <member name="P:Knx.Bus.Common.CancelableProgress.TokenSource">
            <summary>
            Gets the CancellationTokenSource.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.CancelableProgress.CanBeCanceled">
            <summary>
            Gets a value indicating whether this instance can be canceled.
            </summary>
            <value>
            <c>true</c> if this instance can be canceled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Knx.Bus.Common.CancelableProgress.IsCompleted">
            <summary>
            Gets a value indicating whether the operation ran to completion.
            </summary>
            <value>
            <c>true</c> if the operation ran to completion; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Knx.Bus.Common.CancelableProgress.Cancel">
            <summary>
            Send a cancellation request to the asynchronous operation.
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.AsyncProgress">
            <summary>
            The progress information of an asynchronous operation.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.AsyncProgress.Current">
            <summary>
            Gets the current progress step.
            </summary>
            <value>
            The current progress step.
            </value>
        </member>
        <member name="P:Knx.Bus.Common.AsyncProgress.Total">
            <summary>
            Gets the total progress steps.
            </summary>
            <value>
            The total progress steps.
            </value>
        </member>
        <member name="P:Knx.Bus.Common.AsyncProgress.Percentage">
            <summary>
            Gets the overall progress in percent.
            </summary>
            <value>
            The overall progress in percent.
            </value>
        </member>
        <member name="M:Knx.Bus.Common.AsyncProgress.#ctor(System.Threading.Tasks.Task,System.Threading.CancellationTokenSource,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.AsyncProgress" /> class.
            </summary>
            <param name="worker">The worker task.</param>
            <param name="tokenSource">The cancellation token source to be used for cancelling the operation.</param>
            <param name="current">The current progress step.</param>
            <param name="total">The total progress steps.</param>
        </member>
        <member name="T:Knx.Bus.Common.AsyncProgress`1">
            <summary>
            The progress information of an asynchronous operation providing a result when finished.
            </summary>
            <typeparam name="TResult">The type of the result when the operation has been finished.</typeparam>
        </member>
        <member name="M:Knx.Bus.Common.AsyncProgress`1.#ctor(System.Threading.Tasks.Task{`0},System.Threading.CancellationTokenSource,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.AsyncProgress`1" /> class.
            </summary>
            <param name="worker">The worker task.</param>
            <param name="tokenSource">The cancellation token source to be used for cancelling the operation.</param>
            <param name="current">The current progress step.</param>
            <param name="total">The total progress steps.</param>
        </member>
        <member name="P:Knx.Bus.Common.AsyncProgress`1.Worker">
            <summary>
            Gets the worker.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.AsyncProgress`1.IsCompleted">
            <summary>
            Gets a value indicating whether the operation ran to completion.
            </summary>
            <value>
            <c>true</c> if the operation ran to completion; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Knx.Bus.Common.AsyncProgress`1.Result">
            <summary>
            Gets the result when the operation has been finished.
            </summary>
            <value>
            The result when the operation has been finished.
            </value>
            <exception cref="T:System.InvalidOperationException">if the operation has not been completed yet (check <see cref="P:Knx.Bus.Common.AsyncProgress`1.IsCompleted"/> before calling this property).</exception>
        </member>
        <member name="T:Knx.Bus.Common.AsyncProgress`2">
            <summary>
            The progress information of an asynchronous operation providing a result when finished and providing partial results on each progress callback.
            </summary>
            <typeparam name="TResult">The type of the result when the operation has been finished.</typeparam>
            <typeparam name="TInfo">The type of the partial information provided on each callback. This value can be <c>null</c> if there is no partial result available during e.g. cyclic callbacks.</typeparam>
        </member>
        <member name="M:Knx.Bus.Common.AsyncProgress`2.#ctor(System.Threading.Tasks.Task{`0},System.Threading.CancellationTokenSource,System.UInt32,System.UInt32,`1)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.AsyncProgress`1" /> class.
            </summary>
            <param name="worker">The worker task.</param>
            <param name="tokenSource">The cancellation token source to be used for cancelling the operation.</param>
            <param name="current">The current progress step.</param>
            <param name="total">The total progress steps.</param>
            <param name="info">The partial information provided on each callback.</param>
        </member>
        <member name="M:Knx.Bus.Common.AsyncProgress`2.CreateFromBase(Knx.Bus.Common.AsyncProgress{`0},`1)">
            <summary>
            Creates an instance from an instance of the base class and provides additional partial information.
            </summary>
            <param name="baseClass">The base class to be adapted.</param>
            <param name="info">The additional partial information .</param>
            <returns>Returns the adapted instance.</returns>
        </member>
        <member name="P:Knx.Bus.Common.AsyncProgress`2.Info">
            <summary>
            Gets the partial information provided on each callback. This value can be <c>null</c> if there is no partial result available during e.g. cyclic callbacks.
            </summary>
            <value>
            The partial information provided on each callback. This value can be <c>null</c> if there is no partial result available during e.g. cyclic callbacks.
            </value>
        </member>
        <member name="T:Knx.Bus.Common.BusConnectionStatus">
            <summary>
            Connection state of a <see cref="N:Knx.Bus"/> object.
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.BusConnectionStatus.Connected">
            <summary>
            The connection to the bus interface is established and working.
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.BusConnectionStatus.Closed">
            <summary>
            The connection to the bus interface is still closed or has been closed.
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.BusConnectionStatus.Broken">
            <summary>
            The connection to the bus interface has been successfully opened,
            but there is a (temporary) communication problem.
            Falcon is trying to reestablish the communication in the background.
            If the reconnect succeeded, the status returns to <see cref="F:Knx.Bus.Common.BusConnectionStatus.Connected"/>.
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.BusData">
            <summary>
            Represents some data received from or sent to the bus as well as other events related to bus operation.
            </summary>
            <remarks>
            This is an abstract class. Derived classes are:
            <list type="table">
            <item><term><see cref="T:Knx.Bus.Common.Telegrams.Telegram"/></term><term>for KNX messages</term></item>
            <item><term><see cref="T:Knx.Bus.Common.Telegrams.ConnectionStatusTelegram"/></term><term>to communicate changes in the connection status</term></item>
            <item><term><see cref="T:Knx.Bus.Common.Telegrams.ResetReceivedTelegram"/></term><term>for the EMI1 Reset_ind service</term></item>
            <item><term><see cref="T:Knx.Bus.Common.Telegrams.RoutingLostMessageTelegram"/> and <see cref="T:Knx.Bus.Common.Telegrams.RoutingBusyTelegram"/></term><term>for special KNXnet/IP routing frames</term></item>
            </list>
            </remarks>
        </member>
        <member name="P:Knx.Bus.Common.BusData.Timestamp">
            <summary>
            Gets the timestamp of the bus data.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.BusData.ToString(System.String)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.BusData.Clone">
            <summary>
            Creates a deep clone of the BusData object
            </summary>
            <returns></returns>
        </member>
        <member name="T:Knx.Bus.Common.ByteArrayExtensions">
            <summary>
            This class provides extension methods for byte arrays. 
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.ByteArrayExtensions.SubArray(System.Byte[],System.Int32)">
            <summary>
            Extracts part of an array.
            </summary>
            <param name="array">The array.</param>
            <param name="count">The maximum number of bytes to extract.</param>
            <returns>The newly created array.</returns>
            <remarks>This method extracts at most <paramref name="count"/> bytes of the input array,
            starting at offset 0.</remarks>
        </member>
        <member name="M:Knx.Bus.Common.ByteArrayExtensions.SubArray(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Extracts part of an array.
            </summary>
            <param name="array">The array.</param>
            <param name="startOffset">The start offset.</param>
            <param name="count">The maximum number of bytes to extract.</param>
            <returns>The newly created array.</returns>
            <remarks>This method extracts at most <paramref name="count"/> bytes of the input array, 
            starting at offset <paramref name="startOffset"/>.</remarks>
        </member>
        <member name="M:Knx.Bus.Common.ByteArrayExtensions.WriteIntegerValueBigEndian(System.Byte[],System.Int32,System.UInt64,System.Int32)">
            <summary>
            Writes an integer value to a byte array (big-endian)
            </summary>
            <param name="array">The array.</param>
            <param name="startOffset">The start offset.</param>
            <param name="value">The value to write</param>
            <param name="count">The number of bytes to write.</param>
        </member>
        <member name="M:Knx.Bus.Common.ByteArrayExtensions.ExtractIntegerValueBigEndian(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Extracts an integer value from a byte array (big-endian)
            </summary>
            <param name="array">The array.</param>
            <param name="startOffset">The start offset.</param>
            <param name="count">The number of bytes to write.</param>
            <returns>The extracted value</returns>
        </member>
        <member name="M:Knx.Bus.Common.ByteArrayExtensions.ExtractUInt16BigEndian(System.Byte[],System.Int32)">
            <summary>
            Extracts an UInt16 value from a byte array (big-endian)
            </summary>
            <param name="array">The array.</param>
            <param name="startOffset">The start offset.</param>
            <returns>The extracted value</returns>
        </member>
        <member name="M:Knx.Bus.Common.ByteArrayExtensions.CompareTo(System.Byte[],System.Byte[])">
            <summary>
            Compares two byte arrays.
            </summary>
            <param name="one">The first byte array.</param>
            <param name="other">The second byte array.</param>
            <returns>Less that zero, zero, greater than zero if one is less than other, one equals other, one is greater than other, respectively.</returns>
        </member>
        <member name="M:Knx.Bus.Common.ByteArrayExtensions.AsBlockHexStrings(System.Byte[],System.Int32)">
            <summary>
            Formats the byte array as a list of lines.
            </summary>
            <param name="array">The array.</param>
            <param name="blockSize">Size of one line in bytes.</param>
            <returns>The formatted byte array as string array</returns>
        </member>
        <member name="M:Knx.Bus.Common.ByteArrayExtensions.AsFormattedHexString(System.Byte[])">
            <summary>
            Formats the byte array as one string (hexdump with separators at powers of two).
            </summary>
            <param name="array">The array.</param>
            <returns>The formatted byte array as string</returns>
        </member>
        <member name="M:Knx.Bus.Common.ByteArrayExtensions.AsHexString(System.Byte[])">
            <summary>
            Formats the byte array as hexadecimal string.
            </summary>
            <param name="array">The array.</param>
            <returns>The hexadecimal string</returns>
        </member>
        <member name="M:Knx.Bus.Common.ByteArrayExtensions.AsCompactHexString(System.Byte[])">
            <summary>
            Formats the byte array as hexadecimal string (compact form).
            </summary>
            <param name="array">The array.</param>
            <returns>The hexadecimal string</returns>
        </member>
        <member name="M:Knx.Bus.Common.ByteArrayExtensions.CompareTo(System.Byte[],System.Byte[],System.Int32)">
            <summary>
            Compares two byte arrays started from a specified index.
            </summary>
            <param name="one">The one.</param>
            <param name="other">The other.</param>
            <param name="startIndex">The start index.</param>
            <returns>Less that zero, zero, greater than zero if one is less than other, one equals other, one is greater than other, respectively.</returns>
        </member>
        <member name="M:Knx.Bus.Common.ByteArrayExtensions.ParseHexBytes(System.String)">
            <summary>
            Convert string containing hex bytes to byte array.
            String must be in the format "a9 00 01 f0 ...". Additional spaces are allowed and ignored.
            </summary>
            <param name="s">String containing hex bytes separated by spaces.</param>
            <returns>Byte array.</returns>
        </member>
        <member name="T:Knx.Bus.Common.CheckCommunicationResult">
            <summary>
            The specific result of communication checks routine.
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.CheckCommunicationResult.Ok">
            <summary>No communication problems detected.</summary>
        </member>
        <member name="F:Knx.Bus.Common.CheckCommunicationResult.UsbDeviceAlreadyInUse">
            <summary>The USB device is already in use by another process.</summary>
        </member>
        <member name="F:Knx.Bus.Common.CheckCommunicationResult.UsbAdapterNotConnected">
            <summary>The USB adapter is not connected to the BCU.</summary>
        </member>
        <member name="F:Knx.Bus.Common.CheckCommunicationResult.NotConnectedToTheBus">
            <summary>The connector is not connected to the BUS (read from bus status flag).</summary>
        </member>
        <member name="F:Knx.Bus.Common.CheckCommunicationResult.DeviceNotFound">
            <summary>The device cannot be found.</summary>
        </member>
        <member name="F:Knx.Bus.Common.CheckCommunicationResult.MultipleDeviceWithSameParametersFound">
            <summary>Multiple device instances with the same connector parameters have been detected.</summary>
        </member>
        <member name="F:Knx.Bus.Common.CheckCommunicationResult.ConnectionTypeIsNotSuppported">
            <summary>The requested connection type is not supported.</summary>
        </member>
        <member name="F:Knx.Bus.Common.CheckCommunicationResult.ConnectionOptionIsNotSupported">
            <summary>One or more requested connection options are not supported.</summary>
        </member>
        <member name="F:Knx.Bus.Common.CheckCommunicationResult.NoMoreConnections">
            <summary>The device cannot accept the new data connection because its maximum amount of concurrent connections is already used.</summary>
        </member>
        <member name="F:Knx.Bus.Common.CheckCommunicationResult.NoMoreUniqueConnections">
            <summary>The device cannot accept the new data connection because there are connections available but no more unique address can be assigned.</summary>
        </member>
        <member name="F:Knx.Bus.Common.CheckCommunicationResult.AlreadyConnected">
            <summary>The connection is already established</summary>
        </member>
        <member name="F:Knx.Bus.Common.CheckCommunicationResult.ConnectionRefused">
            <summary>The connection was actively refused by the target device.</summary>
        </member>
        <member name="F:Knx.Bus.Common.CheckCommunicationResult.AddressFamilyNotSupported">
            <summary>The address family specified is not supported, e.g. is not installed on the local machine.</summary>
        </member>
        <member name="F:Knx.Bus.Common.CheckCommunicationResult.AddressAlreadyInUseOrNotAvailable">
            <summary>The address is normally permitted or the selected IP address is not valid in this context.</summary>
        </member>
        <member name="F:Knx.Bus.Common.CheckCommunicationResult.NetworkDownOrNotAvailable">
            <summary>The network is not available or no route to the remote host exists.</summary>
        </member>
        <member name="F:Knx.Bus.Common.CheckCommunicationResult.HostNotFoundOrUnreachable">
            <summary>No such host is known or there is no network route to the specified host.</summary>
        </member>
        <member name="F:Knx.Bus.Common.CheckCommunicationResult.DeviceNotRespond">
            <summary>The device does not respond.</summary>
        </member>
        <member name="F:Knx.Bus.Common.CheckCommunicationResult.MulticastNotUsed">
            <summary>This multicast address is not used from another device.</summary>
        </member>
        <member name="F:Knx.Bus.Common.CheckCommunicationResult.ConnectedInDifferentMode">
            <summary>The device has already been opened in a different mode.</summary>
        </member>
        <member name="F:Knx.Bus.Common.CheckCommunicationResult.AlreadyOpenedExclusive">
            <summary>A connection has already been opened with exclusive access.</summary>
        </member>
        <member name="F:Knx.Bus.Common.CheckCommunicationResult.UserLoginFailed">
            <summary>The connection is secured and the provided password does not match.</summary>
        </member>
        <member name="F:Knx.Bus.Common.CheckCommunicationResult.ServerValidationFailed">
            <summary>The connection is secured and the provided device authentication code does not match.</summary>
        </member>
        <member name="T:Knx.Bus.Common.Configuration.ConnectorParameters">
            <summary>
            This is the base class for all connector specific configuration parameters.
            </summary>
            <remarks>
            <para>
            See <see cref="T:Knx.Bus.Common.Configuration.UsbConnectorParameters"/> for USB parameters, <see cref="T:Knx.Bus.Common.Configuration.KnxIpTunnelingConnectorParameters"/> for 
            KNX/IP Tunneling parameters, <see cref="T:Knx.Bus.Common.Configuration.KnxIpRoutingConnectorParameters"/> for KNX/IP Routing parameters and
            <see cref="T:Knx.Bus.Common.Configuration.KnxIpDeviceManagementConnectorParameters"/> for the KNX/IP Local cEMI TL connector parameters.
            </para>
            <para>
            The recommended way to persist connector parameters is via a connection string, see <see cref="M:Knx.Bus.Common.Configuration.ConnectorParameters.ToConnectionString"/>
            and <see cref="M:Knx.Bus.Common.Configuration.ConnectorParameters.FromConnectionString(System.String)"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.ConnectorParameters.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Configuration.ConnectorParameters"/> class.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.ConnectorParameters.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Configuration.ConnectorParameters"/> class.
            </summary>
            <param name="name">The name.</param>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.ConnectorParameters.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Configuration.ConnectorParameters"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.ConnectorParameters.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data. </param><param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization. </param><exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="P:Knx.Bus.Common.Configuration.ConnectorParameters.SecureSerializationPassword">
            <summary>
            Special service for ETS. ETS serialized with the DataContractSerializer which does not allow
            to set the StreamingContext. Instead, this static property can be set during (de-)serialization.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.ConnectorParameters.Equals(Knx.Bus.Common.Configuration.ConnectorParameters)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.ConnectorParameters.InternalEquals(Knx.Bus.Common.Configuration.ConnectorParameters)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.ConnectorParameters.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.ConnectorParameters.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.ConnectorParameters.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.ConnectorParameters.op_Equality(Knx.Bus.Common.Configuration.ConnectorParameters,Knx.Bus.Common.Configuration.ConnectorParameters)">
            <summary>
            Implements the operator == (equals).
            </summary>
            <param name="left">The first parameter.</param>
            <param name="right">The second parameter to compare with.</param>
            <returns>
            true if the specified left parameter is equal to the right parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.ConnectorParameters.op_Inequality(Knx.Bus.Common.Configuration.ConnectorParameters,Knx.Bus.Common.Configuration.ConnectorParameters)">
            <summary>
            Implements the operator != (not equal).
            </summary>
            <param name="left">The first parameter.</param>
            <param name="right">The second parameter to compare with.</param>
            <returns>
            true if the specified left parameter is not equal to the right parameter; otherwise, false.
            </returns>
        </member>
        <member name="P:Knx.Bus.Common.Configuration.ConnectorParameters.Type">
            <summary>
            Returns the type of the connector for which parameters are provided.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Configuration.ConnectorParameters.IsSecure">
            <summary>
            Returns true for secure connectors
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Configuration.ConnectorParameters.Name">
            <summary>
            Returns or sets the name of the interface. 
            </summary>
            <remarks>
            <para>
            May be null. The name is set by Falcon when enumerating devices. It has no relevance when opening a connection.
            </para>
            <para>
            Connection string support: May be given as <code>Name=<i>name</i></code>
            (the usual connection string rules apply if <i>name</i> contains special characters like quotes or semicolons).
            </para>
            </remarks>
        </member>
        <member name="P:Knx.Bus.Common.Configuration.ConnectorParameters.Exclusive">
            <summary>
            Gets or sets the flag whether the connector should be opened exclusive. 
            </summary>
            <remarks>
            <para>
            This means:
            <list type="bullet">
              <item>Connect exclusive: 
                <list type="bullet">
                  <item>The connection request will fail if there exists already a connection with this connector parameters but non-exclusive.</item>
                  <item>The connection request will fail if there exists already a connection with this connector parameters also exclusive.</item>
                  <item>The connection request will succeed if there exists no other connection with this connector parameters.</item>
                </list>
              </item>
              <item>Connect non-exclusive:
                <list type="bullet">
                  <item>The connection request will fail if there exists already a connection with this connector parameters but exclusive.</item>
                  <item>The connection request will succeed if there exists already a connection with this connector parameters also non-exclusive.</item>
                  <item>The connection request will succeed if there exists no other connection with this connector parameters.</item>
                </list>
              </item>
            </list>
            </para>
            <para>
            Default: False (non-exclusive).
            </para>
            <para>
            <b>Important note:</b> Open tunneling connections is always exclusive means the connections with the same parameters can be opened until no more additional addresses are available.
            </para>
            <para>
            Connection string support: May be given as <code>Exclusive=True</code>. 
            </para>
            </remarks>
        </member>
        <member name="T:Knx.Bus.Common.Configuration.ConnectorParameters.Encryption">
            <summary>
            Encryption service for serialization of derived classes
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.ConnectorParameters.ToConnectionString">
            <summary>
            Returns a string representation of the parameters. This can be converted back to a parameter
            object using <see cref="M:Knx.Bus.Common.Configuration.ConnectorParameters.FromConnectionString(System.String)"/>.
            </summary>
            <remarks>
            Security relevant parameters are not included in the returned string. If you want to include
            security relevant parameters, use the <see cref="M:Knx.Bus.Common.Configuration.ConnectorParameters.ToConnectionString(System.Security.SecureString)"/> overload instead.
            </remarks>
            <returns>The parameters as connection sting</returns>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.ConnectorParameters.ToConnectionString(System.Security.SecureString)">
            <summary>
            Returns a string representation of the parameters where the security relevant
            parameters are included encrypted with a password. This can be converted back to a parameter
            object using <see cref="M:Knx.Bus.Common.Configuration.ConnectorParameters.FromConnectionString(System.String,System.Security.SecureString)"/>.
            </summary>
            <param name="password">Password used to encrypt the security relevant parameters</param>
            <returns>The parameters as connection sting</returns>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.ConnectorParameters.FromConnectionString(System.String)">
            <summary>
            Returns a parameter object from its string representation as created by <see cref="M:Knx.Bus.Common.Configuration.ConnectorParameters.ToConnectionString"/>.
            </summary>
            <remarks>
            Security relevant parameters are ignored. If you want to load also
            security relevant parameters, use the <see cref="M:Knx.Bus.Common.Configuration.ConnectorParameters.FromConnectionString(System.String,System.Security.SecureString)"/> overload instead.
            </remarks>
            <param name="connectionString">The parameters as connection sting</param>
            <returns>The parameter object</returns>
            <exception cref="T:System.ArgumentException">If the connection string is not in the correct format</exception>
            <exception cref="T:System.FormatException">If some data in the connection string could not be interpreted</exception>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.ConnectorParameters.FromConnectionString(System.String,System.Security.SecureString)">
            <summary>
            Returns a parameter object from its string representation as created by <see cref="M:Knx.Bus.Common.Configuration.ConnectorParameters.ToConnectionString(System.Security.SecureString)"/>.
            </summary>
            <param name="connectionString">The parameters as connection sting</param>
            <param name="password">Password used to decrypt the security relevant parameters; must be the same
            as used in <see cref="M:Knx.Bus.Common.Configuration.ConnectorParameters.ToConnectionString(System.Security.SecureString)"/>.</param>
            <returns>The parameter object</returns>
            <exception cref="T:System.Security.Cryptography.CryptographicException">If the data cannot be decoded with the password provided</exception>
            <exception cref="T:System.ArgumentException">If the connection string is not in the correct format</exception>
            <exception cref="T:System.FormatException">If some data in the connection string could not be interpreted</exception>
        </member>
        <member name="T:Knx.Bus.Common.Configuration.CustomConnectorParameters">
            <summary>
            This class provides parameters used to open a custom bus connection.
            </summary>
            <remarks>
            <para>
            <b>Connection string support</b>
            </para>
            <para>
            <code language="text">
            Type=Custom;TypeName=<i>assembly-qualified-name</i>;Parameters=<i>parameters</i>
            </code>
            If the default value of a property shall be used, the corresponding part of the connection string can be omitted.
            If <i>parameters</i> contains characters with a special meaning in connection strings (semicolon, equals sign), enclose
            <i>parameters</i> in single or double quotes.
            </para>
            </remarks>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.CustomConnectorParameters.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Configuration.CustomConnectorParameters"/> class.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.CustomConnectorParameters.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Configuration.CustomConnectorParameters"/> class.
            </summary>
            <param name="typeName">The AQN of the type implementing <see cref="T:Knx.Bus.Common.ICustomBusDriver"/>.</param>
            <param name="parameters">Any additional parameters to be passed to <see cref="M:Knx.Bus.Common.ICustomBusDriver.Open(Knx.Bus.Common.ConnectorMode,System.String,System.Action{System.Byte[]},System.Action{System.Boolean})"/>.</param>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.CustomConnectorParameters.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Configuration.UsbConnectorParameters"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/>.</param>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.CustomConnectorParameters.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data. </param><param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization. </param><exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="P:Knx.Bus.Common.Configuration.CustomConnectorParameters.TypeName">
            <summary>
            Gets or sets the AQN of the type implementing <see cref="T:Knx.Bus.Common.ICustomBusDriver"/>
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Configuration.CustomConnectorParameters.Parameters">
            <summary>
            Gets or sets any additional parameters to be passed to <see cref="M:Knx.Bus.Common.ICustomBusDriver.Open(Knx.Bus.Common.ConnectorMode,System.String,System.Action{System.Byte[]},System.Action{System.Boolean})"/>
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Configuration.CustomConnectorParameters.Type">
             <summary>
             Always returns <see cref="F:Knx.Bus.Common.ConnectorTypes.USB"/>, as this is the USB specific parameter class.
             </summary>
            <value>The <see cref="T:Knx.Bus.Common.ConnectorTypes"/>.</value>    
        </member>
        <member name="M:Knx.Bus.Common.Configuration.CustomConnectorParameters.InternalEquals(Knx.Bus.Common.Configuration.ConnectorParameters)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.CustomConnectorParameters.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.CustomConnectorParameters.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Knx.Bus.Common.Configuration.EiblibConnectorParameters">
            <summary>
            This class provides parameters used to open an Eiblib connection.
            </summary>
            <remarks>
            At least <see cref="P:Knx.Bus.Common.Configuration.EiblibConnectorParameters.IpAddress"/> or <see cref="P:Knx.Bus.Common.Configuration.EiblibConnectorParameters.IpAddressString"/> must be set before this parameter object can
            be used to open a connection.
            </remarks>
            <remarks>
            <para>
            <b>Connection string support</b>
            </para>
            <para>
            <code language="text">
            Type=Eiblib;IpAddressString=<i>ipaddr</i>;ConfigPort=<i>port</i>;WritePort=<i>port</i>;ReadPort=<i>port</i>;ComPort=<i>number</i>;UseTcp=True
            </code>
            If the default value of a property shall be used, the corresponding part of the connection string can be omitted.
            </para>
            </remarks>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.EiblibConnectorParameters.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Configuration.EiblibConnectorParameters"/> class.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.EiblibConnectorParameters.#ctor(System.String,System.UInt16,System.UInt16,System.UInt16,System.Byte,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Configuration.EiblibConnectorParameters"/> class.
            </summary>
            <param name="ipAddress">The IP address of the Eiblib/IP server to be used.</param>
            <param name="configPort">The config port of the Eiblib/IP server.</param>
            <param name="readPort">The read port of the Eiblib/IP server.</param>
            <param name="writePort">The write port of the Eiblib/IP server.</param>
            <param name="comPort">The COM port of the Eiblib/IP server to be used. The number is 1-based.</param>
            <param name="tcp">Flag indicating if TCP shall be used instead of UDP.</param>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.EiblibConnectorParameters.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Configuration.EiblibConnectorParameters"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/>.</param>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.EiblibConnectorParameters.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data. </param><param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization. </param><exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="P:Knx.Bus.Common.Configuration.EiblibConnectorParameters.Type">
             <summary>
             Always returns <see cref="F:Knx.Bus.Common.ConnectorTypes.Eiblib"/>, as this is the Eiblib specific parameter class.
             </summary>
            <value>The <see cref="T:Knx.Bus.Common.ConnectorTypes"/>.</value>    
        </member>
        <member name="P:Knx.Bus.Common.Configuration.EiblibConnectorParameters.IpAddressString">
            <summary>
            The IP address of the Eiblib/IP server to be used as string.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Configuration.EiblibConnectorParameters.IpAddress">
            <summary>
            The IP address of the Eiblib/IP server to be used.
            </summary> 
        </member>
        <member name="P:Knx.Bus.Common.Configuration.EiblibConnectorParameters.ConfigPort">
            <summary>
            The config port of the Eiblib/IP server (default: 50000).
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Configuration.EiblibConnectorParameters.WritePort">
            <summary>
            The write port of the Eiblib/IP server (default: 50002).
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Configuration.EiblibConnectorParameters.ReadPort">
            <summary>
            The read port of the Eiblib/IP server (default: 50001).
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Configuration.EiblibConnectorParameters.ComPort">
            <summary>
            The COM port of the Eiblib/IP server to be used (default: 1).
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Configuration.EiblibConnectorParameters.UseTcp">
            <summary>
            Flag indicating that TCP shall be used instead of UDP (default: false).
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.EiblibConnectorParameters.InternalEquals(Knx.Bus.Common.Configuration.ConnectorParameters)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.EiblibConnectorParameters.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.EiblibConnectorParameters.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Knx.Bus.Common.Configuration.IpProtocol">
            <summary>
            IP protocol type
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.Configuration.IpProtocol.Auto">
            <summary>
            Select protocol type depending on reported KNXnet/IP Core version
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.Configuration.IpProtocol.Udp">
            <summary>
            Force UDP
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.Configuration.IpProtocol.Tcp">
            <summary>
            Force TCP
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Configuration.IProvideSecureSerializationPassword">
            <summary>
            This interface is used during serialization of <see cref="T:Knx.Bus.Common.Configuration.ConnectorParameters"/> containing
            security-critical information like keys or password.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.IProvideSecureSerializationPassword.GetPassword">
            <summary>
            Gets a password for serializing security-critical information.
            </summary>
            <returns>The password</returns>
        </member>
        <member name="T:Knx.Bus.Common.Configuration.KnxIpConnectorParameters">
            <summary>
            This class is the base class for KNXnet/IP connector parameters used to open a KNXnet/IP tunneling or device management connection.
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.Configuration.KnxIpConnectorParameters.DefaultIpPort">
            <summary>
            The default KNXnet/IP port (3671).
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.KnxIpConnectorParameters.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Configuration.KnxIpConnectorParameters"/> class.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.KnxIpConnectorParameters.#ctor(Knx.Bus.Common.KnxIp.DiscoveryResult,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Configuration.KnxIpConnectorParameters"/> class.
            </summary>
            <param name="info">The result of a KNX IP Discovery search <see cref="T:Knx.Bus.Common.KnxIp.DiscoveryResult"/>.</param>
            <param name="useNAT">if set to <c>true</c> NAT mode is used (UDP only)</param>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.KnxIpConnectorParameters.#ctor(System.String,System.UInt16,Knx.Bus.Common.Configuration.IpProtocol,System.Boolean,Knx.Bus.Common.SerialNumber)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Configuration.KnxIpConnectorParameters"/> class.
            </summary>
            <param name="address">The IP address.</param>
            <param name="ipPort">The IP port of the target device.</param>
            <param name="protocolType">Protocol type to use</param>
            <param name="useNAT">if set to <c>true</c> NAT mode is used (UDP only)</param>
            <param name="serialNumber">The serial number of the target device. This may be used to find the device again after an IP address change.</param>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.KnxIpConnectorParameters.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Configuration.KnxIpConnectorParameters"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.KnxIpConnectorParameters.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data. </param><param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization. </param><exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="P:Knx.Bus.Common.Configuration.KnxIpConnectorParameters.HostAddress">
             <summary>
             Gets or sets the host IP address as string.
             </summary>
            <value>The host IP address.</value>    
        </member>
        <member name="P:Knx.Bus.Common.Configuration.KnxIpConnectorParameters.SerialNumber">
             <summary>
             Gets or sets the serial number
             </summary>
            <value>The host serial number.</value>    
        </member>
        <member name="P:Knx.Bus.Common.Configuration.KnxIpConnectorParameters.IpAddress">
             <summary>
             Gets the the host IP address as <see cref="T:System.Net.IPAddress"/>.
             </summary>
            <value>The host IP address.</value>    
        </member>
        <member name="P:Knx.Bus.Common.Configuration.KnxIpConnectorParameters.IpPort">
             <summary>
             Gets or sets the IP port (default: 3671).
             </summary>
            <value>The IP port.</value>   
        </member>
        <member name="P:Knx.Bus.Common.Configuration.KnxIpConnectorParameters.ProtocolType">
            <summary>
            Gets or sets a value indicating which IP protocol to use (default: Auto, i.e. determine by supported KNXnet/IP Core version).
            </summary>
            <value>
              The IP protocol to use.
            </value>
        </member>
        <member name="P:Knx.Bus.Common.Configuration.KnxIpConnectorParameters.UseNat">
            <summary>
            Gets or sets a value indicating whether NAT mode is used (UDP only, default: false).
            </summary>
            <value>
              <c>true</c> if NAT mode is used; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.KnxIpConnectorParameters.InternalEquals(Knx.Bus.Common.Configuration.ConnectorParameters)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.KnxIpConnectorParameters.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.KnxIpConnectorParameters.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Knx.Bus.Common.Configuration.KnxIpDeviceManagementConnectorParameters">
            <summary>
            This class provides parameters used to open a KNXnet/IP Device Management connection.
            </summary>
            <remarks>
            <para>
            <b>Connection string support</b>
            </para>
            <para>
            <code language="text">
            Type=KnxIpcEmiTl;HostAddress=<i>ipaddr</i>;IpPort=<i>port</i>;ProtocolType=<i>protocol</i>;UseNAT=True
            </code>
            If the default value of a property shall be used, the corresponding part of the connection string can be omitted.
            </para>
            </remarks>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.KnxIpDeviceManagementConnectorParameters.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Configuration.KnxIpDeviceManagementConnectorParameters"/> class.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.KnxIpDeviceManagementConnectorParameters.#ctor(Knx.Bus.Common.KnxIp.DiscoveryResult)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Configuration.KnxIpDeviceManagementConnectorParameters"/> class.
            </summary>
            <param name="info">The result of a KNX IP Discovery search <see cref="T:Knx.Bus.Common.KnxIp.DiscoveryResult"/>.</param>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.KnxIpDeviceManagementConnectorParameters.#ctor(System.String,System.UInt16,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Configuration.KnxIpDeviceManagementConnectorParameters"/> class.
            </summary>
            <param name="address">The IP address of the target device.</param>
            <param name="ipPort">The IP port.</param>
            <param name="useNAT">if set to <c>true</c> NAT mode is used (UDP only).</param>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.KnxIpDeviceManagementConnectorParameters.#ctor(System.String,System.UInt16,Knx.Bus.Common.Configuration.IpProtocol,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Configuration.KnxIpDeviceManagementConnectorParameters"/> class.
            </summary>
            <param name="address">The IP address of the target device.</param>
            <param name="ipPort">The IP port.</param>
            <param name="protocolType">Protocol type to use</param>
            <param name="useNAT">if set to <c>true</c> NAT mode is used (UDP only).</param>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.KnxIpDeviceManagementConnectorParameters.#ctor(System.String,System.UInt16,Knx.Bus.Common.Configuration.IpProtocol,System.Boolean,Knx.Bus.Common.SerialNumber)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Configuration.KnxIpDeviceManagementConnectorParameters"/> class.
            </summary>
            <param name="address">The IP address of the target device.</param>
            <param name="ipPort">The IP port.</param>
            <param name="protocolType">Protocol type to use</param>
            <param name="useNAT">if set to <c>true</c> NAT mode is used (UDP only).</param>
            <param name="serialNumber">The serial number of the target device. This may be used to find the device again after an IP address change.</param>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.KnxIpDeviceManagementConnectorParameters.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Configuration.KnxIpDeviceManagementConnectorParameters"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.KnxIpDeviceManagementConnectorParameters.InternalEquals(Knx.Bus.Common.Configuration.ConnectorParameters)">
            <summary>
            Indicates whether the current KnxIpDeviceManagementConnectorParameter is equal to another object of the same type.
            </summary>
            <param name="other">ConnectorParameter to compare with this object.</param>
            <returns>
            true if the current object is equal to the other parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.KnxIpDeviceManagementConnectorParameters.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.KnxIpDeviceManagementConnectorParameters.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="P:Knx.Bus.Common.Configuration.KnxIpDeviceManagementConnectorParameters.Type">
            <summary>
            Always returns <see cref="F:Knx.Bus.Common.ConnectorTypes.KnxIpcEmiTl"/>, as this is the KNX/IP device management specific parameter class.
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Configuration.KnxIpRoutingConnectorParameters">
            <summary>
            This class provides parameters used to open a KNXnet/IP Routing connection.
            </summary>
            <remarks>
            <para>
            <b>Connection string support</b>
            </para>
            <para>
            <code language="text">
            Type=KnxIpRouting;MulticastAddress=<i>ipaddr</i>;IpPort=<i>port</i>;KnxAddress=<i>indaddr</i>
            </code>
            If multiple network interfaces are present, the routing connection can be bound to a specific interface using
            <code language="text">
            Type=KnxIpRouting;...;LocalAddress=<i>ipaddr</i>
            </code>
            If the default value of a property shall be used, the corresponding part of the connection string can be omitted.
            </para>
            </remarks>
        </member>
        <member name="F:Knx.Bus.Common.Configuration.KnxIpRoutingConnectorParameters.DefaultIpPort">
            <summary>
            The default KNXnet/IP port (3671).
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.Configuration.KnxIpRoutingConnectorParameters.SystemSetupMulticastAddressString">
            <summary>
            The System Setup Multicast Address (224.0.23.12).
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.Configuration.KnxIpRoutingConnectorParameters.SystemSetupMulticastAddress">
            <summary>
            The System Setup Multicast Address (224.0.23.12).
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.KnxIpRoutingConnectorParameters.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Configuration.KnxIpRoutingConnectorParameters"/> class.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.KnxIpRoutingConnectorParameters.#ctor(Knx.Bus.Common.KnxIp.DiscoveryResult)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Configuration.KnxIpRoutingConnectorParameters"/> class
            from the result of a discovery.
            </summary>
            <param name="info">The result of a KNXnet/IP Discovery search <see cref="T:Knx.Bus.Common.KnxIp.DiscoveryResult"/>.</param>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.KnxIpRoutingConnectorParameters.#ctor(System.String,System.Nullable{Knx.Bus.Common.IndividualAddress},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Configuration.KnxIpRoutingConnectorParameters"/> class.
            </summary>
            <param name="multicastAddress">The multicast address.</param>
            <param name="knxAddress">The KNX individual address to be used as source address for sent telegrams.</param>
            <param name="localAddress">The local IP address. 
            This determines the interface to bind to on Windows; determines multicast group membership on Linux and Windows.</param>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.KnxIpRoutingConnectorParameters.#ctor(System.String,System.Nullable{Knx.Bus.Common.IndividualAddress},System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Configuration.KnxIpRoutingConnectorParameters"/> class.
            </summary>
            <param name="multicastAddress">The multicast address.</param>
            <param name="knxAddress">The KNX individual address to be used as source address for sent telegrams.</param>
            <param name="bindToInterfaceName">The interface name to bind to using SO_BINDTODEVICE (relevant for Linux only, ignored on Windows).</param>
            <param name="localAddress">The local IP address. 
            This determines interface to bind to on Windows; determines multicast group membership on Linux and Windows.</param>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.KnxIpRoutingConnectorParameters.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Configuration.KnxIpRoutingConnectorParameters"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.KnxIpRoutingConnectorParameters.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data. </param><param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization. </param><exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="P:Knx.Bus.Common.Configuration.KnxIpRoutingConnectorParameters.MulticastAddress">
             <summary>
             Gets or sets the multicast address as string (default: "224.0.23.12").
             </summary>
            <value>The multicast address.</value>  
        </member>
        <member name="P:Knx.Bus.Common.Configuration.KnxIpRoutingConnectorParameters.MulticastAddressIp">
             <summary>
             Gets or sets the multicast address as <see cref="T:System.Net.IPAddress"/>.
             </summary>
            <value>The multicast address.</value>  
        </member>
        <member name="P:Knx.Bus.Common.Configuration.KnxIpRoutingConnectorParameters.IpPort">
             <summary>
             Gets or sets the IP port.
             </summary>
            <value>The IP port.</value>  
        </member>
        <member name="P:Knx.Bus.Common.Configuration.KnxIpRoutingConnectorParameters.MulticastTtl">
             <summary>
             Gets or sets the TTL value for multicast.
             </summary>
            <value>The TTL value.</value>  
        </member>
        <member name="P:Knx.Bus.Common.Configuration.KnxIpRoutingConnectorParameters.KnxAddress">
             <summary>
             Gets the individual KNX individual address to be used as source address for sent telegrams.
             </summary>
            <value>The individual address.</value>  
        </member>
        <member name="P:Knx.Bus.Common.Configuration.KnxIpRoutingConnectorParameters.LocalAddress">
             <summary>
             Gets or sets the local IP address as string.
             </summary>
             <remarks>
             If multiple network interfaces are present, this property is used to bind
             the routing connection to a specific interface.
             </remarks>
            <value>The local IP address.</value>    
        </member>
        <member name="P:Knx.Bus.Common.Configuration.KnxIpRoutingConnectorParameters.LocalAddressIp">
            <summary>
            Gets the local IP address as <see cref="T:System.Net.IPAddress"/>.
            </summary>
            <value>The local IP address.</value>    
        </member>
        <member name="P:Knx.Bus.Common.Configuration.KnxIpRoutingConnectorParameters.EnableIPSystemBroadcast">
            <summary>
            Enables processing of IP System broadcasts
            </summary>
            <value>true to enable, false to disable IP System Broadcasts.</value>
            <remarks>
            The default value is true. If Falcon is used for runtime communication only, it is highly recommended to set the value to false.
            </remarks> 
        </member>
        <member name="P:Knx.Bus.Common.Configuration.KnxIpRoutingConnectorParameters.BindToInterfaceName">
            <summary>
            Reserved; do not use
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Configuration.KnxIpRoutingConnectorParameters.SystemBroadcastFilterMode">
            <summary>
            System broadcast filter modes.
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.Configuration.KnxIpRoutingConnectorParameters.SystemBroadcastFilterMode.FilterIpRouter">
            <summary>
            Allow only specific system broadcast frames for the TP-to-IP direction and the IP-to-TP direction to pass the filter.
            This filter is sufficient to let Falcon play the role of an IP-router, a device or a client.
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.Configuration.KnxIpRoutingConnectorParameters.SystemBroadcastFilterMode.FilterOff">
            <summary>
            Filtering of system broadcast frames is off. All system broadcast frames pass the filter.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Configuration.KnxIpRoutingConnectorParameters.SystemBroadcastReceiveFilter">
            <summary>
            Sets or sets the IP system broadcast receive filter mode.
            </summary>
            <remarks>
            <para>
            This determines which IP system broadcast frames are received by the connector
            and which are discarded.
            </para>
            <para>
            Default is <see cref="F:Knx.Bus.Common.Configuration.KnxIpRoutingConnectorParameters.SystemBroadcastFilterMode.FilterIpRouter"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Knx.Bus.Common.Configuration.KnxIpRoutingConnectorParameters.SystemBroadcastSendFilter">
            <summary>
            Sets or sets the IP system broadcast send filter mode.
            </summary>
            <remarks>
            Messages not passing this filter are changed to broadcast messages automatically.
            Default is FilterIpRouter. Used only for unit tests.
            </remarks>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.KnxIpRoutingConnectorParameters.InternalEquals(Knx.Bus.Common.Configuration.ConnectorParameters)">
            <summary>
            Indicates whether the current KnxIpRoutingConnectorParameter is equal to another object of the same type.
            </summary>
            <param name="other">ConnectorParameter to compare with this object.</param>
            <returns>
            true if the current object is equal to the other parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.KnxIpRoutingConnectorParameters.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.KnxIpRoutingConnectorParameters.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="P:Knx.Bus.Common.Configuration.KnxIpRoutingConnectorParameters.Type">
            <summary>
            Always returns <see cref="F:Knx.Bus.Common.ConnectorTypes.KnxIpRouting"/>, as this is the KNX/IP Routing specific parameter class.
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Configuration.KnxIpSecureDeviceManagementConnectorParameters">
            <summary>
            This class provides parameters used to open a secure KNXnet/IP Device Management connection.
            </summary>
            <remarks>
            <para>
            <b>Connection string support</b>
            </para>
            <code language="text">
            Type=KnxIpcEmiTl;Secure=True;(other parameters like for non-secure device management connections)
            </code>
            <para>
            By default, security-sensitive information like keys and password hashes are not included in the connection string.
            <para>
            <para>
            If security-critical information shall be included in the connection string,
            it has to be encrypted by a password provided by the Falcon client.
            Use the <see cref="M:Knx.Bus.Common.Configuration.ConnectorParameters.ToConnectionString(System.Security.SecureString)"/> and 
             <see cref="M:Knx.Bus.Common.Configuration.ConnectorParameters.FromConnectionString(System.String,System.Security.SecureString)"/> methods in this case.
            </para>
            <para>
            <b>Remark on serialization</b>
            </para>
            </para>
            Also when using the .NET serialization, security-sensitive information like keys and password hashes are not serialized.
            </para>
            <para>
            If security-critical information shall be serialized, a password has to be provided by the Falcon client
            to encrypt the data via the "additional" parameter of the <see cref="M:System.Runtime.Serialization.StreamingContext.#ctor(System.Runtime.Serialization.StreamingContextStates,System.Object)"/> constructor.
            The object passed here can be one of the following:
            <list type="bullet">
            <item>The password itself as <see cref="T:System.Security.SecureString"/> object.</item>
            <item>An object implementing the interface <see cref="T:Knx.Bus.Common.Configuration.IProvideSecureSerializationPassword"/>; the password will
            ber retrieved by calling <see cref="M:Knx.Bus.Common.Configuration.IProvideSecureSerializationPassword.GetPassword"/>.</item>
            <item>An object implementing the interface <see cref="T:System.IServiceProvider"/>; Falcon will then retrieve the interface
            via GetService(typeof(IProvideSecureSerializationPassword)).</item>
            </list>
            </para>
            <example>
              <code lang="cs" source="..\DocumentationSamples\BusSamples.cs" region="Serialize with security properties"/>
            </example>
            </remarks>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.KnxIpSecureDeviceManagementConnectorParameters.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Configuration.KnxIpSecureDeviceManagementConnectorParameters"/> class.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Configuration.KnxIpSecureDeviceManagementConnectorParameters.IsSecure">
            <inheritdoc/>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.KnxIpSecureDeviceManagementConnectorParameters.#ctor(Knx.Bus.Common.KnxIp.DiscoveryResult)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Configuration.KnxIpSecureDeviceManagementConnectorParameters"/> class.
            </summary>
            <param name="info">The result of a KNX IP Discovery search <see cref="T:Knx.Bus.Common.KnxIp.DiscoveryResult"/>.</param>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.KnxIpSecureDeviceManagementConnectorParameters.#ctor(System.String,System.UInt16,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Configuration.KnxIpSecureDeviceManagementConnectorParameters"/> class.
            </summary>
            <param name="address">The IP address of the target device.</param>
            <param name="ipPort">The IP port.</param>
            <param name="useNAT">if set to <c>true</c> NAT mode is used (UDP only).</param>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.KnxIpSecureDeviceManagementConnectorParameters.#ctor(System.String,System.UInt16,Knx.Bus.Common.Configuration.IpProtocol,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Configuration.KnxIpSecureDeviceManagementConnectorParameters"/> class.
            </summary>
            <param name="address">The IP address of the target device.</param>
            <param name="ipPort">The IP port.</param>
            <param name="protocolType">Protocol type to use</param>
            <param name="useNAT">if set to <c>true</c> NAT mode is used (UDP only).</param>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.KnxIpSecureDeviceManagementConnectorParameters.#ctor(System.String,System.UInt16,Knx.Bus.Common.Configuration.IpProtocol,System.Boolean,Knx.Bus.Common.SerialNumber)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Configuration.KnxIpSecureDeviceManagementConnectorParameters"/> class.
            </summary>
            <param name="address">The IP address of the target device.</param>
            <param name="ipPort">The IP port.</param>
            <param name="protocolType">Protocol type to use</param>
            <param name="useNAT">if set to <c>true</c> NAT mode is used (UDP only).</param>
            <param name="serialNumber">The serial number of the target device. This may be used to find the device again after an IP address change.</param>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.KnxIpSecureDeviceManagementConnectorParameters.LoadSecurityData(Knx.Bus.Common.IndividualAddress,System.String,System.Security.SecureString)">
            <summary>
            Load the security configuration from a keyring file (*.knxkeys) exported from ETS.
            </summary>
            <param name="individualAddress">The individual address of the device; used to locate the device in the keyring file</param>
            <param name="fileName">Path of the knxkeys file</param>
            <param name="password">Password for the knxkeys file</param>
            <returns>Success</returns>
            <remarks>
            <para>
            When loading data from an ETS keyring file (which may contain multiple secure tunneling interface entries),
            the correct entry is selected by individual address.
            So <see cref="P:Knx.Bus.Common.Configuration.KnxIpTunnelingConnectorParameters.IndividualAddress"/> must be set before calling 
            this method.
            </para>
            <para>
            The following data is loaded:
            <list type="bullet">
            <item><see cref="P:Knx.Bus.Common.Configuration.KnxIpSecureDeviceManagementConnectorParameters.UserId"/></item>
            <item><see cref="P:Knx.Bus.Common.Configuration.KnxIpSecureDeviceManagementConnectorParameters.UserPasswordHash"/></item>
            <item><see cref="P:Knx.Bus.Common.Configuration.KnxIpSecureDeviceManagementConnectorParameters.DeviceAuthenticationCodeHash"/></item>
            </list>
            </para>
            </remarks>
            <example>
              <code lang="cs" source="..\DocumentationSamples\BusSamples.cs" region="Secure Tunneling data from keyring"/>
            </example>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.KnxIpSecureDeviceManagementConnectorParameters.LoadSecurityData(Knx.Bus.Common.IndividualAddress,System.IO.Stream,System.Security.SecureString)">
            <summary>
            Load the security configuration from a keyring file (*.knxkeys) exported from ETS.
            </summary>
            <param name="individualAddress">The individual address of the device; used to locate the device in the keyring file</param>
            <param name="stream">The data from the knxkeys file</param>
            <param name="password">Password for the knxkeys file</param>
            <returns>Success</returns>
            <remarks>
            <para>
            When loading data from an ETS keyring file (which may contain multiple secure tunneling interface entries),
            the correct entry is selected by individual address.
            So <see cref="P:Knx.Bus.Common.Configuration.KnxIpTunnelingConnectorParameters.IndividualAddress"/> must be set before calling 
            this method.
            </para>
            <para>
            The following data is loaded:
            <list type="bullet">
            <item><see cref="P:Knx.Bus.Common.Configuration.KnxIpSecureDeviceManagementConnectorParameters.UserId"/></item>
            <item><see cref="P:Knx.Bus.Common.Configuration.KnxIpSecureDeviceManagementConnectorParameters.UserPasswordHash"/></item>
            <item><see cref="P:Knx.Bus.Common.Configuration.KnxIpSecureDeviceManagementConnectorParameters.DeviceAuthenticationCodeHash"/></item>
            </list>
            </para>
            </remarks>
            <example>
              <code lang="cs" source="..\DocumentationSamples\BusSamples.cs" region="Secure Tunneling data from keyring"/>
            </example>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.KnxIpSecureDeviceManagementConnectorParameters.LoadSecurityData(Knx.Bus.Common.IndividualAddress,System.IO.Stream,System.Security.SecureString,System.Boolean)">
            <summary>
            Load the security configuration from a keyring file (*.knxkeys) exported from ETS.
            </summary>
            <param name="individualAddress">The individual address of the device; used to locate the device in the keyring file</param>
            <param name="stream">The data from the knxkeys file</param>
            <param name="password">Password for the knxkeys file</param>
            <param name="doNotValidateSignature">If <c>true</c>, the file signature is not validated. 
            Use this only for test purposes because a manipulated knxkeys file may present a security risk.</param>
            <returns>Success</returns>
            <remarks>
            <para>
            When loading data from an ETS keyring file (which may contain multiple secure tunneling interface entries),
            the correct entry is selected by individual address.
            So <see cref="P:Knx.Bus.Common.Configuration.KnxIpTunnelingConnectorParameters.IndividualAddress"/> must be set before calling 
            this method.
            </para>
            <para>
            The following data is loaded:
            <list type="bullet">
            <item><see cref="P:Knx.Bus.Common.Configuration.KnxIpSecureDeviceManagementConnectorParameters.UserId"/></item>
            <item><see cref="P:Knx.Bus.Common.Configuration.KnxIpSecureDeviceManagementConnectorParameters.UserPasswordHash"/></item>
            <item><see cref="P:Knx.Bus.Common.Configuration.KnxIpSecureDeviceManagementConnectorParameters.DeviceAuthenticationCodeHash"/></item>
            </list>
            </para>
            </remarks>
            <example>
              <code lang="cs" source="..\DocumentationSamples\BusSamples.cs" region="Secure Tunneling data from keyring"/>
            </example>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.KnxIpSecureDeviceManagementConnectorParameters.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Configuration.KnxIpSecureDeviceManagementConnectorParameters"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.KnxIpSecureDeviceManagementConnectorParameters.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data. </param><param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization. </param><exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="P:Knx.Bus.Common.Configuration.KnxIpSecureDeviceManagementConnectorParameters.UserId">
            <summary>
            User id for authentication to the server (together with UserPasswordHash).
            </summary>
            <remarks>
            <list type="bullet">
            <item>0x01: Management level access.</item>
            <item>0x02..0x7f: User level access.</item>
            <item>0x00 and 0x80..0xff: Reserved.</item>
            </list>
            0x01: Management level access.
            0x02..0x7f: User level access.
            0x00 and 0x80..0xff: Reserved.
            Default is 1 (management level access).
            </remarks>
        </member>
        <member name="P:Knx.Bus.Common.Configuration.KnxIpSecureDeviceManagementConnectorParameters.UserPasswordHash">
            <summary>
            Password hash for authentication to the server (together with UserId).
            </summary>
            <remarks>
            The password hash is UserId specific.
            The default password hash is the hash of the empty string (e9c304b914a35175fd7d1c673ab52fe1).
            Use <see cref="M:Knx.Bus.Common.Configuration.KnxIpSecureDeviceManagementConnectorParameters.GetUserPasswordHash(System.Security.SecureString)" /> to generate the user password hash for a given password.
            </remarks>
        </member>
        <member name="P:Knx.Bus.Common.Configuration.KnxIpSecureDeviceManagementConnectorParameters.Password">
            <summary>
            Password for authentication to the server (for ETS use only!).
            </summary>
            <remarks>
            See UserPasswordHash.
            Setting this will set the UserPasswordHash.
            Reading this will return the last set password.
            </remarks>
        </member>
        <member name="P:Knx.Bus.Common.Configuration.KnxIpSecureDeviceManagementConnectorParameters.DeviceAuthenticationCodeHash">
            <summary>
            Device authentication code hash.
            </summary>
            <remarks>
            This is used to optionally check the authenticity of the device.
            This must be either set to byte[16] or null:
            byte[16]: DeviceAuthenticationCodeHash is verified against the device authentication code hash sent by the device. An error is caused if they do not match.
            null: The device authentication code hash sent by the device is ignored. The user ultimately trusts that Falcon is talking to the correct device.
            Default is null.
            Use <see cref="M:Knx.Bus.Common.Configuration.KnxIpSecureDeviceManagementConnectorParameters.GetDeviceAuthenticationCodeHash(System.Security.SecureString)" /> to generate the hash for a password.
            </remarks>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.KnxIpSecureDeviceManagementConnectorParameters.GetUserPasswordHash(System.Security.SecureString)">
            <summary>
            Convert a textual user password into a hash suitable for UserPasswordHash.
            </summary>
            <param name="password">Textual password to be hashed.</param>
            <returns>Hash of password.</returns>
            <remarks>
            The hash is calculated using this algorithm:
            PBKDF2(hmac=HMAC-SHA256, password, salt = "user-password.1.secure.ip.knx.org", iterations = 65536, derived_key_length_in_bytes = 16)
            </remarks>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.KnxIpSecureDeviceManagementConnectorParameters.GetDeviceAuthenticationCodeHash(System.Security.SecureString)">
            <summary>
            Convert a textual device authentication code password into a hash suitable for DeviceAuthenticationCodeHash.
            </summary>
            <param name="password">Textual password to be hashed.</param>
            <returns>Hash of password.</returns>
            <remarks>
            The hash is calculated using this algorithm:
            PBKDF2(hmac=HMAC-SHA256, password, salt = "device-authentication-code.1.secure.ip.knx.org", iterations = 65536, derived_key_length_in_bytes = 16)
            </remarks>
        </member>
        <member name="F:Knx.Bus.Common.Configuration.KnxIpSecureDeviceManagementConnectorParameters.DefaultUserPasswordHash">
            <summary>
            Password hash of default user password, the empty password.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.KnxIpSecureDeviceManagementConnectorParameters.InternalEquals(Knx.Bus.Common.Configuration.ConnectorParameters)">
            <summary>
            Indicates whether the current KnxSecureIpDeviceManagementConnectorParameter is equal to another object of the same type.
            </summary>
            <param name="other">ConnectorParameter to compare with this object.</param>
            <returns>
            true if the current object is equal to the other parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.KnxIpSecureDeviceManagementConnectorParameters.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.KnxIpSecureDeviceManagementConnectorParameters.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Knx.Bus.Common.Configuration.KnxIpSecureRoutingConnectorParameters">
            <summary>
            This class provides parameters used to open a secured KNXnet/IP Routing connection.
            </summary>
            <remarks>
            <example>
              <code lang="cs" title="Backbone key given in code:" source="..\DocumentationSamples\BusSamples.cs" region="Secure Routing key from parameter"/>
              <code lang="cs" title="Backbone key loaded from a keyring file:" source="..\DocumentationSamples\BusSamples.cs" region="Secure Routing key from keyring"/>
            </example>
            <para>
            <b>Connection string support</b>
            </para>
            <code language="text">
            Type=KnxIpRouting;Secure=True;(other parameters like for non-secure routing connections)
            </code>
            <para>
            By default, security-sensitive information like keys and password hashes are not included in the connection string.
            <para>
            <para>
            If there is an ETS keyring file available, the <see cref="M:Knx.Bus.Common.Configuration.KnxIpSecureRoutingConnectorParameters.LoadSecurityData(System.String,System.Security.SecureString)"/> method
            can be used to load the security data from there.
            </para>
            <para>
            Alternatively, if security-critical information shall be included in the connection string,
            it has to be encrypted by a password provided by the Falcon client.
            Use the <see cref="M:Knx.Bus.Common.Configuration.ConnectorParameters.ToConnectionString(System.Security.SecureString)"/> and 
             <see cref="M:Knx.Bus.Common.Configuration.ConnectorParameters.FromConnectionString(System.String,System.Security.SecureString)"/> methods in this case.
            </para>
            <para>
            <b>Remark on serialization</b>
            </para>
            </para>
            Also when using the .NET serialization, security-sensitive information like keys and password hashes are not serialized.
            </para>
            <para>
            If there is an ETS keyring file available, the <see cref="M:Knx.Bus.Common.Configuration.KnxIpSecureRoutingConnectorParameters.LoadSecurityData(System.String,System.Security.SecureString)"/> method
            can be used to load the security data from there.
            </para>
            <para>
            Alternatively, if security-critical information shall be serialized, a password has to be provided by the Falcon client
            to encrypt the data via the "additional" parameter of the <see cref="M:System.Runtime.Serialization.StreamingContext.#ctor(System.Runtime.Serialization.StreamingContextStates,System.Object)"/> constructor.
            The object passed here can be one of the following:
            <list type="bullet">
            <item>The password itself as <see cref="T:System.Security.SecureString"/> object.</item>
            <item>An object implementing the interface <see cref="T:Knx.Bus.Common.Configuration.IProvideSecureSerializationPassword"/>; the password will
            ber retrieved by calling <see cref="M:Knx.Bus.Common.Configuration.IProvideSecureSerializationPassword.GetPassword"/>.</item>
            <item>An object implementing the interface <see cref="T:System.IServiceProvider"/>; Falcon will then retrieve the interface
            via GetService(typeof(IProvideSecureSerializationPassword)).</item>
            </list>
            </para>
            <example>
              <code lang="cs" source="..\DocumentationSamples\BusSamples.cs" region="Serialize with security properties"/>
            </example>
            </remarks>
        </member>
        <member name="F:Knx.Bus.Common.Configuration.KnxIpSecureRoutingConnectorParameters._backboneKey">
            <summary>
            Multicast group key, 16 bytes.
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.Configuration.KnxIpSecureRoutingConnectorParameters._latencyToleranceInMs">
            <summary>
            Multicast latency tolerance in ms:
            Packets which are older than the current group timer are accepted if their age is less than the
            latency tolerance. Packets which are younger than the current group timer are always accepted, regardless of the age difference.
            (Such packets update the group timer.)
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.Configuration.KnxIpSecureRoutingConnectorParameters._syncLatencyToleranceInMs">
            <summary>
            Sync latency tolerance in [ms].
            Group timers of devices are considered to be in sync (and do not require further synchronization) if their difference is less than this tolerance.
            The sync latency tolerance is given in ms.   
            It should be set so that the latency of at least 90% of all network traffic is below the sync latency tolerance.
            This must be significantly less than the LatencyTolerance.
            The default value is 200 ms which is 10% of the LatencyTolerance.
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Configuration.KnxIpSecureRoutingConnectorParameters.SecureConnectMode">
            <summary>
            The ConnectMode specifies the behavior of Bus.Connect() regarding synchronizing the
            multicast group-timer with other devices in the network.
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.Configuration.KnxIpSecureRoutingConnectorParameters.SecureConnectMode.ConnectSynchronized">
            <summary>
            <para>
            Bus.Connect() blocks until either a trusted TIMER_NOTIFY has been received, 
            or until maxDelayResponse+latencyTolerance elapsed.
            </para>
            <para>
            The effect is that Bus.Connect() will normally block until a time keeper sent
            a timer notify correction (TIMER_NOTIFY with our sequence number and message tag).
            If ne time keeper is currently in the network, it will always block for 
            maxDelayResponse+latencyTolerance so that all devices had the opportunity to correct the time.
            After Bus.Connect() returns it is safe to send or
            receive SECURE_WRAPPER frames. This is the default ConnectMode and this is the 
            only secure ConnectMode. This mode should always be used unless there are strong 
            reasons to use one of the other modes.
            </para>
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.Configuration.KnxIpSecureRoutingConnectorParameters.SecureConnectMode.ConnectSynchronizedTrustFirstResponse">
            <summary>
            <para>
            Bus.Connect() blocks until the first TIMER_NOTIFY has been received.
            </para>
            <para>
            This mode is 
            not secure. This mode assumes that all communication on the network can be trusted 
            which is not the case in real-life scenarios. This mode makes the communication 
            (send+receive) of this instance vulnerable to replay-attacks in the initial phase 
            after startup. This mode should only be used for test setups (where all devices 
            can be inherently trusted) or in situations where the authenticity of SECURE_WRAPPER 
            frames sent or received by this instance in the initial phase after startup is not 
            important to the application.
            Note that the group-timer is synchronized with the other devices as usual, but 
            Bus.Connect() will return before the initial synchronization completed.
            </para>
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.Configuration.KnxIpSecureRoutingConnectorParameters.SecureConnectMode.ConnectUnsynchronized">
            <summary>
            <para>
            Bus.Connect() returns immediately, without synchronizing the group-timer with any 
            devices on the network. 
            </para>
            <para>
            Without any other precautions all SECURE_WRAPPER frames
            send by this instance during the initial phase (until the automatic synchronization 
            completed) are likely to be dropped by all other devices on the network. Also all 
            received SECURE_WRAPPER frames received during this initial phase cannot be trusted 
            as they may come from replay-attacks. This mode is insecure unless InitialGroupTimer
            is set to the current group-timer just before calling Bus.Connect(). An application 
            which knows the current and up-to-date group-timer value can set the 
            InitialGroupTimer property together with this mode. In this case the application 
            guarantees the synchronization and the communication is as reliable as in the 
            ConnectSynchronized mode.
            </para>
            <para>
            Note that the group-timer is synchronized with the other devices as usual, but 
            Bus.Connect() will return before the initial synchronization completed.
            </para>
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.Configuration.KnxIpSecureRoutingConnectorParameters._connectMode">
            Connect mode.
        </member>
        <member name="F:Knx.Bus.Common.Configuration.KnxIpSecureRoutingConnectorParameters._initialGroupTimer">
            Initial group-timer value before synchronization.
        </member>
        <member name="M:Knx.Bus.Common.Configuration.KnxIpSecureRoutingConnectorParameters.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Configuration.KnxIpRoutingConnectorParameters"/> class.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.KnxIpSecureRoutingConnectorParameters.#ctor(Knx.Bus.Common.KnxIp.DiscoveryResult)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Configuration.KnxIpRoutingConnectorParameters"/> class
            from the result of a discovery.
            </summary>
            <param name="info">The result of a KNXnet/IP Discovery search <see cref="T:Knx.Bus.Common.KnxIp.DiscoveryResult"/>.</param>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.KnxIpSecureRoutingConnectorParameters.#ctor(System.String,System.Nullable{Knx.Bus.Common.IndividualAddress},System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Configuration.KnxIpRoutingConnectorParameters"/> class.
            </summary>
            <param name="multicastAddress">The multicast address.</param>
            <param name="knxAddress">The KNX individual address to be used as source address for sent telegrams.</param>
            <param name="localAddress">The local IP address. 
            This determines interface to bind to on Windows; determines multicast group membership on Linux and Windows.</param>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.KnxIpSecureRoutingConnectorParameters.#ctor(System.String,System.Nullable{Knx.Bus.Common.IndividualAddress},Knx.Bus.Common.EncryptedBuffer,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Configuration.KnxIpRoutingConnectorParameters"/> class.
            </summary>
            <param name="multicastAddress">The multicast address.</param>
            <param name="knxAddress">The KNX individual address to be used as source address for sent telegrams.</param>
            <param name="backboneKey">The multicast group key.</param>
            <param name="localAddress">The local IP address. 
            This determines interface to bind to on Windows; determines multicast group membership on Linux and Windows.</param>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.KnxIpSecureRoutingConnectorParameters.#ctor(System.String,System.String,Knx.Bus.Common.IndividualAddress,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Configuration.KnxIpRoutingConnectorParameters"/> class.
            </summary>
            <param name="multicastAddress">The multicast address.</param>
            <param name="bindToInterfaceName">The interface name to bind to using SO_BINDTODEVICE (Relevant for Linux only, ignored on Windows.).</param>
            <param name="knxAddress">The KNX individual address to be used as source address for sent telegrams.</param>
            <param name="localAddress">The local IP address. 
            This determines interface to bind to on Windows; determines multicast group membership on Linux and Windows.</param>
        </member>
        <member name="P:Knx.Bus.Common.Configuration.KnxIpSecureRoutingConnectorParameters.IsSecure">
            <inheritdoc/>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.KnxIpSecureRoutingConnectorParameters.LoadSecurityData(System.String,System.Security.SecureString)">
            <summary>
            Load the security configuration from a keyring file (*.knxkeys) exported from ETS.
            </summary>
            <param name="fileName">Path of the knxkeys file</param>
            <param name="password">Password for the knxkeys file</param>
            <returns>Success</returns>
            <remarks>
            <para>
            The following data is loaded from an ETS keyring file:
            <list type="bullet">
            <item><see cref="P:Knx.Bus.Common.Configuration.KnxIpRoutingConnectorParameters.MulticastAddress"/>: If already set,
            the value is compared to the value in the keyring file and the method returns false on mismatch. If not yet set,
            the value is set to the value in the keyring file</item>
            <item><see cref="P:Knx.Bus.Common.Configuration.KnxIpSecureRoutingConnectorParameters.BackboneKey"/></item>
            </list>
            </para>
            </remarks>
            <example>
              <code lang="cs" title="Backbone key loaded from a keyring file:" source="..\DocumentationSamples\BusSamples.cs" region="Secure Routing key from keyring"/>
            </example>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.KnxIpSecureRoutingConnectorParameters.LoadSecurityData(System.IO.Stream,System.Security.SecureString)">
            <summary>
            Load the security configuration from a keyring file (*.knxkeys) exported from ETS.
            </summary>
            <param name="stream">The data from the knxkeys file</param>
            <param name="password">Password for the knxkeys file</param>
            <returns>Success</returns>
            <remarks>
            <para>
            The following data is loaded from an ETS keyring file:
            <list type="bullet">
            <item><see cref="P:Knx.Bus.Common.Configuration.KnxIpRoutingConnectorParameters.MulticastAddress"/>: If already set,
            the value is compared to the value in the keyring file and the method returns false on mismatch. If not yet set,
            the value is set to the value in the keyring file</item>
            <item><see cref="P:Knx.Bus.Common.Configuration.KnxIpSecureRoutingConnectorParameters.BackboneKey"/></item>
            </list>
            </para>
            </remarks>
            <example>
              <code lang="cs" title="Backbone key loaded from a keyring file:" source="..\DocumentationSamples\BusSamples.cs" region="Secure Routing key from keyring"/>
            </example>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.KnxIpSecureRoutingConnectorParameters.LoadSecurityData(System.IO.Stream,System.Security.SecureString,System.Boolean)">
            <summary>
            Load the security configuration from a keyring file (*.knxkeys) exported from ETS.
            </summary>
            <param name="stream">The data from the knxkeys file</param>
            <param name="password">Password for the knxkeys file</param>
            <param name="doNotValidateSignature">If <c>true</c>, the file signature is not validated. 
            Use this only for test purposes because a manipulated knxkeys file may present a security risk.</param>
            <returns>Success</returns>
            <remarks>
            <para>
            The following data is loaded from an ETS keyring file:
            <list type="bullet">
            <item><see cref="P:Knx.Bus.Common.Configuration.KnxIpRoutingConnectorParameters.MulticastAddress"/>: If already set,
            the value is compared to the value in the keyring file and the method returns false on mismatch. If not yet set,
            the value is set to the value in the keyring file</item>
            <item><see cref="P:Knx.Bus.Common.Configuration.KnxIpSecureRoutingConnectorParameters.BackboneKey"/></item>
            </list>
            </para>
            </remarks>
            <example>
              <code lang="cs" title="Backbone key loaded from a keyring file:" source="..\DocumentationSamples\BusSamples.cs" region="Secure Routing key from keyring"/>
            </example>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.KnxIpSecureRoutingConnectorParameters.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Configuration.KnxIpRoutingConnectorParameters"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.KnxIpSecureRoutingConnectorParameters.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data. </param><param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization. </param><exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="P:Knx.Bus.Common.Configuration.KnxIpSecureRoutingConnectorParameters.BackboneKey">
            <summary>
            Gets or sets the key used for en- and decryption of the routing indications.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Configuration.KnxIpSecureRoutingConnectorParameters.LatencyTolerance">
            <summary>
            Gets or sets the latency tolerance in milliseconds.
            </summary>
            <remarks>
            Multicast (group) communication which has a higher latency than this tolerance will be discarded.
            This tolerance should be set to the worst case network latency. 
            The default is 2000 ms.
            </remarks>
        </member>
        <member name="P:Knx.Bus.Common.Configuration.KnxIpSecureRoutingConnectorParameters.SyncLatencyTolerance">
            <summary>
            Sync latency tolerance in milliseconds.
            </summary>
            <remarks>
            Group timers of devices are considered to be in sync (and do not require further synchronization) if their difference is less than this tolerance.
            The sync latency tolerance is given in ms.   
            It should be set so that the latency of at least 90% of all network traffic is below the sync latency tolerance.
            This must be significantly less than the LatencyTolerance.
            The default value is 200 ms which is 10% of the LatencyTolerance.
            </remarks>
        </member>
        <member name="P:Knx.Bus.Common.Configuration.KnxIpSecureRoutingConnectorParameters.ConnectMode">
            <summary>
            Set or get the ConnectMode.
            </summary>
            <remarks>
            This can be used to influence the timing behavior and reliability of Bus.Connect().
            The default (ConnectSynchronized) is suitable for all secure applications and
            should only be overridden in specific situations. See modes in SecureConnectMode.
            </remarks>
        </member>
        <member name="P:Knx.Bus.Common.Configuration.KnxIpSecureRoutingConnectorParameters.InitialGroupTimer">
            <summary>
            Set or get the initial group-timer used by this instance when Bus.Connect() is called.
            </summary>
            <remarks>
            The default is 0 which is suitable for all secure applications. The semantics differ
            depending on the ConnectMode:
            <list type="bullet">
            <item>ConnectMode == ConnectUnsynchronized:<para/>
            In this mode InitialGroupTimer specifies the group-timer used during the initial 
            phase until the normal automatic synchronization with the other devices on the 
            network completed. If the current group-timer is known (through whatever means) 
            by this instance setting ConnectMode to ConnectUnsynchronized and setting 
            InitialGroupTimer to the current group-timer can be used to implement a fast and 
            still secure Bus.Connect() which does not block. This is the primary use-case of 
            the InitialGroupTimer property.
            </item>
            <item>ConnectMode == ConnectSynchronized or ConnectSynchronizedTrustFirstResponse:<para/>
            InitialGroupTimer is usually not set for these modes.
            The InitialGroupTimer value specifies the timestamp sent in the initial 
            TIMER_NOTIFY. If this is lower than the current group-timer value used 
            in the network this value is not relevant (thus it is always fine to use the 
            default of 0).<para/>
            If this is higher than the current group-timer value used in the network this will
            increase the current group-timer value used in the network to the specified value 
            immediately (when the initial TIMER_NOTIFY sent by this instance is received 
            by all other instances). This should generally be avoided as it may result in valid 
            in-flight SECURE_WRAPPER frames to be dropped by this instance and/or other devices.<para/>
            This should only be done in very specific maintenance situations like artificial 
            test scenarios.
            </item>
            </list>
            </remarks>
        </member>
        <member name="T:Knx.Bus.Common.Configuration.KnxIpSecureTunnelingConnectorParameters">
            <summary>
            This class provides parameters used to open a secure KNXnet/IP Tunneling connection.
            </summary>
            <remarks>
            <para>
            <b>Connection string support</b>
            </para>
            <code language="text">
            Type=KnxIpTunneling;Secure=True;(other parameters like for non-secure tunneling connections)
            </code>
            <para>
            By default, security-sensitive information like keys and password hashes are not included in the connection string.
            <para>
            <para>
            If there is an ETS keyring file available, the <see cref="M:Knx.Bus.Common.Configuration.KnxIpSecureTunnelingConnectorParameters.LoadSecurityData(System.String,System.Security.SecureString)"/> method
            can be used to load the security data from there.
            </para>
            <para>
            Alternatively, if security-critical information shall be included in the connection string,
            it has to be encrypted by a password provided by the Falcon client.
            Use the <see cref="M:Knx.Bus.Common.Configuration.ConnectorParameters.ToConnectionString(System.Security.SecureString)"/> and 
             <see cref="M:Knx.Bus.Common.Configuration.ConnectorParameters.FromConnectionString(System.String,System.Security.SecureString)"/> methods in this case.
            </para>
            <para>
            <b>Remark on serialization</b>
            </para>
            </para>
            Also when using the .NET serialization, security-sensitive information like keys and password hashes are not serialized.
            </para>
            <para>
            If there is an ETS keyring file available, the <see cref="M:Knx.Bus.Common.Configuration.KnxIpSecureTunnelingConnectorParameters.LoadSecurityData(System.String,System.Security.SecureString)"/> method
            can be used to load the security data from there.
            </para>
            <para>
            Alternatively, if security-critical information shall be serialized, a password has to be provided by the Falcon client
            to encrypt/decrypt the data via the "additional" parameter of the <see cref="M:System.Runtime.Serialization.StreamingContext.#ctor(System.Runtime.Serialization.StreamingContextStates,System.Object)"/> constructor.
            The object passed here can be one of the following:
            <list type="bullet">
            <item>The password itself as <see cref="T:System.Security.SecureString"/> object.</item>
            <item>An object implementing the interface <see cref="T:Knx.Bus.Common.Configuration.IProvideSecureSerializationPassword"/>; the password will
            ber retrieved by calling <see cref="M:Knx.Bus.Common.Configuration.IProvideSecureSerializationPassword.GetPassword"/>.</item>
            <item>An object implementing the interface <see cref="T:System.IServiceProvider"/>; Falcon will then retrieve the interface
            via GetService(typeof(IProvideSecureSerializationPassword)).</item>
            </list>
            </para>
            <example>
              <code lang="cs" source="..\DocumentationSamples\BusSamples.cs" region="Serialize with security properties"/>
            </example>
            </remarks>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.KnxIpSecureTunnelingConnectorParameters.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Configuration.KnxIpSecureTunnelingConnectorParameters"/> class.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.KnxIpSecureTunnelingConnectorParameters.#ctor(Knx.Bus.Common.KnxIp.DiscoveryResult,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Configuration.KnxIpSecureTunnelingConnectorParameters"/> class.
            </summary>
            <param name="info">The result of a KNX IP Discovery search <see cref="T:Knx.Bus.Common.KnxIp.DiscoveryResult"/>.</param>
            <param name="useNat">if set to <c>true</c> NAT mode is used (UDP only)</param>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.KnxIpSecureTunnelingConnectorParameters.#ctor(System.String,System.UInt16,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Configuration.KnxIpSecureTunnelingConnectorParameters"/> class.
            </summary>
            <param name="address">The IP address of the target device.</param>
            <param name="ipPort">The IP port.</param>
            <param name="useNat">if set to <c>true</c> NAT mode is used (UDP only)</param>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.KnxIpSecureTunnelingConnectorParameters.#ctor(System.String,System.UInt16,Knx.Bus.Common.Configuration.IpProtocol,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Configuration.KnxIpSecureTunnelingConnectorParameters"/> class.
            </summary>
            <param name="address">The IP address of the target device.</param>
            <param name="ipPort">The IP port.</param>
            <param name="protocolType">Protocol type to use</param>
            <param name="useNat">if set to <c>true</c> NAT mode is used (UDP only)</param>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.KnxIpSecureTunnelingConnectorParameters.#ctor(System.String,System.UInt16,Knx.Bus.Common.Configuration.IpProtocol,System.Boolean,Knx.Bus.Common.SerialNumber)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Configuration.KnxIpSecureTunnelingConnectorParameters"/> class.
            </summary>
            <param name="address">The IP address of the target device.</param>
            <param name="ipPort">The IP port.</param>
            <param name="protocolType">Protocol type to use</param>
            <param name="useNat">if set to <c>true</c> NAT mode is used (UDP only)</param>
            <param name="serialNumber">The serial number of the target device. This may be used to find the device again after an IP address change.</param>
        </member>
        <member name="P:Knx.Bus.Common.Configuration.KnxIpSecureTunnelingConnectorParameters.IsSecure">
            <inheritdoc/>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.KnxIpSecureTunnelingConnectorParameters.LoadSecurityData(System.String,System.Security.SecureString)">
            <summary>
            Load the security configuration from a keyring file (*.knxkeys) exported from ETS.
            </summary>
            <param name="fileName">Path of the knxkeys file</param>
            <param name="password">Password for the knxkeys file</param>
            <returns>Success</returns>
            <remarks>
            <para>
            When loading data from an ETS keyring file (which may contain multiple secure tunneling interface entries),
            the correct entry is selected by individual address.
            So <see cref="P:Knx.Bus.Common.Configuration.KnxIpTunnelingConnectorParameters.IndividualAddress"/> must be set before calling 
            this method.
            </para>
            <para>
            The following data is loaded:
            <list type="bullet">
            <item><see cref="P:Knx.Bus.Common.Configuration.KnxIpSecureTunnelingConnectorParameters.UserId"/></item>
            <item><see cref="P:Knx.Bus.Common.Configuration.KnxIpSecureTunnelingConnectorParameters.UserPasswordHash"/></item>
            <item><see cref="P:Knx.Bus.Common.Configuration.KnxIpSecureTunnelingConnectorParameters.DeviceAuthenticationCodeHash"/></item>
            </list>
            </para>
            </remarks>
            <example>
              <code lang="cs" source="..\DocumentationSamples\BusSamples.cs" region="Secure Tunneling data from keyring"/>
            </example>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.KnxIpSecureTunnelingConnectorParameters.LoadSecurityData(System.IO.Stream,System.Security.SecureString)">
            <summary>
            Load the security configuration from a keyring file (*.knxkeys) exported from ETS.
            </summary>
            <param name="stream">The data from the knxkeys file</param>
            <param name="password">Password for the knxkeys file</param>
            <returns>Success</returns>
            <remarks>
            <para>
            When loading data from an ETS keyring file (which may contain multiple secure tunneling interface entries),
            the correct entry is selected by individual address.
            So <see cref="P:Knx.Bus.Common.Configuration.KnxIpTunnelingConnectorParameters.IndividualAddress"/> must be set before calling 
            this method.
            </para>
            <para>
            The following data is loaded:
            <list type="bullet">
            <item><see cref="P:Knx.Bus.Common.Configuration.KnxIpSecureTunnelingConnectorParameters.UserId"/></item>
            <item><see cref="P:Knx.Bus.Common.Configuration.KnxIpSecureTunnelingConnectorParameters.UserPasswordHash"/></item>
            <item><see cref="P:Knx.Bus.Common.Configuration.KnxIpSecureTunnelingConnectorParameters.DeviceAuthenticationCodeHash"/></item>
            </list>
            </para>
            </remarks>
            <example>
              <code lang="cs" source="..\DocumentationSamples\BusSamples.cs" region="Secure Tunneling data from keyring"/>
            </example>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.KnxIpSecureTunnelingConnectorParameters.LoadSecurityData(System.IO.Stream,System.Security.SecureString,System.Boolean)">
            <summary>
            Load the security configuration from a keyring file (*.knxkeys) exported from ETS.
            </summary>
            <param name="stream">The data from the knxkeys file</param>
            <param name="password">Password for the knxkeys file</param>
            <param name="doNotValidateSignature">If <c>true</c>, the file signature is not validated. 
            Use this only for test purposes because a manipulated knxkeys file may present a security risk.</param>
            <returns>Success</returns>
            <remarks>
            <para>
            When loading data from an ETS keyring file (which may contain multiple secure tunneling interface entries),
            the correct entry is selected by individual address.
            So <see cref="P:Knx.Bus.Common.Configuration.KnxIpTunnelingConnectorParameters.IndividualAddress"/> must be set before calling 
            this method.
            </para>
            <para>
            The following data is loaded:
            <list type="bullet">
            <item><see cref="P:Knx.Bus.Common.Configuration.KnxIpSecureTunnelingConnectorParameters.UserId"/></item>
            <item><see cref="P:Knx.Bus.Common.Configuration.KnxIpSecureTunnelingConnectorParameters.UserPasswordHash"/></item>
            <item><see cref="P:Knx.Bus.Common.Configuration.KnxIpSecureTunnelingConnectorParameters.DeviceAuthenticationCodeHash"/></item>
            </list>
            </para>
            </remarks>
            <example>
              <code lang="cs" source="..\DocumentationSamples\BusSamples.cs" region="Secure Tunneling data from keyring"/>
            </example>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.KnxIpSecureTunnelingConnectorParameters.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Configuration.KnxIpTunnelingConnectorParameters"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.KnxIpSecureTunnelingConnectorParameters.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data. </param><param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization. </param><exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="P:Knx.Bus.Common.Configuration.KnxIpSecureTunnelingConnectorParameters.UserId">
            <summary>
            Gets or sets the User id for authentication to the server (together with UserPasswordHash).
            </summary>
            <remarks>
            <list type="bullet">
            <item>0x01: Management level access.</item>
            <item>0x02..0x7f: User level access.</item>
            <item>0x00 and 0x80..0xff: Reserved.</item>
            </list>
            Default is 1 (management level access).
            </remarks>
        </member>
        <member name="P:Knx.Bus.Common.Configuration.KnxIpSecureTunnelingConnectorParameters.UserPasswordHash">
            <summary>
            Password hash for authentication to the server (together with UserId).
            </summary>
            <remarks>
            The password hash is UserId specific.
            The default password hash is the hash of the empty string (e9c304b914a35175fd7d1c673ab52fe1).
            Use <see cref="M:Knx.Bus.Common.Configuration.KnxIpSecureTunnelingConnectorParameters.GetUserPasswordHash(System.Security.SecureString)" /> to generate the user password hash for a given password.
            </remarks>
        </member>
        <member name="P:Knx.Bus.Common.Configuration.KnxIpSecureTunnelingConnectorParameters.Password">
            <summary>
            Password for authentication to the server (for ETS use only!).
            </summary>
            <remarks>
            See UserPasswordHash.
            Setting this will set the UserPasswordHash.
            Reading this will return the last set password.
            </remarks>
        </member>
        <member name="P:Knx.Bus.Common.Configuration.KnxIpSecureTunnelingConnectorParameters.DeviceAuthenticationCodeHash">
            <summary>
            Device authentication code hash.
            </summary>
            <remarks>
            This is used to optionally check the authenticity of the device.
            This must be either set to byte[16] or null:
            byte[16]: DeviceAuthenticationCodeHash is verified against the device authentication code hash sent by the device. An error is caused if they do not match.
            null: The device authentication code hash sent by the device is ignored. The user ultimately trusts that Falcon is talking to the correct device.
            Default is null.
            Use <see cref="M:Knx.Bus.Common.Configuration.KnxIpSecureTunnelingConnectorParameters.GetDeviceAuthenticationCodeHash(System.Security.SecureString)" /> to generate the hash for a password.
            </remarks>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.KnxIpSecureTunnelingConnectorParameters.GetUserPasswordHash(System.Security.SecureString)">
            <summary>
            Convert a textual user password into a hash suitable for UserPasswordHash.
            </summary>
            <param name="password">Textual password to be hashed.</param>
            <returns>Hash of password.</returns>
            <remarks>
            The hash is calculated using this algorithm:
            PBKDF2(hmac=HMAC-SHA256, password, salt = "user-password.1.secure.ip.knx.org", iterations = 65536, derived_key_length_in_bytes = 16)
            </remarks>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.KnxIpSecureTunnelingConnectorParameters.GetDeviceAuthenticationCodeHash(System.Security.SecureString)">
            <summary>
            Convert a textual device authentication code password into a hash suitable for DeviceAuthenticationCodeHash.
            </summary>
            <param name="password">Textual password to be hashed.</param>
            <returns>Hash of password.</returns>
            <remarks>
            The hash is calculated using this algorithm:
            PBKDF2(hmac=HMAC-SHA256, password, salt = "device-authentication-code.1.secure.ip.knx.org", iterations = 65536, derived_key_length_in_bytes = 16)
            </remarks>
        </member>
        <member name="F:Knx.Bus.Common.Configuration.KnxIpSecureTunnelingConnectorParameters.DefaultUserPasswordHash">
            <summary>
            Password hash of default user password, the empty password.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.KnxIpSecureTunnelingConnectorParameters.InternalEquals(Knx.Bus.Common.Configuration.ConnectorParameters)">
            <summary>
            Indicates whether the current KnxIpSecureTunnelingConnectorParameter is equal to another object of the same type.
            </summary>
            <param name="other">ConnectorParameter to compare with this object.</param>
            <returns>
            true if the current object is equal to the other parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.KnxIpSecureTunnelingConnectorParameters.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.KnxIpSecureTunnelingConnectorParameters.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:Knx.Bus.Common.Configuration.KnxIpTunnelingConnectorParameters">
            <summary>
            This class provides parameters used to open a KNXnet/IP Tunneling connection.
            </summary>
            <remarks>
            <para>
            <b>Connection string support</b>
            </para>
            <para>
            <code language="text">
            Type=KnxIpTunneling;HostAddress=<i>ipaddr</i>;IpPort=<i>port</i>;ProtocolType=<i>protocol</i>;UseNAT=True
            </code>
            With Tunneling v2, a specific tunneling slot can be requested:
            <code language="text">
            Type=KnxIpTunneling;...;IndividualAddress=<i>indaddr</i>
            </code>
            If the default value of a property shall be used, the corresponding part of the connection string can be omitted.
            </para>
            </remarks>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.KnxIpTunnelingConnectorParameters.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Configuration.KnxIpTunnelingConnectorParameters"/> class.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.KnxIpTunnelingConnectorParameters.#ctor(Knx.Bus.Common.KnxIp.DiscoveryResult,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Configuration.KnxIpTunnelingConnectorParameters"/> class.
            </summary>
            <param name="info">The result of a KNX IP Discovery search <see cref="T:Knx.Bus.Common.KnxIp.DiscoveryResult"/>.</param>
            <param name="useNat">if set to <c>true</c> NAT mode is used (UDP only)</param>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.KnxIpTunnelingConnectorParameters.#ctor(System.String,System.UInt16,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Configuration.KnxIpTunnelingConnectorParameters"/> class.
            </summary>
            <param name="address">The IP address of the target device.</param>
            <param name="ipPort">The IP port.</param>
            <param name="useNat">if set to <c>true</c> NAT mode is used (UDP only)</param>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.KnxIpTunnelingConnectorParameters.#ctor(System.String,System.UInt16,Knx.Bus.Common.Configuration.IpProtocol,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Configuration.KnxIpTunnelingConnectorParameters"/> class.
            </summary>
            <param name="address">The IP address of the target device.</param>
            <param name="ipPort">The IP port.</param>
            <param name="protocolType">Protocol type to use</param>
            <param name="useNat">if set to <c>true</c> NAT mode is used (UDP only)</param>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.KnxIpTunnelingConnectorParameters.#ctor(System.String,System.UInt16,Knx.Bus.Common.Configuration.IpProtocol,System.Boolean,Knx.Bus.Common.SerialNumber)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Configuration.KnxIpTunnelingConnectorParameters"/> class.
            </summary>
            <param name="address">The IP address of the target device.</param>
            <param name="ipPort">The IP port.</param>
            <param name="protocolType">Protocol type to use</param>
            <param name="useNat">if set to <c>true</c> NAT mode is used (UDP only)</param>
            <param name="serialNumber">The serial number of the target device. This may be used to find the device again after an IP address change.</param>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.KnxIpTunnelingConnectorParameters.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Configuration.KnxIpTunnelingConnectorParameters"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="P:Knx.Bus.Common.Configuration.KnxIpTunnelingConnectorParameters.IndividualAddress">
            <summary>
            Get or sets individual address to be requested to be used for tunneling on the field medium (tunneling v2).
            </summary>
            <remarks>
            If this is given and the tunneling server does not support tunneling v2, opening the connection will fail.
            If the tunneling server supports tunneling v2 but the given address is not available:
            <list>
            <item>If the error code from the tunneling server is E_NO_TUNNELING_ADDRESS or E_CONNECTION_IN_USE and <see cref="P:Knx.Bus.Common.Configuration.KnxIpTunnelingConnectorParameters.FallbackToAnyIndividualAddress"/> is true,
            the connect is retried accepting any individual address (basic CRI).</item>
            <item>Otherwise, opening the connection will fail.</item>
            </list>
            </remarks>
        </member>
        <member name="P:Knx.Bus.Common.Configuration.KnxIpTunnelingConnectorParameters.FallbackToAnyIndividualAddress">
            <summary>
            Determines the behaviour if the connection with the address given in <see cref="P:Knx.Bus.Common.Configuration.KnxIpTunnelingConnectorParameters.IndividualAddress"/> is not available.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.KnxIpTunnelingConnectorParameters.InternalEquals(Knx.Bus.Common.Configuration.ConnectorParameters)">
            <summary>
            Indicates whether the current KnxIpTunnelingConnectorParameter is equal to another object of the same type.
            </summary>
            <param name="other">ConnectorParameter to compare with this object.</param>
            <returns>
            true if the current object is equal to the other parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.KnxIpTunnelingConnectorParameters.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.KnxIpTunnelingConnectorParameters.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="P:Knx.Bus.Common.Configuration.KnxIpTunnelingConnectorParameters.Type">
            <summary>
            Always returns <see cref="F:Knx.Bus.Common.ConnectorTypes.KnxIpTunneling"/>, as this is the KNX/IP Tunneling specific parameter class.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.KnxIpUnicastSecurityParameters.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Configuration.KnxIpSecureDeviceManagementConnectorParameters"/> class.
            </summary>
            <param name="info">The info.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.KnxIpUnicastSecurityParameters.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data. </param><param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization. </param><exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="P:Knx.Bus.Common.Configuration.KnxIpUnicastSecurityParameters.InternalUserId">
            <summary>
            User id for authentication to the server (together with UserPasswordHash).
            0x01: Management level access.
            0x02..0x7f: User level access.
            0x00 and 0x80..0xff: Reserved.
            Default is 1 (management level access).
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Configuration.KnxIpUnicastSecurityParameters.InternalUserPasswordHash">
            <summary>
            Password hash for authentication to the server (together with UserId).
            The password hash is UserId specific.
            The default password hash is the hash of the empty string (e9c304b914a35175fd7d1c673ab52fe1).
            Use GetUserPasswordHash() to generate the user password hash for a given password.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Configuration.KnxIpUnicastSecurityParameters.InternalPassword">
            <summary>
            Password for authentication to the server (for ETS use only!).
            See InternalUserPasswordHash.
            Setting this will set the UserPasswordHash.
            Reading this will return the last set password.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Configuration.KnxIpUnicastSecurityParameters.InternalDeviceAuthenticationCodeHash">
            <summary>
            Device authentication code hash.
            This is used to optionally check the authenticity of the device.
            This must be either set to byte[16] or null:
            byte[16]: DeviceAuthenticationCodeHash is verified against the device authentication code hash sent by the device. An error is caused if they do not match.
            null: The device authentication code hash sent by the device is ignored. The user ultimately trusts that Falcon is talking to the correct device.
            Default is null.
            Use GetDeviceAuthenticationCodeHash() to generate the hash for a password.
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Configuration.KnxUsbDeviceInfo">
            <summary>
            Contains the information about a KNX USB HID device.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.KnxUsbDeviceInfo.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="F:Knx.Bus.Common.Configuration.KnxUsbDeviceInfo.VendorId">
            <summary>
            The USB vendor ID.
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.Configuration.KnxUsbDeviceInfo.ProductId">
            <summary>
            The USB product ID.
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.Configuration.KnxUsbDeviceInfo.ManufacturerId">
            <summary>
            The KNX Manufacturer ID read from knx_interfaces.xml.
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.Configuration.KnxUsbDeviceInfo.DevicePath">
            <summary>
            The HID device path of the OS.
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.Configuration.KnxUsbDeviceInfo.DisplayName">
            <summary>
            The display name provided by the manufacturer, looked up from knx_interfaces.xml.
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.Configuration.KnxUsbDeviceInfo.NotPersistsIndividualAddress">
            <summary>
            Flag indicating if this device supports the persistence of the individual address. If not, Falcon
            persists and restores the address each time the device is being opened.
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.Configuration.KnxUsbDeviceInfo.Index">
            <summary>
            The 0-based index of the USB devices attached.
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.Configuration.KnxUsbDeviceInfo.DeviceId">
            <summary>
            The HID device instance ID as reported by the operating system.
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.Configuration.KnxUsbDeviceInfo.Revision">
            <summary>
            The USB device revision.
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.Configuration.KnxUsbDeviceInfo.SerialNumber">
            <summary>
            The USB serial number read from the device.
            </summary>
            <remarks><b>Note:</b> Not all devices return a human readable serial number.</remarks>
        </member>
        <member name="F:Knx.Bus.Common.Configuration.KnxUsbDeviceInfo.ProductString">
            <summary>
            The USB product information read from the device.
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.Configuration.KnxUsbDeviceInfo.Manufacturer">
            <summary>
            The USB manufacturer name read from the device.
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Configuration.UsbConnectorParameters">
            <summary>
            This class provides parameters used to open an USB connection.
            </summary>
            <remarks>
            The parameters are used in the following way to determine which USB connection shall be opened:
            <list type="bullet">
            <item>
            If <see cref="P:Knx.Bus.Common.Configuration.UsbConnectorParameters.DevicePath"/> is set, it is first tried to open the USB interface with this USB device path.
            If this fails, the algorithm continues with the next step.
            </item>
            <item>
            If <see cref="P:Knx.Bus.Common.Configuration.UsbConnectorParameters.PreferredAddressToOpen"/> is set, the connected USB interface with this individual address is opened.
            If no or multiple USB interfaces with this individual address are found, opening fails.
            </item>
            <item>
            If <see cref="P:Knx.Bus.Common.Configuration.UsbConnectorParameters.DeviceIndex"/> is set, it is used as index into the list of all connected USB interfaces.
            </item>
            </list>
            <para>
            <b>Connection string support</b>
            </para>
            <para>
            <code language="text">
            Type=USB;DevicePath=<i>usbpath</i>
            </code>
            <code language="text">
            Type=USB;PreferredAddressToOpen=<i>indaddr</i>
            </code>
            <code language="text">
            Type=USB;DeviceIndex=<i>number</i>
            </code>
            If the default value of a property shall be used, the corresponding part of the connection string can be omitted.
            </para>
            </remarks>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.UsbConnectorParameters.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Configuration.UsbConnectorParameters"/> class.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.UsbConnectorParameters.#ctor(Knx.Bus.Common.Configuration.KnxUsbDeviceInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Configuration.UsbConnectorParameters"/> class.
            </summary>
            <param name="info">The <see cref="T:Knx.Bus.Common.Configuration.KnxUsbDeviceInfo"/>.</param>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.UsbConnectorParameters.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Configuration.UsbConnectorParameters"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/>.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/>.</param>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.UsbConnectorParameters.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data. </param><param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization. </param><exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="P:Knx.Bus.Common.Configuration.UsbConnectorParameters.HidPath">
             <summary>
             Gets the <see cref="P:Knx.Bus.Common.Configuration.UsbConnectorParameters.HidPath"/>.
             </summary>
            <value>The <see cref="P:Knx.Bus.Common.Configuration.UsbConnectorParameters.HidPath"/>.</value>   
        </member>
        <member name="P:Knx.Bus.Common.Configuration.UsbConnectorParameters.PreferredAddressToOpen">
            <summary>
            The preferred Individual Address to open. May be null.
            </summary>
            <value>The <see cref="T:Knx.Bus.Common.IndividualAddress"/> of the USB interface to open.</value>   
        </member>
        <member name="P:Knx.Bus.Common.Configuration.UsbConnectorParameters.DeviceIndex">
            <summary>
            The device index (0-based) to open. May be null.
            </summary>
            <value>The device index.</value>    
        </member>
        <member name="P:Knx.Bus.Common.Configuration.UsbConnectorParameters.DevicePath">
             <summary>
             The device (HID) path to open. May be null.
             </summary>
            <value>The device path.</value>   
        </member>
        <member name="P:Knx.Bus.Common.Configuration.UsbConnectorParameters.KnxManufacturerId">
            <summary>
            The KNX Manufacturer Id read from knx_interfaces.xml. May be null.
            </summary>
            <remarks>
            This is only for display and is not used when opening the connection.
            </remarks>
            <value>The KNX manufacturer ID.</value>   
        </member>
        <member name="P:Knx.Bus.Common.Configuration.UsbConnectorParameters.Type">
             <summary>
             Always returns <see cref="F:Knx.Bus.Common.ConnectorTypes.USB"/>, as this is the USB specific parameter class.
             </summary>
            <value>The <see cref="T:Knx.Bus.Common.ConnectorTypes"/>.</value>    
        </member>
        <member name="P:Knx.Bus.Common.Configuration.UsbConnectorParameters.DeviceId">
            <summary>
            Gets or sets the USB device id.
            </summary>
            <value>
            The device id.
            </value>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.UsbConnectorParameters.InternalEquals(Knx.Bus.Common.Configuration.ConnectorParameters)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <param name="other">The other.</param>
            <returns></returns>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.UsbConnectorParameters.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.UsbConnectorParameters.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.UsbConnectorParameters.FromIndex(System.Int32)">
            <summary>
            Creates a parameter configuration instance which opens the device at the index provided.
            </summary>
            <param name="deviceIndex">Zero-based index of the USB device to open.</param>
            <returns>The parameter configuration which can be used to open a bus connection.</returns>
        </member>
        <member name="M:Knx.Bus.Common.Configuration.UsbConnectorParameters.FromAddress(Knx.Bus.Common.IndividualAddress)">
            <summary>
            Creates a parameter configuration instance which opens the device with the specified individual address.
            </summary>
            <param name="individualAddress">The individual address of the USB device to open.</param>
            <returns>The parameter configuration which can be used to open a bus connection.</returns>
        </member>
        <member name="T:Knx.Bus.Common.ConfirmedRestartEraseCodes">
            <summary>
            Represents the confirmed restart erase codes
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.ConfirmedRestartEraseCodes.ConfirmedRestart">
            <summary>
            Represents a confirmed restart. 
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.ConfirmedRestartEraseCodes.FactoryReset">
            <summary>
            Represents a factory reset.
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.ConfirmedRestartEraseCodes.ResetIA">
            <summary>
            Represents the reset of the individual address.
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.ConfirmedRestartEraseCodes.ResetAP">
            <summary>
            Represents the reset of the application program.
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.ConfirmedRestartEraseCodes.ResetParam">
            <summary>
            Represents the reset of the parameter.
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.ConfirmedRestartEraseCodes.ResetLinks">
            <summary>
            Represents the reset of the links.
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.ConfirmedRestartEraseCodes.FactoryResetWithoutIA">
            <summary>
            Represents a factory reset, but without individual address.
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.ConfirmedRestartEraseCodes.ResetPersistentData">
            <summary>
            Represents a reset of persistently stored application data.
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.ConfirmedRestartErrorCodes">
            <summary>
            Represents the confirmed restart error codes
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.ConfirmedRestartErrorCodes.NoError">
            <summary>
            No error occurs. 
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.ConfirmedRestartErrorCodes.AccessDenied">
            <summary>
            The access is denied. 
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.ConfirmedRestartErrorCodes.UnsupportedEraseCode">
            <summary>
            This erase code is not supported.
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.ConfirmedRestartErrorCodes.InvalidChannelNumber">
            <summary>
            This channel number is not valid.
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.ConnectionModes">
            <summary>
            Enumeration with all possible modes to connect to a device.
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.ConnectionModes.Local">
            <summary>
            Connect directly via the local interface (cEMI or EMI1).
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.ConnectionModes.RemoteConnectionOriented">
            <summary>
            Connect to the remote device by using a transport layer connection.
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.ConnectionModes.RemoteConnectionless">
            <summary>
            Connect to the remote device by using a connection-less connection.
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.ConnectorMode">
            <summary>
            Modes to open a connection.
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.ConnectorMode.LinkLayer">
            <summary>
            Connection is opened in link layer mode.
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.ConnectorMode.Busmonitor">
            <summary>
            Connection is opened in Busmonitor mode.
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.ConnectorMode.Raw">
            <summary>
            Connection is opened in the Raw mode.
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.ConnectorMode.Local">
            <summary>
            Connection is opened in the local TL mode if cEMI or local direct with PCGetValue/PCSetValue if EMI1.
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.ConnectorTypes">
            <summary>
            This class represents the connector types 
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.ConnectorTypes.Unknown">
            <summary>
            The default connector type.
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.ConnectorTypes.USB">
            <summary>
            This connector type is used to open USB bus access. 
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.ConnectorTypes.KnxIpTunneling">
            <summary>
            This connector type is used to open a KNX/IP Tunneling connection.
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.ConnectorTypes.KnxIpRouting">
            <summary>
            This connector type is used to open a KNX/IP Routing connection. 
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.ConnectorTypes.KnxIpcEmiTl">
            <summary>
            This connector type is used to open a KNX/IP Local Transport Layer connection.    
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.ConnectorTypes.Eiblib">
            <summary>
            This connector type is used to open a Eiblib/IP connection.    
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.ConnectorTypes.Custom">
            <summary>
            This connector type is used to open a custom connection.    
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Curve25519">
             <summary>
             Curve25519 implementation.
            
             - C# port of C module curve25519-donna.c https://code.google.com/p/curve25519-donna/ by Adam Langley &lt;agl@imperialviolet.org&gt;
             
             - Curve25519 webpage: http://cr.yp.to/ecdh.html
             
             - Curve25519 paper from D. J. Bernstein:
               [curve25519] 22pp. (PDF) D. J. Bernstein. Curve25519: new Diffie-Hellman speed records. Proceedings of PKC 2006, to appear. Document ID: 4230efdfa673480fc079449d90f322c0. URL: http://cr.yp.to/papers.html#curve25519. Date: 2006.02.09. Supersedes: (PDF) 2005.11.15.    
             </summary>
        </member>
        <member name="M:Knx.Bus.Common.Curve25519.copy10(System.Int64[],System.Int64[])">
            <summary>
            Copy first 10 elements from input to output.
            (Avoids Linq expression 'input.Take(10).ToArray().CopyTo(output, 0);' which is neither clear nor fast.)
            </summary>
            <param name="output">Output array. Length must be >= 10.</param>
            <param name="input">Input array. Length must be >= 10.</param>
        </member>
        <member name="M:Knx.Bus.Common.Curve25519.curve25519(System.Byte[],System.Byte[])">
            <summary>
            Curve25519 function.
            
            Usage:
            
            Generate public key from private key:
              basepoint = 9;
              publicKey = Curve25519(privateKey, basepoint);
              
            Generate shared secret from our privateKey and anotherPublicKey:
              sharedSecret = Curve25519(privateKey, anotherPublicKey);
            </summary>
            <param name="privateKey">private key, 32 bytes, little endian</param>
            <param name="basepoint">basepoint or otherPublicKey, 32 bytes, little endian</param>
            <returns>publicKey or sharedSecret, 32 bytes, little endian</returns>
        </member>
        <member name="T:Knx.Bus.Common.DatapointTypes.CompoundValue">
            <summary>
            Generic representation of a compound datapoint value; used by <see cref="T:Knx.Bus.Common.DatapointTypes.DptCompoundGeneric"/>.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.DatapointTypes.CompoundValue.Item(System.Int32)">
            <summary>
            Gets or sets a field value by its index
            </summary>
            <param name="index">0-based index</param>
            <returns></returns>
        </member>
        <member name="P:Knx.Bus.Common.DatapointTypes.CompoundValue.Item(System.String)">
            <summary>
            Gets or sets a field value by its name
            </summary>
            <param name="name">field name</param>
            <returns></returns>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.CompoundValue.Add(System.String,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.CompoundValue.ContainsKey(System.String)">
            <inheritdoc/>
        </member>
        <member name="P:Knx.Bus.Common.DatapointTypes.CompoundValue.Keys">
            <inheritdoc/>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.CompoundValue.Remove(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.CompoundValue.TryGetValue(System.String,System.Object@)">
            <inheritdoc/>
        </member>
        <member name="P:Knx.Bus.Common.DatapointTypes.CompoundValue.Values">
            <inheritdoc/>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.CompoundValue.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <inheritdoc/>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.CompoundValue.Clear">
            <inheritdoc/>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.CompoundValue.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <inheritdoc/>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.CompoundValue.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:Knx.Bus.Common.DatapointTypes.CompoundValue.Count">
            <inheritdoc/>
        </member>
        <member name="P:Knx.Bus.Common.DatapointTypes.CompoundValue.IsReadOnly">
            <inheritdoc/>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.CompoundValue.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <inheritdoc/>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.CompoundValue.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.CompoundValue.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:Knx.Bus.Common.DatapointTypes.Dpt1">
            <summary>
            This class is responsible for encoding and decoding 1-bit boolean (DPT 1.xxx) datapoint types.
            The raw value is translated to and from <see cref="T:System.Boolean"/>.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt1.#ctor(Knx.Bus.Common.MasterData.DatapointSubtype)">
            <summary>
            Initialize a new object of class <see cref="T:Knx.Bus.Common.DatapointTypes.Dpt1"/> with a specific datapoint subtype.
            </summary>
            <param name="subtype">The datapoint subtype</param>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt1.#ctor">
            <summary>
            Initialize a new object of class <see cref="T:Knx.Bus.Common.DatapointTypes.Dpt1"/>.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt1.ToTypedValue(Knx.Bus.Common.GroupValues.GroupValue)">
            <inheritdoc/>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt1.ToGroupValue(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:Knx.Bus.Common.DatapointTypes.Dpt10">
            <summary>
            This class is responsible for encoding and decoding 3-octet Time (DPT 10.xxx) datapoint types.
            The raw value is translated to and from <see cref="T:Knx.Bus.Common.DatapointTypes.KnxTime"/>.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt10.#ctor(Knx.Bus.Common.MasterData.DatapointSubtype)">
            <summary>
            Initialize a new object of class <see cref="T:Knx.Bus.Common.DatapointTypes.Dpt10"/> with a specific datapoint subtype.
            </summary>
            <param name="subtype">The datapoint subtype</param>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt10.#ctor">
            <summary>
            Initialize a new object of class <see cref="T:Knx.Bus.Common.DatapointTypes.Dpt10"/>.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt10.ToTypedValue(Knx.Bus.Common.GroupValues.GroupValue)">
            <inheritdoc/>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt10.ToGroupValue(Knx.Bus.Common.DatapointTypes.KnxTime)">
            <inheritdoc/>
        </member>
        <member name="T:Knx.Bus.Common.DatapointTypes.Dpt11">
            <summary>
            This class is responsible for encoding and decoding 3-octet Date (DPT 11.xxx) datapoint types.
            The raw value is translated to and from <see cref="T:System.DateTime"/>.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt11.#ctor(Knx.Bus.Common.MasterData.DatapointSubtype)">
            <summary>
            Initialize a new object of class <see cref="T:Knx.Bus.Common.DatapointTypes.Dpt11"/> with a specific datapoint subtype.
            </summary>
            <param name="subtype">The datapoint subtype</param>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt11.#ctor">
            <summary>
            Initialize a new object of class <see cref="T:Knx.Bus.Common.DatapointTypes.Dpt11"/>.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt11.ToTypedValue(Knx.Bus.Common.GroupValues.GroupValue)">
            <inheritdoc/>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt11.ToGroupValue(System.DateTime)">
            <inheritdoc/>
        </member>
        <member name="T:Knx.Bus.Common.DatapointTypes.Dpt12">
            <summary>
            This class is responsible for encoding and decoding 4-octet Unsigned Integer (DPT 12.xxx) datapoint types.
            The raw value is translated to and from <see cref="T:System.UInt32"/>.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt12.#ctor(Knx.Bus.Common.MasterData.DatapointSubtype)">
            <summary>
            Initialize a new object of class <see cref="T:Knx.Bus.Common.DatapointTypes.Dpt12"/> with a specific datapoint subtype.
            </summary>
            <param name="subtype">The datapoint subtype</param>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt12.#ctor">
            <summary>
            Initialize a new object of class <see cref="T:Knx.Bus.Common.DatapointTypes.Dpt12"/>.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt12.ToTypedValue(Knx.Bus.Common.GroupValues.GroupValue)">
            <inheritdoc/>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt12.ToGroupValue(System.UInt32)">
            <inheritdoc/>
        </member>
        <member name="T:Knx.Bus.Common.DatapointTypes.Dpt13">
            <summary>
            This class is responsible for encoding and decoding 4-octet Signed Integer (DPT 13.xxx) datapoint types.
            The raw value is translated to and from <see cref="T:System.Int32"/>.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt13.#ctor(Knx.Bus.Common.MasterData.DatapointSubtype)">
            <summary>
            Initialize a new object of class <see cref="T:Knx.Bus.Common.DatapointTypes.Dpt13"/> with a specific datapoint subtype.
            </summary>
            <param name="subtype">The datapoint subtype</param>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt13.#ctor">
            <summary>
            Initialize a new object of class <see cref="T:Knx.Bus.Common.DatapointTypes.Dpt13"/>.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt13.ToTypedValue(Knx.Bus.Common.GroupValues.GroupValue)">
            <inheritdoc/>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt13.ToGroupValue(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:Knx.Bus.Common.DatapointTypes.Dpt14">
            <summary>
            This class is responsible for encoding and decoding 4-octet Float (DPT 14.xxx) datapoint types.
            The raw value is translated to and from <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt14.#ctor(Knx.Bus.Common.MasterData.DatapointSubtype)">
            <summary>
            Initialize a new object of class <see cref="T:Knx.Bus.Common.DatapointTypes.Dpt14"/> with a specific datapoint subtype.
            </summary>
            <param name="subtype">The datapoint subtype</param>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt14.#ctor">
            <summary>
            Initialize a new object of class <see cref="T:Knx.Bus.Common.DatapointTypes.Dpt14"/>.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt14.ToTypedValue(Knx.Bus.Common.GroupValues.GroupValue)">
            <inheritdoc/>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt14.ToGroupValue(System.Single)">
            <inheritdoc/>
        </member>
        <member name="T:Knx.Bus.Common.DatapointTypes.Dpt16">
            <summary>
            This class is responsible for encoding and decoding 14-octet String (DPT 16.xxx) datapoint types.
            The raw value is translated to and from <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt16.#ctor(Knx.Bus.Common.MasterData.DatapointSubtype)">
            <summary>
            Initialize a new object of class <see cref="T:Knx.Bus.Common.DatapointTypes.Dpt16"/> with a specific datapoint subtype.
            </summary>
            <param name="subtype">The datapoint subtype</param>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt16.#ctor(System.Text.Encoding)">
            <summary>
            Initialize a new object of class <see cref="T:Knx.Bus.Common.DatapointTypes.Dpt16"/>.
            </summary>
            <param name="encoding">The character encoding</param>
        </member>
        <member name="P:Knx.Bus.Common.DatapointTypes.Dpt16.Encoding">
            <summary>
            Gets the encoding
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt16.ToTypedValue(Knx.Bus.Common.GroupValues.GroupValue)">
            <inheritdoc/>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt16.ToGroupValue(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Knx.Bus.Common.DatapointTypes.Dpt17">
            <summary>
            This class is responsible for encoding and decoding Scene Number (DPT 17.xxx) datapoint types.
            The raw value is translated to and from <see cref="T:System.Byte"/>.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt17.#ctor(Knx.Bus.Common.MasterData.DatapointSubtype)">
            <summary>
            Initialize a new object of class <see cref="T:Knx.Bus.Common.DatapointTypes.Dpt17"/> with a specific datapoint subtype.
            </summary>
            <param name="subtype">The datapoint subtype</param>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt17.#ctor">
            <summary>
            Initialize a new object of class <see cref="T:Knx.Bus.Common.DatapointTypes.Dpt17"/>.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt17.ToTypedValue(Knx.Bus.Common.GroupValues.GroupValue)">
            <inheritdoc/>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt17.ToGroupValue(System.Byte)">
            <inheritdoc/>
        </member>
        <member name="T:Knx.Bus.Common.DatapointTypes.Dpt18">
            <summary>
            This class is responsible for encoding and decoding Scene Control (DPT 18.xxx) datapoint types.
            The raw value is translated to and from <see cref="T:Knx.Bus.Common.DatapointTypes.KnxSceneControl"/>.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt18.#ctor(Knx.Bus.Common.MasterData.DatapointSubtype)">
            <summary>
            Initialize a new object of class <see cref="T:Knx.Bus.Common.DatapointTypes.Dpt18"/> with a specific datapoint subtype.
            </summary>
            <param name="subtype">The datapoint subtype</param>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt18.#ctor">
            <summary>
            Initialize a new object of class <see cref="T:Knx.Bus.Common.DatapointTypes.Dpt18"/>.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt18.ToTypedValue(Knx.Bus.Common.GroupValues.GroupValue)">
            <inheritdoc/>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt18.ToGroupValue(Knx.Bus.Common.DatapointTypes.KnxSceneControl)">
            <inheritdoc/>
        </member>
        <member name="T:Knx.Bus.Common.DatapointTypes.Dpt19">
            <summary>
            This class is responsible for encoding and decoding 8-octet Date/Time (DPT 19.xxx) datapoint types.
            The raw value is translated to and from <see cref="T:Knx.Bus.Common.DatapointTypes.KnxDateTime"/>.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt19.#ctor(Knx.Bus.Common.MasterData.DatapointSubtype)">
            <summary>
            Initialize a new object of class <see cref="T:Knx.Bus.Common.DatapointTypes.Dpt19"/> with a specific datapoint subtype.
            </summary>
            <param name="subtype">The datapoint subtype</param>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt19.#ctor">
            <summary>
            Initialize a new object of class <see cref="T:Knx.Bus.Common.DatapointTypes.Dpt19"/>.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt19.ToTypedValue(Knx.Bus.Common.GroupValues.GroupValue)">
            <inheritdoc/>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt19.ToGroupValue(Knx.Bus.Common.DatapointTypes.KnxDateTime)">
            <inheritdoc/>
        </member>
        <member name="T:Knx.Bus.Common.DatapointTypes.Dpt2">
            <summary>
            This class is responsible for encoding and decoding 2 bit control (DPT 2.xxx) datapoint types.
            The raw value is translated to and from Nullable&lt;<see cref="T:System.Boolean"/>&gt;.
            </summary>
            <remarks>
            The two "no control" raw values 0 and 1 are mapped to null, 
            and the two "control" raw values 2 and 3 are mapped to false and true, respectively.
            </remarks>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt2.#ctor(Knx.Bus.Common.MasterData.DatapointSubtype)">
            <summary>
            Initialize a new object of class <see cref="T:Knx.Bus.Common.DatapointTypes.Dpt2"/> with a specific datapoint subtype.
            </summary>
            <param name="subtype">The datapoint subtype</param>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt2.#ctor">
            <summary>
            Initialize a new object of class <see cref="T:Knx.Bus.Common.DatapointTypes.Dpt2"/>.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt2.ToTypedValue(Knx.Bus.Common.GroupValues.GroupValue)">
            <inheritdoc/>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt2.ToGroupValue(System.Nullable{System.Boolean})">
            <inheritdoc/>
        </member>
        <member name="T:Knx.Bus.Common.DatapointTypes.Dpt20">
            <summary>
            This class is responsible for encoding and decoding 1-octet enum (DPT 20.xxx) datapoint types.
            The raw value is translated to and from <see cref="T:System.Byte"/>.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt20.#ctor(Knx.Bus.Common.MasterData.DatapointSubtype)">
            <summary>
            Initialize a new object of class <see cref="T:Knx.Bus.Common.DatapointTypes.Dpt20"/> with a specific datapoint subtype.
            </summary>
            <param name="subtype">The datapoint subtype</param>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt20.#ctor">
            <summary>
            Initialize a new object of class <see cref="T:Knx.Bus.Common.DatapointTypes.Dpt20"/>.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt20.ToTypedValue(Knx.Bus.Common.GroupValues.GroupValue)">
            <inheritdoc/>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt20.ToGroupValue(System.Byte)">
            <inheritdoc/>
        </member>
        <member name="T:Knx.Bus.Common.DatapointTypes.Dpt21">
            <summary>
            This class is responsible for encoding and decoding 1-octet bitset (DPT 21.xxx) datapoint types.
            The raw value is translated to and from <see cref="T:System.Byte"/>.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt21.#ctor(Knx.Bus.Common.MasterData.DatapointSubtype)">
            <summary>
            Initialize a new object of class <see cref="T:Knx.Bus.Common.DatapointTypes.Dpt21"/> with a specific datapoint subtype.
            </summary>
            <param name="subtype">The datapoint subtype</param>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt21.#ctor">
            <summary>
            Initialize a new object of class <see cref="T:Knx.Bus.Common.DatapointTypes.Dpt21"/>.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt21.ToTypedValue(Knx.Bus.Common.GroupValues.GroupValue)">
            <inheritdoc/>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt21.ToGroupValue(System.Byte)">
            <inheritdoc/>
        </member>
        <member name="T:Knx.Bus.Common.DatapointTypes.Dpt232">
            <summary>
            This class is responsible for encoding and decoding 3-octet RGB color (DPT 232.xxx) datapoint types.
            The raw value is translated to and from <see cref="T:System.Drawing.Color"/>.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt232.#ctor(Knx.Bus.Common.MasterData.DatapointSubtype)">
            <summary>
            Initialize a new object of class <see cref="T:Knx.Bus.Common.DatapointTypes.Dpt232"/> with a specific datapoint subtype.
            </summary>
            <param name="subtype">The datapoint subtype</param>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt232.#ctor">
            <summary>
            Initialize a new object of class <see cref="T:Knx.Bus.Common.DatapointTypes.Dpt232"/>.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt232.ToTypedValue(Knx.Bus.Common.GroupValues.GroupValue)">
            <inheritdoc/>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt232.ToGroupValue(System.Drawing.Color)">
            <inheritdoc/>
        </member>
        <member name="T:Knx.Bus.Common.DatapointTypes.Dpt26">
            <summary>
            This class is responsible for encoding and decoding Scene Info (DPT 26.xxx) datapoint types.
            The raw value is translated to and from <see cref="T:Knx.Bus.Common.DatapointTypes.KnxSceneInfo"/>.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt26.#ctor(Knx.Bus.Common.MasterData.DatapointSubtype)">
            <summary>
            Initialize a new object of class <see cref="T:Knx.Bus.Common.DatapointTypes.Dpt26"/> with a specific datapoint subtype.
            </summary>
            <param name="subtype">The datapoint subtype</param>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt26.#ctor">
            <summary>
            Initialize a new object of class <see cref="T:Knx.Bus.Common.DatapointTypes.Dpt26"/>.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt26.ToTypedValue(Knx.Bus.Common.GroupValues.GroupValue)">
            <inheritdoc/>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt26.ToGroupValue(Knx.Bus.Common.DatapointTypes.KnxSceneInfo)">
            <inheritdoc/>
        </member>
        <member name="T:Knx.Bus.Common.DatapointTypes.Dpt29">
            <summary>
            This class is responsible for encoding and decoding 8-octet Signed Integer (DPT 29.xxx) datapoint types.
            The raw value is translated to and from <see cref="T:System.Int64"/>.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt29.#ctor(Knx.Bus.Common.MasterData.DatapointSubtype)">
            <summary>
            Initialize a new object of class <see cref="T:Knx.Bus.Common.DatapointTypes.Dpt29"/> with a specific datapoint subtype.
            </summary>
            <param name="subtype">The datapoint subtype</param>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt29.#ctor">
            <summary>
            Initialize a new object of class <see cref="T:Knx.Bus.Common.DatapointTypes.Dpt29"/>.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt29.ToTypedValue(Knx.Bus.Common.GroupValues.GroupValue)">
            <inheritdoc/>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt29.ToGroupValue(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="T:Knx.Bus.Common.DatapointTypes.Dpt3">
            <summary>
            This class is responsible for encoding and decoding 4 bit control (DPT 3.xxx) datapoint types.
            The raw value is translated to and from <see cref="T:System.Byte"/>.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt3.#ctor(Knx.Bus.Common.MasterData.DatapointSubtype)">
            <summary>
            Initialize a new object of class <see cref="T:Knx.Bus.Common.DatapointTypes.Dpt3"/> with a specific datapoint subtype.
            </summary>
            <param name="subtype">The datapoint subtype</param>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt3.#ctor">
            <summary>
            Initialize a new object of class <see cref="T:Knx.Bus.Common.DatapointTypes.Dpt3"/>.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt3.ToTypedValue(Knx.Bus.Common.GroupValues.GroupValue)">
            <inheritdoc/>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt3.ToGroupValue(System.Byte)">
            <inheritdoc/>
        </member>
        <member name="T:Knx.Bus.Common.DatapointTypes.Dpt4">
            <summary>
            This class is responsible for encoding and decoding 1-octet character (DPT 4.xxx) datapoint types.
            The raw value is translated to and from <see cref="T:System.Char"/>.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt4.#ctor(Knx.Bus.Common.MasterData.DatapointSubtype)">
            <summary>
            Initialize a new object of class <see cref="T:Knx.Bus.Common.DatapointTypes.Dpt4"/> with a specific datapoint subtype.
            </summary>
            <param name="subtype">The datapoint subtype</param>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt4.#ctor(System.Text.Encoding)">
            <summary>
            Initialize a new object of class <see cref="T:Knx.Bus.Common.DatapointTypes.Dpt4"/>.
            </summary>
            <param name="encoding">The character encoding</param>
        </member>
        <member name="P:Knx.Bus.Common.DatapointTypes.Dpt4.Encoding">
            <summary>
            Gets the encoding
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt4.ToTypedValue(Knx.Bus.Common.GroupValues.GroupValue)">
            <inheritdoc/>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt4.ToGroupValue(System.Char)">
            <inheritdoc/>
        </member>
        <member name="T:Knx.Bus.Common.DatapointTypes.Dpt5">
            <summary>
            This class is responsible for encoding and decoding 1-octet Unsigned Integer (DPT 5.xxx) datapoint types.
            The raw value is translated to and from <see cref="T:System.Byte"/>.
            </summary>
            <remarks>
            See <see cref="T:Knx.Bus.Common.DatapointTypes.Dpt5Scaled"/> for a version integrating a scaling factor.
            </remarks>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt5.#ctor(Knx.Bus.Common.MasterData.DatapointSubtype)">
            <summary>
            Initialize a new object of class <see cref="T:Knx.Bus.Common.DatapointTypes.Dpt5"/> with a specific datapoint subtype.
            </summary>
            <param name="subtype">The datapoint subtype</param>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt5.#ctor">
            <summary>
            Initialize a new object of class <see cref="T:Knx.Bus.Common.DatapointTypes.Dpt5"/>.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt5.ToTypedValue(Knx.Bus.Common.GroupValues.GroupValue)">
            <inheritdoc/>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt5.ToGroupValue(System.Byte)">
            <inheritdoc/>
        </member>
        <member name="T:Knx.Bus.Common.DatapointTypes.Dpt5Scaled">
            <summary>
            This class is responsible for encoding and decoding 1-octet Unsigned Integer scaled (e.g. 5.001 and 5.003) datapoint types.
            The raw value is translated to and from <see cref="T:System.Single"/>.
            </summary>
            <remarks>
            See <see cref="T:Knx.Bus.Common.DatapointTypes.Dpt5"/> for a version without a scaling factor.
            </remarks>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt5Scaled.#ctor(Knx.Bus.Common.MasterData.DatapointSubtype)">
            <summary>
            Initialize a new object of class <see cref="T:Knx.Bus.Common.DatapointTypes.Dpt5Scaled"/> with a specific datapoint subtype.
            </summary>
            <param name="subtype">The datapoint subtype</param>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt5Scaled.#ctor(System.Single)">
            <summary>
            Initialize a new object of class <see cref="T:Knx.Bus.Common.DatapointTypes.Dpt5Scaled"/>.
            </summary>
            <param name="factor">The scaling factor to apply</param>
        </member>
        <member name="P:Knx.Bus.Common.DatapointTypes.Dpt5Scaled.Factor">
            <summary>
            Gets the factor
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt5Scaled.ToTypedValue(Knx.Bus.Common.GroupValues.GroupValue)">
            <inheritdoc/>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt5Scaled.ToGroupValue(System.Single)">
            <inheritdoc/>
        </member>
        <member name="T:Knx.Bus.Common.DatapointTypes.Dpt6">
            <summary>
            This class is responsible for encoding and decoding 1-octet Signed Integer (DPT 6.xxx) datapoint types.
            The raw value is translated to and from <see cref="T:System.SByte"/>.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt6.#ctor(Knx.Bus.Common.MasterData.DatapointSubtype)">
            <summary>
            Initialize a new object of class <see cref="T:Knx.Bus.Common.DatapointTypes.Dpt6"/> with a specific datapoint subtype.
            </summary>
            <param name="subtype">The datapoint subtype</param>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt6.#ctor">
            <summary>
            Initialize a new object of class <see cref="T:Knx.Bus.Common.DatapointTypes.Dpt6"/>.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt6.ToTypedValue(Knx.Bus.Common.GroupValues.GroupValue)">
            <inheritdoc/>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt6.ToGroupValue(System.SByte)">
            <inheritdoc/>
        </member>
        <member name="T:Knx.Bus.Common.DatapointTypes.Dpt7">
            <summary>
            This class is responsible for encoding and decoding 2-octet Unsigned Integer (DPT 7.xxx) datapoint types.
            The raw value is translated to and from <see cref="T:System.UInt16"/>.
            </summary>
            <remarks>
            See <see cref="T:Knx.Bus.Common.DatapointTypes.Dpt7TimePeriod"/> for a version specifically suited for the time period encoding subtypes 2 to 7.
            </remarks>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt7.#ctor(Knx.Bus.Common.MasterData.DatapointSubtype)">
            <summary>
            Initialize a new object of class <see cref="T:Knx.Bus.Common.DatapointTypes.Dpt7"/> with a specific datapoint subtype.
            </summary>
            <param name="subtype">The datapoint subtype</param>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt7.#ctor">
            <summary>
            Initialize a new object of class <see cref="T:Knx.Bus.Common.DatapointTypes.Dpt7"/>.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt7.ToTypedValue(Knx.Bus.Common.GroupValues.GroupValue)">
            <inheritdoc/>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt7.ToGroupValue(System.UInt16)">
            <inheritdoc/>
        </member>
        <member name="T:Knx.Bus.Common.DatapointTypes.Dpt7TimePeriod">
            <summary>
            This class is responsible for encoding and decoding 2-octet Unsigned Integer representing a time period (i.e. 7.002 to 7.007) datapoint types.
            The raw value is translated to and from <see cref="T:System.TimeSpan"/>.
            </summary>
            <remarks>
            See <see cref="T:Knx.Bus.Common.DatapointTypes.Dpt7"/> for a version without translation to TimeSpan.
            </remarks>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt7TimePeriod.#ctor(Knx.Bus.Common.MasterData.DatapointSubtype)">
            <summary>
            Initialize a new object of class <see cref="T:Knx.Bus.Common.DatapointTypes.Dpt7TimePeriod"/> with a specific datapoint subtype.
            </summary>
            <param name="subtype">The datapoint subtype</param>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt7TimePeriod.#ctor(System.UInt32)">
            <summary>
            Initialize a new object of class <see cref="T:Knx.Bus.Common.DatapointTypes.Dpt5Scaled"/>.
            </summary>
            <param name="unitInMilliseconds">The unit in milliseconds</param>
        </member>
        <member name="P:Knx.Bus.Common.DatapointTypes.Dpt7TimePeriod.UnitInMilliseconds">
            <summary>
            Gets the time unit in milliseconds
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt7TimePeriod.ToTypedValue(Knx.Bus.Common.GroupValues.GroupValue)">
            <inheritdoc/>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt7TimePeriod.ToGroupValue(System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="T:Knx.Bus.Common.DatapointTypes.Dpt8">
            <summary>
            This class is responsible for encoding and decoding 2-octet Signed Integer (DPT 8.xxx) datapoint types.
            The raw value is translated to and from <see cref="T:System.Int16"/>.
            </summary>
            <remarks>
            See <see cref="T:Knx.Bus.Common.DatapointTypes.Dpt8TimeDifference"/> for a version specifically suited for the time difference encoding subtypes 2 to 7.
            </remarks>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt8.#ctor(Knx.Bus.Common.MasterData.DatapointSubtype)">
            <summary>
            Initialize a new object of class <see cref="T:Knx.Bus.Common.DatapointTypes.Dpt8"/> with a specific datapoint subtype.
            </summary>
            <param name="subtype">The datapoint subtype</param>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt8.#ctor">
            <summary>
            Initialize a new object of class <see cref="T:Knx.Bus.Common.DatapointTypes.Dpt8"/>.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt8.ToTypedValue(Knx.Bus.Common.GroupValues.GroupValue)">
            <inheritdoc/>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt8.ToGroupValue(System.Int16)">
            <inheritdoc/>
        </member>
        <member name="T:Knx.Bus.Common.DatapointTypes.Dpt8TimeDifference">
            <summary>
            This class is responsible for encoding and decoding 2-octet Unsigned Integer representing a time difference (i.e. 8.002 to 8.007) datapoint types.
            The raw value is translated to and from <see cref="T:System.TimeSpan"/>.
            </summary>
            <remarks>
            See <see cref="T:Knx.Bus.Common.DatapointTypes.Dpt8"/> for a version without translation to TimeSpan.
            </remarks>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt8TimeDifference.#ctor(Knx.Bus.Common.MasterData.DatapointSubtype)">
            <summary>
            Initialize a new object of class <see cref="T:Knx.Bus.Common.DatapointTypes.Dpt8TimeDifference"/> with a specific datapoint subtype.
            </summary>
            <param name="subtype">The datapoint subtype</param>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt8TimeDifference.#ctor(System.UInt32)">
            <summary>
            Initialize a new object of class <see cref="T:Knx.Bus.Common.DatapointTypes.Dpt8TimeDifference"/>.
            </summary>
            <param name="unitInMilliseconds">The unit in milliseconds</param>
        </member>
        <member name="P:Knx.Bus.Common.DatapointTypes.Dpt8TimeDifference.UnitInMilliseconds">
            <summary>
            Gets the time unit in milliseconds
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt8TimeDifference.ToTypedValue(Knx.Bus.Common.GroupValues.GroupValue)">
            <inheritdoc/>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt8TimeDifference.ToGroupValue(System.TimeSpan)">
            <inheritdoc/>
        </member>
        <member name="T:Knx.Bus.Common.DatapointTypes.Dpt9">
            <summary>
            This class is responsible for encoding and decoding 2-octet Float (DPT 9.xxx) datapoint types.
            The raw value is translated to and from <see cref="T:System.Single"/>.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt9.#ctor(Knx.Bus.Common.MasterData.DatapointSubtype)">
            <summary>
            Initialize a new object of class <see cref="T:Knx.Bus.Common.DatapointTypes.Dpt9"/> with a specific datapoint subtype.
            </summary>
            <param name="subtype">The datapoint subtype</param>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt9.#ctor">
            <summary>
            Initialize a new object of class <see cref="T:Knx.Bus.Common.DatapointTypes.Dpt9"/>.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt9.ToTypedValue(Knx.Bus.Common.GroupValues.GroupValue)">
            <inheritdoc/>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.Dpt9.ToGroupValue(System.Single)">
            <inheritdoc/>
        </member>
        <member name="T:Knx.Bus.Common.DatapointTypes.DptBase">
            <summary>
            Base class for all datapoint type classes
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.DptBase.#ctor(Knx.Bus.Common.MasterData.DatapointSubtype)">
            <summary>
            Initialize a new object of class <see cref="T:Knx.Bus.Common.DatapointTypes.DptBase"/> with a specific datapoint subtype.
            </summary>
            <param name="subtype">The datapoint subtype</param>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.DptBase.#ctor(Knx.Bus.Common.MasterData.DatapointType)">
            <summary>
            Initialize a new object of class <see cref="T:Knx.Bus.Common.DatapointTypes.DptBase"/> with a specific datapoint type, but no subtype.
            </summary>
            <param name="type">The datapoint type</param>
        </member>
        <member name="P:Knx.Bus.Common.DatapointTypes.DptBase.DatapointSubtype">
            <summary>
            Returns the datapoint subtype information
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.DatapointTypes.DptBase.DatapointType">
            <summary>
            Returns the datapoint type information
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.DatapointTypes.DptBase.Name">
            <summary>
            Name of the datapoint type
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.DatapointTypes.DptBase.MainNumber">
            <summary>
            Main number of the datapoint type
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.DatapointTypes.DptBase.SubNumber">
            <summary>
            Sub number of the datapoint type
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.DatapointTypes.DptBase.CanonicalType">
            <summary>
            The CLR type to and from which the converter translates.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.DatapointTypes.DptBase.SizeInBit">
            <summary>
            Size in bits of the datapoint type
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.DptBase.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.DptBase.ToValue(Knx.Bus.Common.GroupValues.GroupValue)">
            <summary>
            Converts the raw value to a suitable "friendly" representation
            </summary>
            <param name="groupValue">The raw value</param>
            <returns>Converted value, the returned value is of type <see cref="P:Knx.Bus.Common.DatapointTypes.DptBase.CanonicalType"/>.</returns>
            <example>
              <code lang="cs" title="Read group value and convert with DatapointType converter:" source="..\DocumentationSamples\BusSamples.cs" region="Read group value and convert with DatapointType converter"/>
            </example>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.DptBase.ToGroupValue(System.Object)">
            <summary>
            Converts a "friendly" value to the raw value
            </summary>
            <param name="value">A value of type <see cref="P:Knx.Bus.Common.DatapointTypes.DptBase.CanonicalType"/>; or convertible to such a type.</param>
            <returns>The raw value</returns>
            <example>
              <code lang="cs" title="Write group value converted with DatapointType converter:" source="..\DocumentationSamples\BusSamples.cs" region="Write group value converted with DatapointType converter"/>
            </example>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.DptBase.VerifySize(Knx.Bus.Common.GroupValues.GroupValue)">
            <summary>
            Verifies that the input group value matches the expected size
            </summary>
            <param name="groupValue"></param>
        </member>
        <member name="T:Knx.Bus.Common.DatapointTypes.DptCompoundGeneric">
            <summary>
            This class is responsible for encoding and decoding compound datapoint types for which no explicit
            implementation is provided.
            The raw value is translated to and from <see cref="T:Knx.Bus.Common.DatapointTypes.CompoundValue"/>.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.DptCompoundGeneric.#ctor(Knx.Bus.Common.MasterData.DatapointSubtype)">
            <summary>
            Initialize a new object of class <see cref="T:Knx.Bus.Common.DatapointTypes.DptCompoundGeneric"/> with a specific datapoint subtype.
            </summary>
            <param name="subtype">The datapoint subtype</param>
        </member>
        <member name="P:Knx.Bus.Common.DatapointTypes.DptCompoundGeneric.CanonicalType">
            <inheritdoc/>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.DptCompoundGeneric.ToValue(Knx.Bus.Common.GroupValues.GroupValue)">
            <inheritdoc/>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.DptCompoundGeneric.ToGroupValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Knx.Bus.Common.DatapointTypes.DptFactory">
            <summary>
            Factory object for <see cref="T:Knx.Bus.Common.DatapointTypes.DptBase"/> derived datapoint type objects
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.DptFactory.Create(System.Int32,System.Int32)">
            <summary>
            Create a datapoint type object by number
            </summary>
            <param name="mainNumber">Main number</param>
            <param name="subNumber">Sub number</param>
            <returns>The data point value converter</returns>
        </member>
        <member name="T:Knx.Bus.Common.DatapointTypes.DptSimple`1">
            <summary>
            Base class for all explicit implementation of simple (non-compound) datapoint types
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.DptSimple`1.#ctor(Knx.Bus.Common.MasterData.DatapointSubtype)">
            <summary>
            Initialize a new object of class <see cref="T:Knx.Bus.Common.DatapointTypes.DptSimple`1"/> with a specific datapoint subtype.
            </summary>
            <param name="subtype">The datapoint subtype</param>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.DptSimple`1.#ctor(Knx.Bus.Common.MasterData.DatapointType)">
            <summary>
            Initialize a new object of class <see cref="T:Knx.Bus.Common.DatapointTypes.DptSimple`1"/> with a specific datapoint type, but no subtype.
            </summary>
            <param name="type">The datapoint type</param>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.DptSimple`1.ToValue(Knx.Bus.Common.GroupValues.GroupValue)">
            <inheritdoc/>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.DptSimple`1.ToGroupValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.DptSimple`1.ToTypedValue(Knx.Bus.Common.GroupValues.GroupValue)">
            <summary>
            Converts the raw value to a value of type <typeparamref name="T"/>
            </summary>
            <param name="groupValue">The raw value</param>
            <returns>Value converted to type <typeparamref name="T"/>.</returns>
            <example>
              <code lang="cs" title="Read group value and convert with DatapointType converter:" source="..\DocumentationSamples\BusSamples.cs" region="Read group value and convert with DatapointType converter"/>
            </example>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.DptSimple`1.ToGroupValue(`0)">
            <summary>
            Converts a value of type <typeparamref name="T"/> to the raw value
            </summary>
            <param name="value">A value of type <typeparamref name="T"/>.</param>
            <returns>The raw value</returns>
            <example>
              <code lang="cs" title="Write group value converted with DatapointType converter:" source="..\DocumentationSamples\BusSamples.cs" region="Write group value converted with DatapointType converter"/>
            </example>
        </member>
        <member name="P:Knx.Bus.Common.DatapointTypes.DptSimple`1.CanonicalType">
            <inheritdoc/>
        </member>
        <member name="T:Knx.Bus.Common.DatapointTypes.DptSimpleGeneric">
            <summary>
            This class is responsible for encoding and decoding simple (non-compound) datapoint types for which no explicit
            implementation is provided.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.DptSimpleGeneric.#ctor(Knx.Bus.Common.MasterData.DatapointSubtype)">
            <summary>
            Initialize a new object of class <see cref="T:Knx.Bus.Common.DatapointTypes.DptSimpleGeneric"/> with a specific datapoint subtype.
            </summary>
            <param name="subtype">The datapoint subtype</param>
        </member>
        <member name="P:Knx.Bus.Common.DatapointTypes.DptSimpleGeneric.CanonicalType">
            <inheritdoc/>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.DptSimpleGeneric.ToValue(Knx.Bus.Common.GroupValues.GroupValue)">
            <inheritdoc/>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.DptSimpleGeneric.ToGroupValue(System.Object)">
            <inheritdoc/>
        </member>
        <member name="T:Knx.Bus.Common.DatapointTypes.DptValueConverter">
            <summary>
            Provides basic datapoint value conversion between raw data in a byte array buffer and friendly types
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.DptValueConverter.ExtractFloat16(System.Byte[],System.Int32)">
            <summary>
            Extracts a 16 bit float value (DPT 9) from a buffer
            </summary>
            <param name="buffer">The raw data</param>
            <param name="offset">The offset within <paramref name="buffer"/></param>
            <returns>The converted value; or <see cref="F:System.Single.NaN"/> for the invalid value 7F FF</returns>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.DptValueConverter.WriteFloat16(System.Single,System.Byte[],System.Int32)">
            <summary>
            Writes a 16 bit float value (DPT 9) into a buffer
            </summary>
            <param name="value">The value to write</param>
            <param name="buffer">The raw data buffer</param>
            <param name="offset">The offset within <paramref name="buffer"/></param>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.DptValueConverter.ExtractFloat32(System.Byte[],System.Int32)">
            <summary>
            Extracts a 16 bit float value (DPT 14) from a buffer
            </summary>
            <param name="buffer">The raw data</param>
            <param name="offset">The offset within <paramref name="buffer"/></param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.DptValueConverter.WriteFloat32(System.Single,System.Byte[],System.Int32)">
            <summary>
            Writes a 16 bit float value (DPT 14) into a buffer
            </summary>
            <param name="value">The value to write</param>
            <param name="buffer">The raw data buffer</param>
            <param name="offset">The offset within <paramref name="buffer"/></param>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.DptValueConverter.ExtractBits(System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Extracts a sub-byte unsigned integer from a buffer
            </summary>
            <param name="buffer">The raw data</param>
            <param name="offset">The offset within <paramref name="buffer"/></param>
            <param name="bitOffset">The start of the value within the byte, counted from the MSB</param>
            <param name="lengthInBit">The length in bit</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.DptValueConverter.WriteBits(System.Byte,System.Byte[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Writes an unsigned integer byte-aligned into a buffer
            </summary>
            <param name="value">The value to write</param>
            <param name="buffer">The raw data buffer</param>
            <param name="offset">The offset within <paramref name="buffer"/></param>
            <param name="bitOffset">The start of the value within the byte, counted from the MSB</param>
            <param name="lengthInBit">The length in bit</param>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.DptValueConverter.ExtractUnsigned(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Extracts a byte-aligned unsigned integer from a buffer
            </summary>
            <param name="buffer">The raw data</param>
            <param name="offset">The offset within <paramref name="buffer"/></param>
            <param name="length">The length in bytes; must be between 1 and 8</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.DptValueConverter.WriteUnsigned(System.UInt64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes an unsigned integer byte-aligned into a buffer
            </summary>
            <param name="value">The value to write</param>
            <param name="buffer">The raw data buffer</param>
            <param name="offset">The offset within <paramref name="buffer"/></param>
            <param name="length">The length in bytes; must be between 1 and 8</param>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.DptValueConverter.ExtractSigned(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Extracts a byte-aligned signed integer from a buffer
            </summary>
            <param name="buffer">The raw data</param>
            <param name="offset">The offset within <paramref name="buffer"/></param>
            <param name="length">The length in bytes; must be between 1 and 8</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.DptValueConverter.WriteSigned(System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes an signed integer byte-aligned into a buffer
            </summary>
            <param name="value">The value to write</param>
            <param name="buffer">The raw data buffer</param>
            <param name="offset">The offset within <paramref name="buffer"/></param>
            <param name="length">The length in bytes; must be between 1 and 8</param>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.DptValueConverter.ExtractString(System.Byte[],System.Int32,System.Text.Encoding,System.Int32)">
            <summary>
            Extracts a string of characters from a buffer
            </summary>
            <param name="buffer">The raw data</param>
            <param name="offset">The offset within <paramref name="buffer"/></param>
            <param name="encoding">The encoding</param>
            <param name="maxLength">The maximum length in bytes</param>
            <returns>The converted value</returns>
        </member>
        <member name="M:Knx.Bus.Common.DatapointTypes.DptValueConverter.WriteString(System.String,System.Byte[],System.Int32,System.Text.Encoding,System.Int32)">
            <summary>
            Writes a string of characters into a buffer
            </summary>
            <param name="value">The value to write</param>
            <param name="buffer">The raw data buffer</param>
            <param name="offset">The offset within <paramref name="buffer"/></param>
            <param name="encoding">The encoding</param>
            <param name="maxLength">The maximum length in bytes</param>
        </member>
        <member name="T:Knx.Bus.Common.DatapointTypes.KnxDateTime">
            <summary>
            Value representation for DPT 19 (<see cref="T:Knx.Bus.Common.DatapointTypes.Dpt19"/>).
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.DatapointTypes.KnxDateTime.DateTime">
            <summary>
            The data and time information
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.DatapointTypes.KnxDateTime.DayOfWeek">
            <summary>
            The weekday information. null if this information is not available.
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.DatapointTypes.KnxDateTime.Fault">
            <summary>
            false for Normal operation, true for Fault
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.DatapointTypes.KnxDateTime.WorkingDay">
            <summary>
            false is this is a bank holiday, true is this is a working day, null if this information is not available.
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.DatapointTypes.KnxDateTime.YearValid">
            <summary>
            true if the year part of <see cref="F:Knx.Bus.Common.DatapointTypes.KnxDateTime.DateTime"/> is valid.
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.DatapointTypes.KnxDateTime.MonthAndDayValid">
            <summary>
            true if the Month and Date part of <see cref="F:Knx.Bus.Common.DatapointTypes.KnxDateTime.DateTime"/> is valid.
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.DatapointTypes.KnxDateTime.TimeValid">
            <summary>
            true if the time part of <see cref="F:Knx.Bus.Common.DatapointTypes.KnxDateTime.DateTime"/> is valid.
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.DatapointTypes.KnxDateTime.DaylightSavingTime">
            <summary>
            false for Standard time, true for Daylight Saving Time
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.DatapointTypes.KnxDateTime.ClockSyncSignal">
            <summary>
            true if the clock has an external clock signal.
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.DatapointTypes.KnxSceneControl">
            <summary>
            Value representation for DPT 18 (<see cref="T:Knx.Bus.Common.DatapointTypes.Dpt18"/>).
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.DatapointTypes.KnxSceneControl.Store">
            <summary>
            false to activate the scene, true to store the scene.
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.DatapointTypes.KnxSceneControl.SceneNumber">
            <summary>
            The scene number
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.DatapointTypes.KnxSceneInfo">
            <summary>
            Value representation for DPT 26 (<see cref="T:Knx.Bus.Common.DatapointTypes.Dpt26"/>).
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.DatapointTypes.KnxSceneInfo.IsActive">
            <summary>
            false is scene is inactive, true is scene is active
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.DatapointTypes.KnxSceneInfo.SceneNumber">
            <summary>
            The scene number
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.DatapointTypes.KnxTime">
            <summary>
            Value representation for DPT 10 (<see cref="T:Knx.Bus.Common.DatapointTypes.Dpt10"/>).
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.DatapointTypes.KnxTime.TimeOfDay">
            <summary>
            The time of day
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.DatapointTypes.KnxTime.DayOfWeek">
            <summary>
            The weekday, or null if this information is not available (encoded as 0 in the raw value)
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.DataSecurity.DeviceCommunicationSecurity">
            <summary>
            Provides the necessary information for secure point-to-point communication.
            </summary>
            <remarks>
            An instance of this class can either be created programmatically using the 
            <see cref="T:Knx.Bus.Common.DataSecurity.DeviceCommunicationSecurityBuilder"/> class, or by loading security
            data exported from ETS.
            </remarks>
        </member>
        <member name="M:Knx.Bus.Common.DataSecurity.DeviceCommunicationSecurity.Load(System.String,System.Security.SecureString,Knx.Bus.Common.IndividualAddress)">
            <summary>
            Load point-to-point keys from a keyring file (*.knxkeys) exported from ETS.
            </summary>
            <param name="fileName">Path of the knxkeys file</param>
            <param name="password">Password for the knxkeys file</param>
            <param name="interfaceAddress">The individual address of the interface to use</param>
            <returns>The read <see cref="T:Knx.Bus.Common.DataSecurity.DeviceCommunicationSecurity"/> data</returns>
            <remarks>
            ETS 5.6 currently does not support configuring P2P keys and thus the knxkeys file exported by ETS 5.6 will not contain any P2P keys.
            </remarks>
        </member>
        <member name="M:Knx.Bus.Common.DataSecurity.DeviceCommunicationSecurity.Load(System.IO.Stream,System.Security.SecureString,Knx.Bus.Common.IndividualAddress)">
            <summary>
            Load point-to-point keys from a keyring file (*.knxkeys) exported from ETS.
            </summary>
            <param name="stream">The data from the knxkeys file</param>
            <param name="password">Password for the knxkeys file</param>
            <param name="interfaceAddress">The individual address of the interface to use</param>
            <returns>The read <see cref="T:Knx.Bus.Common.DataSecurity.DeviceCommunicationSecurity"/> data</returns>
            <remarks>
            ETS 5.6 currently does not support configuring P2P keys and thus the knxkeys file exported by ETS 5.6 will not contain any P2P keys.
            </remarks>
        </member>
        <member name="M:Knx.Bus.Common.DataSecurity.DeviceCommunicationSecurity.Load(System.IO.Stream,System.Security.SecureString,Knx.Bus.Common.IndividualAddress,System.Boolean)">
            <summary>
            Load point-to-point keys from a keyring file (*.knxkeys) exported from ETS.
            </summary>
            <param name="stream">The data from the knxkeys file</param>
            <param name="password">Password for the knxkeys file</param>
            <param name="interfaceAddress">The individual address of the interface to use</param>
            <param name="doNotValidateSignature">If <c>true</c>, the file signature is not validated. 
            Use this only for test purposes because a manipulated knxkeys file may present a security risk.</param>
            <returns>The read <see cref="T:Knx.Bus.Common.DataSecurity.DeviceCommunicationSecurity"/> data</returns>
            <remarks>
            ETS 5.6 currently does not support configuring P2P keys and thus the knxkeys file exported by ETS 5.6 will not contain any P2P keys.
            </remarks>
        </member>
        <member name="M:Knx.Bus.Common.DataSecurity.DeviceCommunicationSecurity.LoadToolKeys(System.String,System.Security.SecureString)">
            <summary>
            Load tool keys from a keyring file (*.knxkeys) exported from ETS.
            </summary>
            <param name="fileName">Path of the knxkeys file</param>
            <param name="password">Password for the knxkeys file</param>
            <returns>The read <see cref="T:Knx.Bus.Common.DataSecurity.DeviceCommunicationSecurity"/> data</returns>
        </member>
        <member name="M:Knx.Bus.Common.DataSecurity.DeviceCommunicationSecurity.LoadToolKeys(System.IO.Stream,System.Security.SecureString)">
            <summary>
            Load tool keys from a keyring file (*.knxkeys) exported from ETS.
            </summary>
            <param name="stream">The data from the knxkeys file</param>
            <param name="password">Password for the knxkeys file</param>
            <returns>The read <see cref="T:Knx.Bus.Common.DataSecurity.DeviceCommunicationSecurity"/> data</returns>
        </member>
        <member name="M:Knx.Bus.Common.DataSecurity.DeviceCommunicationSecurity.LoadToolKeys(System.IO.Stream,System.Security.SecureString,System.Boolean)">
            <summary>
            Load tool keys from a keyring file (*.knxkeys) exported from ETS.
            </summary>
            <param name="stream">The data from the knxkeys file</param>
            <param name="password">Password for the knxkeys file</param>
            <param name="doNotValidateSignature">If <c>true</c>, the file signature is not validated. 
            Use this only for test purposes because a manipulated knxkeys file may present a security risk.</param>
            <returns>The read <see cref="T:Knx.Bus.Common.DataSecurity.DeviceCommunicationSecurity"/> data</returns>
        </member>
        <member name="M:Knx.Bus.Common.DataSecurity.DeviceCommunicationSecurity.Load(System.IO.Stream,System.Security.SecureString,System.Boolean,System.Boolean,Knx.Bus.Common.IndividualAddress)">
            <summary>
            Load security data from a keyring file (*.knxkeys) exported from ETS.
            </summary>
            <param name="stream">The data from the knxkeys file</param>
            <param name="password">Password for the knxkeys file</param>
            <param name="doNotValidateSignature">If <c>true</c>, the file signature is not validated. 
            Use this only for test purposes because a manipulated knxkeys file may present a security risk.</param>
            <param name="toolKeys">If <c>true</c>, the tool keys are loaded.</param>
            <param name="interfaceAddress">If <paramref name="toolKeys"/> is <c>false</c>, the interface for which the P2P keys should be loaded.</param>
            <returns>The read <see cref="T:Knx.Bus.Common.DataSecurity.DeviceCommunicationSecurity"/> data</returns>
        </member>
        <member name="M:Knx.Bus.Common.DataSecurity.DeviceCommunicationSecurity.LoadDeviceSequenceCounters(System.IO.Stream,System.Security.SecureString)">
            <summary>
            Load the last valid sequence counters of secure devices from an XML stream
            </summary>
            <param name="stream">An XML stream containing the sequence counters</param>
            <param name="password">Password for validating the signature of the data. If <c>null</c>, no validation is performed;
            use this only for test purposes because manipulated sequence counters may lead to a denial of service.
            </param>
            <remarks>
            See also <see cref="M:Knx.Bus.Common.DataSecurity.DeviceCommunicationSecurity.SaveDeviceSequenceCounters(System.IO.Stream,System.Security.SecureString)"/>.
            </remarks>
        </member>
        <member name="M:Knx.Bus.Common.DataSecurity.DeviceCommunicationSecurity.SaveDeviceSequenceCounters(System.IO.Stream,System.Security.SecureString)">
            <summary>
            Save the last valid sequence counters of secure devices to an XML stream
            </summary>
            <param name="stream">An XML stream containing the sequence counters</param>
            <param name="password">Password for creating a signature of the data. If <c>null</c>, no signature is created;
            use this only for test purposes because manipulated sequence counters may lead to a denial of service.
            </param>
            <remarks>
            To prevent replay attacks it is important that the last valid sequence numbers of all communication partners
            are kept up-to date and persisted across runs. 
            The former is handled automatically by Falcon's Bus object.
            For the latter, it is advised to call the SaveDeviceSequenceCounters method regularly to save the current
            sequence counters to a file.
            </remarks>
        </member>
        <member name="M:Knx.Bus.Common.DataSecurity.DeviceCommunicationSecurity.LoadDeviceSequenceCounters(System.String,System.Security.SecureString)">
            <summary>
            Load the last valid sequence counters of secure devices from an XML file
            </summary>
            <param name="fileName">An XML file name containing the sequence counters</param>
            <param name="password">Password for validating the signature of the data. If <c>null</c>, no validation is performed;
            use this only for test purposes because manipulated sequence counters may lead to a denial of service.
            </param>
            <remarks>
            See also <see cref="M:Knx.Bus.Common.DataSecurity.DeviceCommunicationSecurity.SaveDeviceSequenceCounters(System.String,System.Security.SecureString)"/>.
            </remarks>
        </member>
        <member name="M:Knx.Bus.Common.DataSecurity.DeviceCommunicationSecurity.SaveDeviceSequenceCounters(System.String,System.Security.SecureString)">
            <summary>
            Save the last valid sequence counters of secure devices to an XML file
            </summary>
            <param name="fileName">An XML file containing the sequence counters</param>
            <param name="password">Password for creating a signature of the data. If <c>null</c>, no signature is created;
            use this only for test purposes because manipulated sequence counters may lead to a denial of service.
            </param>
            <remarks>
            <para>
            To prevent replay attacks it is important that the last valid sequence numbers of all communication partners
            are kept up-to date and persisted across runs. 
            The former is handled automatically by Falcon's Bus object.
            For the latter, it is advised to call the SaveDeviceSequenceCounters method regularly to save the current
            sequence counters to a file.
            </para>
            <para>
            This method will temporarily create another file in the same directory named fileName + ".tmp"
            to ensure atomicity of the write operation. Any existing file with this name will be overwritten.
            </para>
            <para>
            Of course, <paramref name="fileName"/> must be on a writable volume/directory.
            </para>
            </remarks>
        </member>
        <member name="P:Knx.Bus.Common.DataSecurity.DeviceCommunicationSecurity.Item(System.UInt16)">
            <summary>
            Returns the security data for the specified individual address
            </summary>
            <param name="individualAddress">The individual address</param>
            <returns>The security data or null if no security is configured for this individual address</returns>
        </member>
        <member name="T:Knx.Bus.Common.DataSecurity.DeviceCommunicationSecurityBuilder">
            <summary>
            Use this class to construct an instance of <see cref="T:Knx.Bus.Common.DataSecurity.DeviceCommunicationSecurity"/>
            programmatically.
            </summary>
            <example>
              <code lang="cs" source="..\DocumentationSamples\BusSamples.cs" region="Manually added group keys"/>
            </example>  
        </member>
        <member name="M:Knx.Bus.Common.DataSecurity.DeviceCommunicationSecurityBuilder.ToDeviceCommunicationSecurity">
            <summary>
            Creates a <see cref="T:Knx.Bus.Common.DataSecurity.DeviceCommunicationSecurity"/> instance.
            </summary>
            <returns>DeviceCommunicationSecurity instance.</returns>
        </member>
        <member name="M:Knx.Bus.Common.DataSecurity.DeviceCommunicationSecurityBuilder.op_Implicit(Knx.Bus.Common.DataSecurity.DeviceCommunicationSecurityBuilder)~Knx.Bus.Common.DataSecurity.DeviceCommunicationSecurity">
            <summary>
            Implicit conversion from DeviceCommunicationSecurityBuilder to DeviceCommunicationSecurity.
            </summary>
            <param name="builder"></param>
            <returns>DeviceCommunicationSecurity instance.</returns>
        </member>
        <member name="M:Knx.Bus.Common.DataSecurity.DeviceCommunicationSecurityBuilder.Clear">
            <summary>
            Removes all security information
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.DataSecurity.DeviceCommunicationSecurityBuilder.AddKey(Knx.Bus.Common.IndividualAddress,Knx.Bus.Common.EncryptedBuffer,System.Boolean)">
            <summary>
            Adds, updates or deletes the security data for the given individual address.
            </summary>
            <param name="individualAddress">The individual address</param>
            <param name="key">The new key, or null to clear the security information</param>
            <param name="isToolKey">true if the key is a tool key</param>
            <returns>The same <see cref="T:Knx.Bus.Common.DataSecurity.DeviceCommunicationSecurityBuilder"/> instance is returned. This allows
            adding multiple keys in one statement ("fluent interface"); see example.</returns>
            <example>
              <code lang="cs" source="..\DocumentationSamples\BusSamples.cs" region="Manually added group keys"/>
            </example>  
        </member>
        <member name="M:Knx.Bus.Common.DataSecurity.DeviceCommunicationSecurityBuilder.AddKey(Knx.Bus.Common.IndividualAddress,System.Byte[],System.Boolean)">
            <summary>
            Adds, updates or deletes the security data for the given individual address.
            </summary>
            <param name="individualAddress">The individual address</param>
            <param name="key">The new key, or null to clear the security information</param>
            <param name="isToolKey">true if the key is a tool key</param>
            <returns>The same <see cref="T:Knx.Bus.Common.DataSecurity.DeviceCommunicationSecurityBuilder"/> instance is returned. This allows
            adding multiple keys in one statement ("fluent interface"); see example.</returns>
            <remarks>
            <para>
            Important security hint: byte arrays containing unencrypted keys present a security risk because an attacker might
            be able to extract the keys from the computer memory or a memory dump. Be sure to clear the content of the
            array reference by <paramref name="key"/> after use. The <see cref="T:Knx.Bus.Cryptography.SecureBuffer"/> makes this easy.
            If you need to keep the key for a longer time, use the <see cref="T:Knx.Bus.Common.EncryptedBuffer"/> class and consider using
            the <see cref="M:Knx.Bus.Common.DataSecurity.DeviceCommunicationSecurityBuilder.AddKey(Knx.Bus.Common.IndividualAddress,Knx.Bus.Common.EncryptedBuffer,System.Boolean)"/> overload.
            </para>
            </remarks>
            <example>
              <code lang="cs" source="..\DocumentationSamples\BusSamples.cs" region="Manually added group keys"/>
            </example>  
        </member>
        <member name="T:Knx.Bus.Common.DataSecurity.DeviceSecurityData">
            <summary>
            Provides the necessary information for secure point-to-point communication with one device
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.DataSecurity.DeviceSecurityData.Key">
            <summary>
            Gets the key for encrypting the data
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.DataSecurity.DeviceSecurityData.IsToolKey">
            <summary>
            Gets a flag telling whether the key is the device's tool key or another key valid for P2P communication.
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.DataSecurity.GroupAddressSecurityData">
            <summary>
            Provides the necessary information for secure group communication with one group address
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.DataSecurity.GroupAddressSecurityData.Key">
            <summary>
            Gets the key for encrypting the data
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.DataSecurity.GroupCommunicationSecurity">
            <summary>
            Provides the necessary information for secure group communication.
            </summary>
            <remarks>
            An instance of this class can either be created programmatically using the 
            <see cref="T:Knx.Bus.Common.DataSecurity.GroupCommunicationSecurityBuilder"/> class, or by loading security
            data exported from ETS.
            </remarks>
        </member>
        <member name="M:Knx.Bus.Common.DataSecurity.GroupCommunicationSecurity.Load(System.String,System.Security.SecureString)">
            <summary>
            Load security data from a keyring file (*.knxkeys) exported from ETS.
            </summary>
            <param name="fileName">Path of the knxkeys file</param>
            <param name="password">Password for the knxkeys file</param>
            <returns>The read <see cref="T:Knx.Bus.Common.DataSecurity.GroupCommunicationSecurity"/> data</returns>
        </member>
        <member name="M:Knx.Bus.Common.DataSecurity.GroupCommunicationSecurity.Load(System.IO.Stream,System.Security.SecureString)">
            <summary>
            Load security data from a keyring file (*.knxkeys) exported from ETS.
            </summary>
            <param name="stream">The data from the knxkeys file</param>
            <param name="password">Password for the knxkeys file</param>
            <returns>The read <see cref="T:Knx.Bus.Common.DataSecurity.GroupCommunicationSecurity"/> data</returns>
        </member>
        <member name="M:Knx.Bus.Common.DataSecurity.GroupCommunicationSecurity.Load(System.IO.Stream,System.Security.SecureString,System.Boolean)">
            <summary>
            Load security data from a keyring file (*.knxkeys) exported from ETS.
            </summary>
            <param name="stream">The data from the knxkeys file</param>
            <param name="password">Password for the knxkeys file</param>
            <param name="doNotValidateSignature">If <c>true</c>, the file signature is not validated. 
            Use this only for test purposes because a manipulated knxkeys file may present a security risk.</param>
            <returns>The read <see cref="T:Knx.Bus.Common.DataSecurity.GroupCommunicationSecurity"/> data</returns>
        </member>
        <member name="M:Knx.Bus.Common.DataSecurity.GroupCommunicationSecurity.LoadDeviceSequenceCounters(System.IO.Stream,System.Security.SecureString)">
            <summary>
            Load the last valid sequence counters of secure devices from an XML stream
            </summary>
            <param name="stream">An XML stream containing the sequence counters</param>
            <param name="password">Password for validating the signature of the data. If <c>null</c>, no validation is performed;
            use this only for test purposes because manipulated sequence counters may lead to a denial of service.
            </param>
            <remarks>
            See also <see cref="M:Knx.Bus.Common.DataSecurity.GroupCommunicationSecurity.SaveDeviceSequenceCounters(System.IO.Stream,System.Security.SecureString)"/>.
            </remarks>
        </member>
        <member name="M:Knx.Bus.Common.DataSecurity.GroupCommunicationSecurity.SaveDeviceSequenceCounters(System.IO.Stream,System.Security.SecureString)">
            <summary>
            Save the last valid sequence counters of secure devices to an XML stream
            </summary>
            <param name="stream">An XML stream containing the sequence counters</param>
            <param name="password">Password for creating a signature of the data. If <c>null</c>, no signature is created;
            use this only for test purposes because manipulated sequence counters may lead to a denial of service.
            </param>
            <remarks>
            To prevent replay attacks it is important that the last valid sequence numbers of all communication partners
            are kept up-to date and persisted across runs. 
            The former is handled automatically by Falcon's Bus object.
            For the latter, it is advised to call the SaveDeviceSequenceCounters method regularly to save the current
            sequence counters to a file.
            </remarks>
        </member>
        <member name="M:Knx.Bus.Common.DataSecurity.GroupCommunicationSecurity.LoadDeviceSequenceCounters(System.String,System.Security.SecureString)">
            <summary>
            Load the last valid sequence counters of secure devices from an XML file
            </summary>
            <param name="fileName">An XML file name containing the sequence counters</param>
            <param name="password">Password for validating the signature of the data. If <c>null</c>, no validation is performed;
            use this only for test purposes because manipulated sequence counters may lead to a denial of service.
            </param>
            <remarks>
            See also <see cref="M:Knx.Bus.Common.DataSecurity.GroupCommunicationSecurity.SaveDeviceSequenceCounters(System.String,System.Security.SecureString)"/>.
            </remarks>
        </member>
        <member name="M:Knx.Bus.Common.DataSecurity.GroupCommunicationSecurity.SaveDeviceSequenceCounters(System.String,System.Security.SecureString)">
            <summary>
            Save the last valid sequence counters of secure devices to an XML file
            </summary>
            <param name="fileName">An XML file containing the sequence counters</param>
            <param name="password">Password for creating a signature of the data. If <c>null</c>, no signature is created;
            use this only for test purposes because manipulated sequence counters may lead to a denial of service.
            </param>
            <remarks>
            <para>
            To prevent replay attacks it is important that the last valid sequence numbers of all communication partners
            are kept up-to date and persisted across runs. 
            The former is handled automatically by Falcon's Bus object.
            For the latter, it is advised to call the SaveDeviceSequenceCounters method regularly to save the current
            sequence counters to a file.
            </para>
            <para>
            This method will temporarily create another file in the same directory named fileName + ".tmp"
            to ensure atomicity of the write operation. Any existing file with this name will be overwritten.
            </para>
            <para>
            Of course, <paramref name="fileName"/> must be on a writable volume/directory.
            </para>
            </remarks>
        </member>
        <member name="P:Knx.Bus.Common.DataSecurity.GroupCommunicationSecurity.Item(System.UInt16)">
            <summary>
            Returns the security data for the specified group address
            </summary>
            <param name="groupAddress">The group address</param>
            <returns>The security data or null if no security is configured for this group address</returns>
        </member>
        <member name="T:Knx.Bus.Common.DataSecurity.GroupCommunicationSecurityBuilder">
            <summary>
            Use this class to construct an instance of <see cref="T:Knx.Bus.Common.DataSecurity.GroupCommunicationSecurity"/>
            programmatically.
            </summary>
            <example>
              <code lang="cs" source="..\DocumentationSamples\BusSamples.cs" region="Manually added group keys"/>
            </example>  
        </member>
        <member name="M:Knx.Bus.Common.DataSecurity.GroupCommunicationSecurityBuilder.ToGroupCommunicationSecurity">
            <summary>
            Creates a <see cref="T:Knx.Bus.Common.DataSecurity.GroupCommunicationSecurity"/> instance.
            </summary>
            <returns>GroupCommunicationSecurity instance.</returns>
        </member>
        <member name="M:Knx.Bus.Common.DataSecurity.GroupCommunicationSecurityBuilder.op_Implicit(Knx.Bus.Common.DataSecurity.GroupCommunicationSecurityBuilder)~Knx.Bus.Common.DataSecurity.GroupCommunicationSecurity">
            <summary>
            Implicit conversion from GroupCommunicationSecurityBuilder to GroupCommunicationSecurity.
            </summary>
            <param name="builder"></param>
            <returns>GroupCommunicationSecurity instance.</returns>
        </member>
        <member name="M:Knx.Bus.Common.DataSecurity.GroupCommunicationSecurityBuilder.Clear">
            <summary>
            Removes all security information
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.DataSecurity.GroupCommunicationSecurityBuilder.AddKey(Knx.Bus.Common.GroupAddress,Knx.Bus.Common.EncryptedBuffer)">
            <summary>
            Adds, updates or deletes the security data for the given group address.
            </summary>
            <param name="groupAddress">The group address</param>
            <param name="key">The new key, or null to clear the security information</param>
            <returns>The same <see cref="T:Knx.Bus.Common.DataSecurity.GroupCommunicationSecurityBuilder"/> instance is returned. This allows
            adding multiple keys in one statement ("fluent interface"); see example.</returns>
            <example>
              <code lang="cs" source="..\DocumentationSamples\BusSamples.cs" region="Manually added group keys"/>
            </example>  
        </member>
        <member name="M:Knx.Bus.Common.DataSecurity.GroupCommunicationSecurityBuilder.AddKey(Knx.Bus.Common.GroupAddress,System.Byte[])">
            <summary>
            Adds, updates or deletes the security data for the given group address.
            </summary>
            <param name="groupAddress">The group address</param>
            <param name="key">The new key, or null to clear the security information</param>
            <returns>The same <see cref="T:Knx.Bus.Common.DataSecurity.GroupCommunicationSecurityBuilder"/> instance is returned. This allows
            adding multiple keys in one statement ("fluent interface"); see example.</returns>
            <remarks>
            <para>
            Important security hint: byte arrays containing unencrypted keys present a security risk because an attacker might
            be able to extract the keys from the computer memory or a memory dump. Be sure to clear the content of the
            array reference by <paramref name="key"/> after use. The <see cref="T:Knx.Bus.Cryptography.SecureBuffer"/> makes this easy.
            If you need to keep the key for a longer time, use the <see cref="T:Knx.Bus.Common.EncryptedBuffer"/> class and consider using
            the <see cref="M:Knx.Bus.Common.DataSecurity.GroupCommunicationSecurityBuilder.AddKey(Knx.Bus.Common.GroupAddress,Knx.Bus.Common.EncryptedBuffer)"/> overload.
            </para>
            </remarks>
            <example>
              <code lang="cs" source="..\DocumentationSamples\BusSamples.cs" region="Manually added group keys"/>
            </example>  
        </member>
        <member name="T:Knx.Bus.Common.DecryptionResult`1">
            <summary>
            Contains the result of a decryption operation.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.DecryptionResult`1.Status">
            <summary>
            Gets the outcome of a decryption operation
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.DecryptionResult`1.PlainTelegram">
            <summary>
            Gets the contained plain telegram, if <see cref="P:Knx.Bus.Common.DecryptionResult`1.Status"/> was not one of
            <see cref="F:Knx.Bus.Common.DecryptionStatus.DecryptionFailed"/> or <see cref="F:Knx.Bus.Common.DecryptionStatus.NoKeyAvailable"/>.
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.DecryptionStatus">
            <summary>
            Specifies the outcome of a decryption operation
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.DecryptionStatus.Success">
            <summary>
            Decryption succeeded
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.DecryptionStatus.OutdatedSeqNr">
            <summary>
            Decryption succeeded, but the SeqNr is lower than expected (possible replay attack)
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.DecryptionStatus.SameSeqNr">
            <summary>
            Decryption succeeded, but the SeqNr is the same as the last one (maybe a repetition?)
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.DecryptionStatus.DecryptionFailed">
            <summary>
            Decryption failed (wrong key, MAC check failed)
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.DecryptionStatus.NoKeyAvailable">
            <summary>
            No key was available
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.DeviceDescriptor2Channel">
            <summary>
            Represents a channel description within <see cref="T:Knx.Bus.Common.DeviceDescriptor2"/>
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.DeviceDescriptor2Channel.Count">
            <summary>
            Gets the number of channels of channel code <see cref="P:Knx.Bus.Common.DeviceDescriptor2Channel.Code"/> [1...8]
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.DeviceDescriptor2Channel.Code">
            <summary>
            Gets the channel code
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.DeviceDescriptor2">
            <summary>
            Represents the content of the Device Descriptor Type 2
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.DeviceDescriptor2.ApplicationManufacturerId">
            <summary>
            Gets the Application Manufacturer code
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.DeviceDescriptor2.ApplicationDeviceType">
            <summary>
            Gets the Application device type
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.DeviceDescriptor2.ApplicationVersion">
            <summary>
            Gets the Application version
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.DeviceDescriptor2.MiscAndLtBase">
            <summary>
            Gets the value of the "Misc. and LT Base" field
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.DomainAddress">
            <summary>
            Represents a domain address of a KNX device on an open medium (PL, RF, IP).
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.DomainAddress.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.DomainAddress"/> class with an empty domain address.
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.DomainAddress.LengthPl">
            <summary>
            The length of a PL domain address
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.DomainAddress.LengthRf">
            <summary>
            The length of a RF domain address
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.DomainAddress.LengthIpPlain">
            <summary>
            The length of an IP domain address without backbone security
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.DomainAddress.LengthIpSecure">
            <summary>
            The length of an IP domain address with backbone security
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.DomainAddress.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.DomainAddress"/> class with a domain address of any of the supported sizes.
            </summary>
            <param name="address">The domain address.</param>
            <remarks>
            The domain address length depends on the medium:
            <list type="bullet">
              <item>PL: 2 bytes</item>
              <item>RF: 6 bytes</item>
              <item>IP: 4 bytes (without backbone security) or 21 bytes (with backbone security)</item>
            </list>
            </remarks>
        </member>
        <member name="M:Knx.Bus.Common.DomainAddress.#ctor(System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.DomainAddress"/> class with a two-byte domain address (PL).
            </summary>
            <param name="address">The domain address.</param>
        </member>
        <member name="M:Knx.Bus.Common.DomainAddress.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.DomainAddress"/> class with a six-byte domain address (RF).
            </summary>
            <param name="address">The domain address.</param>
        </member>
        <member name="P:Knx.Bus.Common.DomainAddress.Value">
            <summary>
            Gets the domain address.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.DomainAddress.Length">
            <summary>
            Returns the length in byte.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.DomainAddress.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.DomainAddress"/> class.
            </summary>
            <param name="addressString">The address string.</param>
        </member>
        <member name="M:Knx.Bus.Common.DomainAddress.op_Implicit(System.UInt16)~Knx.Bus.Common.DomainAddress">
            <summary>
            Performs an implicit conversion from <see cref="T:System.UInt16"/> to <see cref="T:Knx.Bus.Common.DomainAddress"/>.
            </summary>
            <param name="address">The address.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.DomainAddress.op_Implicit(System.UInt64)~Knx.Bus.Common.DomainAddress">
            <summary>
            Performs an implicit conversion from <see cref="T:System.UInt64"/> to <see cref="T:Knx.Bus.Common.DomainAddress"/>.
            </summary>
            <param name="address">The address.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.DomainAddress.op_Explicit(Knx.Bus.Common.DomainAddress)~System.UInt16">
            <summary>
            Performs an explicit conversion from <see cref="T:Knx.Bus.Common.DomainAddress"/> to <see cref="T:System.UInt16"/>.
            </summary>
            <param name="address">The address.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.DomainAddress.op_Explicit(Knx.Bus.Common.DomainAddress)~System.UInt64">
            <summary>
            Performs an explicit conversion from <see cref="T:Knx.Bus.Common.DomainAddress"/> to <see cref="T:System.UInt64"/>.
            </summary>
            <param name="address">The address.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.DomainAddress.op_Implicit(System.Byte[])~Knx.Bus.Common.DomainAddress">
            <summary>
            Performs an implicit conversion from <see>
                                                   <cref>System.Byte[]</cref>
                                                 </see> to <see cref="T:Knx.Bus.Common.DomainAddress"/>.
            </summary>
            <param name="address">The address.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.DomainAddress.op_Implicit(Knx.Bus.Common.DomainAddress)~System.Byte[]">
            <summary>
            Performs an implicit conversion from <see cref="T:Knx.Bus.Common.DomainAddress"/> to <see>
                                                                                                 <cref>System.Byte[]</cref>
                                                                                               </see> .
            </summary>
            <param name="address">The address.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.DomainAddress.op_Implicit(System.String)~Knx.Bus.Common.DomainAddress">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Knx.Bus.Common.DomainAddress"/>.
            </summary>
            <param name="addressString">The address string.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.DomainAddress.op_Implicit(Knx.Bus.Common.DomainAddress)~System.String">
            <summary>
            Performs an implicit conversion from <see cref="T:Knx.Bus.Common.DomainAddress"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="address">The address.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.DomainAddress.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.DomainAddress.TryParse(System.String,Knx.Bus.Common.DomainAddress@)">
            <summary>
            Parses the provided domain address string into a <see cref="T:Knx.Bus.Common.DomainAddress"/> object.
            </summary>
            <param name="addressString">The domain address string.</param>
            <param name="domainAddress">The domain address.</param>
            <returns><c>true</c> if it is possible to parse the provided string into a <see cref="T:Knx.Bus.Common.DomainAddress"/>; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Knx.Bus.Common.DomainAddress.Equals(Knx.Bus.Common.DomainAddress)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the other parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.DomainAddress.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.DomainAddress.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.DomainAddress.Clone">
            <summary>
            Creates a new object that is a copy of the current instance.
            </summary>
            <returns>
            A new object that is a copy of this instance.
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.DomainAddress.op_Equality(Knx.Bus.Common.DomainAddress,Knx.Bus.Common.DomainAddress)">
            <summary>
            Implements the operator == (equal).
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:Knx.Bus.Common.DomainAddress"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.DomainAddress.op_Inequality(Knx.Bus.Common.DomainAddress,Knx.Bus.Common.DomainAddress)">
            <summary>
            Implements the operator != (not equal).
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:Knx.Bus.Common.DomainAddress"/> is not equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.DomainAddress.Parse(System.String)">
            <summary>
            Parses the specified address string to a DomainAddress object.
            </summary>
            <param name="addressString">The address string.</param>
            <returns>The DomainAddress object</returns>
        </member>
        <member name="T:Knx.Bus.Common.DomainAddressScanMode">
            <summary>
            The DomainAddressScanMode defines the intensity of the PL domain address scan. 
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.DomainAddressScanMode.DomainAddressScanModeFull">
            <summary>
            Checks all subnetworks (0.0 to 15.15) and all individual addresses, 
            without router addresses (1...255). 
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.DomainAddressScanMode.DomainAddressScanModeDefaultSubnetworks">
            <summary>
            Checks on the default subnetworks (0.3 and 0.4) all individual addresses 
            without router addresses (1...255). 
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.DomainAddressScanMode.DomainAddressScanModeQuick">
            <summary>
            Checks on all subnetworks (0.0 to 15.15) the first ten individual addresses without 
            router addresses (1..10), except for the default subnetworks (0.3 and 0.4), where all 
            individual addresses without router addresses (1...255) are checked. 
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.DomainAddressTypeConverter">
            <summary>
            TypeConverter for <see cref="T:Knx.Bus.Common.DomainAddress"/>.
            </summary>
            <remarks>Converts <see cref="T:Knx.Bus.Common.DomainAddress"/> from and to UInt16, Byte[] and String.</remarks>
        </member>
        <member name="M:Knx.Bus.Common.DomainAddressTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Knx.Bus.Common.DomainAddressTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Knx.Bus.Common.DomainAddressTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Knx.Bus.Common.DomainAddressTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Knx.Bus.Common.DomainAddrIndividualAddrSerialNumber">
            <summary>
            Represents the individual address, the domain address and the serial number of a KNX device.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.DomainAddrIndividualAddrSerialNumber.#ctor(Knx.Bus.Common.IndividualAddress,Knx.Bus.Common.DomainAddress,System.Nullable{Knx.Bus.Common.SerialNumber})">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.DomainAndIndividualAddress"/> class.
            </summary>
            <param name="individualAddress">The individual address.</param>
            <param name="domainAddress">The domain address.</param>
            <param name="serialNumber">The serial number.</param>
        </member>
        <member name="P:Knx.Bus.Common.DomainAddrIndividualAddrSerialNumber.DomainAddress">
            <summary>
            Gets the <see cref="T:Knx.Bus.Common.DomainAddress"/>.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.DomainAddrIndividualAddrSerialNumber.IndividualAddress">
            <summary>
            Gets the <see cref="T:Knx.Bus.Common.IndividualAddress"/>.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.DomainAddrIndividualAddrSerialNumber.SerialNumber">
            <summary>
            Gets the <see cref="T:Knx.Bus.Common.SerialNumber"/>.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.DomainAddrIndividualAddrSerialNumber.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Knx.Bus.Common.DomainAddrIndividualAddrSerialNumber.op_Equality(Knx.Bus.Common.DomainAddrIndividualAddrSerialNumber,Knx.Bus.Common.DomainAddrIndividualAddrSerialNumber)">
            <summary>
            Implements the operator == (equal).
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
             <c>true</c> if the specified <see cref="T:Knx.Bus.Common.DomainAddrIndividualAddrSerialNumber"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.DomainAddrIndividualAddrSerialNumber.op_Inequality(Knx.Bus.Common.DomainAddrIndividualAddrSerialNumber,Knx.Bus.Common.DomainAddrIndividualAddrSerialNumber)">
            <summary>
            Implements the operator != (not equal).
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:Knx.Bus.Common.DomainAddrIndividualAddrSerialNumber"/> is not equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.DomainAddrIndividualAddrSerialNumber.CompareTo(Knx.Bus.Common.DomainAddrIndividualAddrSerialNumber)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has the following meanings: 
            Value Meaning Less than zero: This object is less than the <paramref name="other"/> parameter. 
            Zero: This object is equal to <paramref name="other"/>. Greater than zero: This object is greater than <paramref name="other"/>. 
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Knx.Bus.Common.DomainAddrIndividualAddrSerialNumber.Equals(Knx.Bus.Common.DomainAddrIndividualAddrSerialNumber)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Knx.Bus.Common.DomainAddrIndividualAddrSerialNumber.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Knx.Bus.Common.DomainAddrIndividualAddrSerialNumber.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:Knx.Bus.Common.DomainAndIndividualAddress">
            <summary>
            Represents the individual address and the domain address of a KNX device.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.DomainAndIndividualAddress.#ctor(Knx.Bus.Common.IndividualAddress,Knx.Bus.Common.DomainAddress)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.DomainAndIndividualAddress"/> class.
            </summary>
            <param name="individualAddress">The individual address.</param>
            <param name="domainAddress">The domain address.</param>
        </member>
        <member name="M:Knx.Bus.Common.DomainAndIndividualAddress.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.DomainAndIndividualAddress.#ctor(Knx.Bus.Common.IndividualAddress)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.DomainAndIndividualAddress"/> class.
            </summary>
            <param name="individualAddress">The individual address.</param>
        </member>
        <member name="P:Knx.Bus.Common.DomainAndIndividualAddress.DomainAddress">
            <summary>
            Gets the <see cref="T:Knx.Bus.Common.DomainAddress"/>.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.DomainAndIndividualAddress.IndividualAddress">
            <summary>
            Gets the <see cref="T:Knx.Bus.Common.IndividualAddress"/>.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.DomainAndIndividualAddress.Equals(Knx.Bus.Common.DomainAndIndividualAddress)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Knx.Bus.Common.DomainAndIndividualAddress.CompareTo(Knx.Bus.Common.DomainAndIndividualAddress)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A value that indicates the relative order of the objects being compared. 
            The return value has the following meanings: 
            Value Meaning Less than zero: This object is less than the <paramref name="other"/> parameter. Zero: This object is equal to <paramref name="other"/>.
            Greater than zero: This object is greater than <paramref name="other"/>. 
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Knx.Bus.Common.DomainAndIndividualAddress.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Knx.Bus.Common.DomainAndIndividualAddress.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Knx.Bus.Common.DomainAndIndividualAddress.op_Equality(Knx.Bus.Common.DomainAndIndividualAddress,Knx.Bus.Common.DomainAndIndividualAddress)">
            <summary>
            Implements the operator == (equal).
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:Knx.Bus.Common.DomainAndIndividualAddress"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.DomainAndIndividualAddress.op_Inequality(Knx.Bus.Common.DomainAndIndividualAddress,Knx.Bus.Common.DomainAndIndividualAddress)">
            <summary>
            Implements the operator != (not equal).
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            <c>true</c> if the specified <see cref="T:Knx.Bus.Common.DomainAndIndividualAddress"/> is not equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Knx.Bus.Common.IProtectedDataProvider">
            <summary>
            To avoid holding sensitive information in plain in memory, a data protection service implementing this interface
            is used.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.IProtectedDataProvider.Protect(System.Byte[],System.Byte[])">
            <summary>
            Encrypts the data in a specified byte array and returns a byte array that contains the encrypted data.
            </summary>
            <param name="userData">A byte array that contains data to encrypt.</param>
            <param name="entropy">An optional additional byte array used to increase the complexity of the encryption</param>
            <returns>A byte array representing the encrypted data.</returns>
        </member>
        <member name="M:Knx.Bus.Common.IProtectedDataProvider.Unprotect(System.Byte[],System.Byte[])">
            <summary>
            Decrypts the data in a specified byte array and returns a byte array that contains the decrypted data.
            </summary>
            <param name="encryptedData"> A byte array containing data encrypted using the IProtectedDataProvider.Protect(System.Byte[],System.Byte[]) method.
            </param>
            <param name="entropy">An additional byte array that was used to encrypt the data,</param>
            <returns>A byte array representing the decrypted data.</returns>
        </member>
        <member name="T:Knx.Bus.Common.EncryptedBuffer">
            <inheritdoc />
            <summary>
            This class stores sensitive data (e.g. a password hash) encrypted in memory
            </summary>
            <example>
              <code lang="cs" source="..\DocumentationSamples\BusSamples.cs" region="Decode EncryptedBuffer" />
            </example>
        </member>
        <member name="M:Knx.Bus.Common.EncryptedBuffer.RegisterProtectedDataProvider(Knx.Bus.Common.IProtectedDataProvider)">
            <summary>
            If your environment supports some sort of data protection e.g. by hardware or in kernel memory, a suitable
            provider should be implemented and registered using this method.
            </summary>
            <remarks>
            On Windows the DPAPI is used by default. Other platforms do not have a standard data protection API available so you should
            supply your own.
            The provider has to be registered before accessing anything related to KNX data security or KNX IP security.
            </remarks>
            <param name="protectedDataProvider">The data protection provider</param>
        </member>
        <member name="M:Knx.Bus.Common.EncryptedBuffer.#ctor(System.Byte[])">
            <summary>
            EncryptedBuffer
            </summary>
            <param name="buffer">the buffer to be encrypted</param>
        </member>
        <member name="P:Knx.Bus.Common.EncryptedBuffer.Length">
            <summary>
            Returns the length of the buffer
            </summary>
            <returns>The buffer length</returns>
        </member>
        <member name="M:Knx.Bus.Common.EncryptedBuffer.Decrypt">
            <summary>
            Decrypts the data. The returned object shall be disposed as soon as possible.
            </summary>
            <returns>The decrypted data</returns>
            <example>
              <code lang="cs" source="..\DocumentationSamples\BusSamples.cs" region="Decode EncryptedBuffer"/>
            </example>
        </member>
        <member name="M:Knx.Bus.Common.EncryptedBuffer.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Knx.Bus.Common.EncryptedBuffer.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Knx.Bus.Common.EncryptedBuffer.Equals(Knx.Bus.Common.EncryptedBuffer)">
            <inheritdoc/>
        </member>
        <member name="T:Knx.Bus.Common.Exceptions.BusDataFlowException">
            <summary>
            This is the abstract base class for most KNX Falcon exceptions.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Exceptions.BusDataFlowException.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
            <PermissionSet>
              <IPermission class="System.Security.Permissions.FileIOPermission, mscorlib, Version=2.0.3600.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" version="1" PathDiscovery="*AllFiles*"/>
              </PermissionSet>
        </member>
        <member name="M:Knx.Bus.Common.Exceptions.BusDataFlowException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="T:Knx.Bus.Common.Exceptions.CommunicationException">
            <summary>
            This exception is thrown when communication errors are detected. For a list of reasons, see <see cref="T:Knx.Bus.Common.Exceptions.CommunicationException.Reason"/>
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Exceptions.CommunicationException.Reason">
            <summary>
            The enum describes reasons of the communication problems. 
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.Exceptions.CommunicationException.Reason.ReadingNonExistingOrProtectedResource">
            <summary>
            Trying to read non-existing or protected resource (memory or property).
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.Exceptions.CommunicationException.Reason.VerifyFailed">
            <summary>
            Read data is not equal to written data.
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.Exceptions.CommunicationException.Reason.NonMatchingObjectOrProperty">
            <summary>
            The Object or property does not match to the requested one.
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.Exceptions.CommunicationException.Reason.InvalidByteCount">
            <summary>
            The received response has an invalid byte count.
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.Exceptions.CommunicationException.Reason.Emi1ConversionError">
            <summary>
            The telegram is not convertible to/from EMI1.
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.Exceptions.CommunicationException.Reason.InvalidResponse">
            <summary>
            A response has been received which does not match to the request sent.
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.Exceptions.CommunicationException.Reason.InsufficientMaxApduLength">
            <summary>
            The Max APDU length is not sufficient for the requested service.
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.Exceptions.CommunicationException.Reason.ResourceDoesNotExist">
            <summary>
            The accessed resource does not exist.
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.Exceptions.CommunicationException.Reason.ResourceIsReadOnly">
            <summary>
            The accessed resource is read-only.
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.Exceptions.CommunicationException.Reason.ResourceIsWriteOnly">
            <summary>
            The accessed resource is write-only.
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.Exceptions.CommunicationException.Reason.ResourceAccessDenied">
            <summary>
            Access to the resource is not authorized.
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.Exceptions.CommunicationException.Reason.TemporarilyUnavailable">
            <summary>
            The resource is temporarily unavailable.
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.Exceptions.CommunicationException.Reason.MemoryError">
            <summary>
            Memory cannot be accessed or only with faults.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Exceptions.CommunicationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="P:Knx.Bus.Common.Exceptions.CommunicationException.ErrorReason">
            <summary>
            Gets the <see cref="T:Knx.Bus.Common.Exceptions.CommunicationException.Reason"/> causing this exception.
            </summary>
            <value>
            The error reason.
            </value> 
        </member>
        <member name="P:Knx.Bus.Common.Exceptions.CommunicationException.DeviceReturnCode">
            <summary>
            Gets the return code as reported by the device (if supported).
            </summary>
            <value>
            The return code.
            </value> 
        </member>
        <member name="T:Knx.Bus.Common.Exceptions.ConnectionException">
            <summary>
            The exception raised when a device connection causes an error.  For a list of reasons, see <see cref="T:Knx.Bus.Common.Exceptions.ConnectionException.Reason"/>.
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Exceptions.ConnectionException.Reason">
            <summary>
            The error reason giving detailed description about the error.
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.Exceptions.ConnectionException.Reason.NotConnected">
            <summary>The connection was not established.</summary>
        </member>
        <member name="F:Knx.Bus.Common.Exceptions.ConnectionException.Reason.AutoDisconnected">
            <summary>The connection was automatically disconnected after transport layer timeout.</summary>
        </member>
        <member name="F:Knx.Bus.Common.Exceptions.ConnectionException.Reason.ConnectionToDeviceDeviceAlreadyExists">
            <summary>Another connection to the same device already exists.</summary>
        </member>
        <member name="F:Knx.Bus.Common.Exceptions.ConnectionException.Reason.ConnectionRefused">
            <summary>The connection was actively refused by the target device.</summary>
        </member>
        <member name="F:Knx.Bus.Common.Exceptions.ConnectionException.Reason.ConnectionTypeIsNotSuppported">
            <summary>The requested connection type is not supported.</summary>
        </member>
        <member name="F:Knx.Bus.Common.Exceptions.ConnectionException.Reason.ConnectionOptionIsNotSupported">
            <summary>One or more requested connection options are not supported.</summary>
        </member>
        <member name="F:Knx.Bus.Common.Exceptions.ConnectionException.Reason.NoMoreConnections">
            <summary>The device cannot accept the new data connection because its maximum amount of concurrent connections is already used.</summary>
        </member>
        <member name="F:Knx.Bus.Common.Exceptions.ConnectionException.Reason.AlreadyConnected">
            <summary>The connection is already established</summary>
        </member>
        <member name="F:Knx.Bus.Common.Exceptions.ConnectionException.Reason.ServiceNotSupportedUnexpectedly">
            <summary>The device unexpectedly does not respond to a service request.</summary>
        </member>
        <member name="M:Knx.Bus.Common.Exceptions.ConnectionException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="P:Knx.Bus.Common.Exceptions.ConnectionException.ErrorReason">
            <summary>
            Gets the <see cref="T:Knx.Bus.Common.Exceptions.ConnectionException.Reason"/> causing this exception.
            </summary>
            <value>
            The error reason.
            </value>
        </member>
        <member name="T:Knx.Bus.Common.Exceptions.ConnectorException">
            <summary>
            This exception is thrown when the bus connector (interface) detects an error.  For a list of reasons, see <see cref="T:Knx.Bus.Common.Exceptions.ConnectorException.Reason"/>
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Exceptions.ConnectorException.Reason">
            <summary>
            The enum describes reasons of bus connector problems. 
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.Exceptions.ConnectorException.Reason.DeviceNotFound">
            <summary>The interface device cannot be found.</summary>
        </member>
        <member name="F:Knx.Bus.Common.Exceptions.ConnectorException.Reason.DeviceAlreadyOpened">
            <summary>The interface device has already been opened.</summary>
        </member>
        <member name="F:Knx.Bus.Common.Exceptions.ConnectorException.Reason.AlreadyOpenedInDifferentMode">
            <summary>The interface device has already been opened in a different mode.</summary>
        </member>
        <member name="F:Knx.Bus.Common.Exceptions.ConnectorException.Reason.ModeNotSupported">
            <summary>The interface device does not support the requested mode.</summary>
        </member>
        <member name="F:Knx.Bus.Common.Exceptions.ConnectorException.Reason.OpenParametersNotUnique">
            <summary>This reason occurs when an open parameter did not match, 
            e.g. opening an USB device with IA=1.1.255 but no or more than one device with IA 1.1.255 is connected. </summary>
        </member>
        <member name="F:Knx.Bus.Common.Exceptions.ConnectorException.Reason.ModeDoesNotAllowShare">
            <summary>The connector cannot be shared; e.g. Raw or local TL do not allow sharing.</summary>
        </member>
        <member name="F:Knx.Bus.Common.Exceptions.ConnectorException.Reason.DeviceCurrentlyNotAvailable">
            <summary>The interface device can currently not be opened, e.g. it may be in use by another operation or client.</summary>
        </member>
        <member name="F:Knx.Bus.Common.Exceptions.ConnectorException.Reason.CannotOpenExclusiveBecauseAlreadyOpened">
            <summary>The interface device cannot be opened exclusively, because it is already open.</summary>
        </member>
        <member name="F:Knx.Bus.Common.Exceptions.ConnectorException.Reason.ConnectorNotOpened">
            <summary>A method has been called which requires the connector to be already opened in advance.</summary>
        </member>
        <member name="F:Knx.Bus.Common.Exceptions.ConnectorException.Reason.LocalServiceNotSupported">
            <summary>Trying to write a service not supported by the interface.</summary>
        </member>
        <member name="F:Knx.Bus.Common.Exceptions.ConnectorException.Reason.NotConnectedToTheBus">
            <summary>The interface can be accessed from the PC but is not connected to the KNX bus.</summary>
        </member>
        <member name="F:Knx.Bus.Common.Exceptions.ConnectorException.Reason.ConnectionTypeIsNotSuppported">
            <summary>The requested connection type is not supported.</summary>
        </member>
        <member name="F:Knx.Bus.Common.Exceptions.ConnectorException.Reason.ConnectionOptionIsNotSupported">
            <summary>One or more requested connection options are not supported.</summary>
        </member>
        <member name="F:Knx.Bus.Common.Exceptions.ConnectorException.Reason.NoMoreConnections">
            <summary>The interface device cannot accept the new data connection because its maximum amount of concurrent connections is already used.</summary>
        </member>
        <member name="F:Knx.Bus.Common.Exceptions.ConnectorException.Reason.DeviceNotRespond">
            <summary>The interface device does not respond in expected time.</summary>
        </member>
        <member name="F:Knx.Bus.Common.Exceptions.ConnectorException.Reason.ConnectionRefused">
            <summary>The connection was actively refused by the target interface device.</summary>
        </member>
        <member name="F:Knx.Bus.Common.Exceptions.ConnectorException.Reason.AddressFamilyNotSupported">
            <summary>The address family specified is not supported, e.g. is not installed on the local machine.</summary>
        </member>
        <member name="F:Knx.Bus.Common.Exceptions.ConnectorException.Reason.AddressAlreadyInUse">
            <summary>The given tunneling individual address is currently already in use.</summary>
        </member>
        <member name="F:Knx.Bus.Common.Exceptions.ConnectorException.Reason.AddressNotAvailable">
            <summary>Setting the local individual address failed, because the original IA is not found as device address.</summary>
        </member>
        <member name="F:Knx.Bus.Common.Exceptions.ConnectorException.Reason.NetworkDownOrNotAvailable">
            <summary>The network is not available or no route to the remote host exists.</summary>
        </member>
        <member name="F:Knx.Bus.Common.Exceptions.ConnectorException.Reason.HostNotFoundOrUnreachable">
            <summary>No such host is known or there is no network route to the specified host.</summary>
        </member>
        <member name="F:Knx.Bus.Common.Exceptions.ConnectorException.Reason.AlreadyOpenedExclusive">
            <summary>A connection has already been opened with exclusive access.</summary>
        </member>
        <member name="F:Knx.Bus.Common.Exceptions.ConnectorException.Reason.NoMoreUniqueConnections">
            <summary>The interface device cannot accept the new data connection because there are connections available but no more unique address can be assigned.</summary>
        </member>
        <member name="F:Knx.Bus.Common.Exceptions.ConnectorException.Reason.LocalServicesNotSupported">
            <summary>The connection does not support local device management services.</summary>
        </member>
        <member name="F:Knx.Bus.Common.Exceptions.ConnectorException.Reason.ServerValidationFailed">
            <summary>A secure connection cannot be established since the DeviceAuthenticationCode sent by the target could not be validated by the client.</summary>
        </member>
        <member name="F:Knx.Bus.Common.Exceptions.ConnectorException.Reason.UserLoginFailed">
            <summary>A secure connection cannot be established since the provided UserId and/or Password (hash) are not accepted by the target device.</summary>
        </member>
        <member name="F:Knx.Bus.Common.Exceptions.ConnectorException.Reason.ReceivedInvalidFrame">
            <summary>A secure connection cannot be established since an invalid SESSION_RESPONSE or a SESSION_STATUS frame was received. (Invalid frame means e.g. invalid length of public key, invalid length of frame, invalid field value.)</summary>
        </member>
        <member name="F:Knx.Bus.Common.Exceptions.ConnectorException.Reason.NoTunnelingAddress">
            <summary>The requested address is not available for tunneling.</summary>
        </member>
        <member name="F:Knx.Bus.Common.Exceptions.ConnectorException.Reason.NotAuthorized">
            <summary>The Client is not authorized to use the requested IA in the Extended CRI.</summary>
        </member>
        <member name="F:Knx.Bus.Common.Exceptions.ConnectorException.Reason.UnknownErrorFromServer">
            <summary>Unknown error from server.</summary>
        </member>
        <member name="M:Knx.Bus.Common.Exceptions.ConnectorException.#ctor(System.String,Knx.Bus.Common.ConnectorTypes,Knx.Bus.Common.Exceptions.ConnectorException.Reason)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Exceptions.ConnectorException"/> class.
            </summary>
            <param name="message">The message.</param>
            <param name="type">The connector types <see cref="T:Knx.Bus.Common.ConnectorTypes"/>.</param>
            <param name="reason">The reason <see cref="T:Knx.Bus.Common.Exceptions.ConnectorException.Reason"/>.</param>
        </member>
        <member name="M:Knx.Bus.Common.Exceptions.ConnectorException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="P:Knx.Bus.Common.Exceptions.ConnectorException.ErrorReason">
            <summary>
            Gets the <see cref="T:Knx.Bus.Common.Exceptions.ConnectorException.Reason"/> causing this exception.
            </summary>
            <value>
            The error reason.
            </value> 
        </member>
        <member name="P:Knx.Bus.Common.Exceptions.ConnectorException.Type">
            <summary>
            Gets the type of the bus connector, see also <see cref="T:Knx.Bus.Common.ConnectorTypes"/>.
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Exceptions.InvalidTelegramException">
            <summary>
            The exception raised when the received telegram is not correct, e.g. has not the correct length.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Exceptions.InvalidTelegramException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="T:Knx.Bus.Common.Exceptions.NoResponseReceivedException">
            <summary>
            This exception is thrown when an expected response is not received.  For a list of reasons, see <see cref="T:Knx.Bus.Common.Exceptions.NoResponseReceivedException.Reason"/>
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Exceptions.NoResponseReceivedException.Reason">
            <summary>
            The enum describes the reasons of this exception.  
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.Exceptions.NoResponseReceivedException.Reason.Confirmation">
            <summary>
            No confirmation is received for the telegram.
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.Exceptions.NoResponseReceivedException.Reason.NegativeConfirmation">
            <summary>
            A negative confirmation is received for the telegram.
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.Exceptions.NoResponseReceivedException.Reason.Indication">
            <summary>
            No response is received for the telegram.
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.Exceptions.NoResponseReceivedException.Reason.TAck">
            <summary>
            No T_Ack is received for the telegram.
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.Exceptions.NoResponseReceivedException.Reason.MPropRead">
            <summary>
            An error reading MProp has occurred.
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.Exceptions.NoResponseReceivedException.Reason.LocalMemoryRead">
            <summary>
            An error reading local memory has occurred. 
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Exceptions.NoResponseReceivedException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <inheritdoc />
        </member>
        <member name="P:Knx.Bus.Common.Exceptions.NoResponseReceivedException.ErrorReason">
            <summary>
            Gets the error reason causing this exception <see cref="T:Knx.Bus.Common.Exceptions.NoResponseReceivedException.Reason"/>.
            </summary>
            <value>
            The error reason.
            </value> 
        </member>
        <member name="T:Knx.Bus.Common.Exceptions.VerifyDataMismatchException">
            <summary>
            The exception raised when verifying the data causes an error, for example data mismatch or no data is returned. 
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.FrameType">
            <summary>
            Represents the frame type.
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.FrameType.ExtendedFrame">
            <summary>
            Extended frame, which enables frames with a data length up to 255 octets.
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.FrameType.StandardFrame">
            <summary>
            Standard frame format.
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.FunctionPropertyResult">
            <summary>
            The function property class represents the result information of function property operations
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.FunctionPropertyResult.ToString">
            <inheritdoc/>
        </member>
        <member name="P:Knx.Bus.Common.FunctionPropertyResult.CommandData">
            <summary>
            Gets the encapsulated byte array holding the data retrieved from the target device.
            </summary>
            <value>
            The output data.
            </value>  
        </member>
        <member name="P:Knx.Bus.Common.FunctionPropertyResult.ReturnCode">
            <summary>
            Gets the return code send by the target device. Values &lt;= 0x7F indicate success, values &gt;= 0x80 indicate failure. 
            </summary>
            <value>
            The return code.
            </value>  
        </member>
        <member name="T:Knx.Bus.Common.GroupAddress">
            <summary>
            Represents a KNX group address.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.GroupAddress.DefaultStringFormat">
            <summary>
            Gets or sets the DefaultStringFormat.
            </summary>
            <value>
            The DefaultStringFormat.
            </value>
        </member>
        <member name="M:Knx.Bus.Common.GroupAddress.#ctor(System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.GroupAddress"/> struct.
            </summary>
            <param name="address">The address.</param>
        </member>
        <member name="P:Knx.Bus.Common.GroupAddress.Address">
            <summary>
            Gets the group address.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.GroupAddress.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.GroupAddress"/> struct.
            </summary>
            <param name="addressString">The group address</param>
        </member>
        <member name="M:Knx.Bus.Common.GroupAddress.op_Implicit(System.UInt16)~Knx.Bus.Common.GroupAddress">
            <summary>
            Performs an implicit conversion from <see cref="T:System.UInt16"/> to <see cref="T:Knx.Bus.Common.GroupAddress"/>.
            </summary>
            <param name="address">The group address.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.GroupAddress.op_Implicit(Knx.Bus.Common.GroupAddress)~System.UInt16">
            <summary>
            Performs an implicit conversion from <see cref="T:Knx.Bus.Common.GroupAddress"/> to <see cref="T:System.UInt16"/>.
            </summary>
            <param name="address">The group address.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.GroupAddress.op_Implicit(System.String)~Knx.Bus.Common.GroupAddress">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Knx.Bus.Common.GroupAddress"/>.
            </summary>
            <param name="addressString">The group address.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.GroupAddress.op_Implicit(Knx.Bus.Common.GroupAddress)~System.String">
            <summary>
            Performs an implicit conversion from <see cref="T:Knx.Bus.Common.GroupAddress"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="address">The group address.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.GroupAddress.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.GroupAddress.TryParse(System.String,Knx.Bus.Common.GroupAddress@)">
            <summary>
            Parse a group address as string into a GroupAddress object.
            </summary>
            <param name="addressString">The group address as string.</param>
            <param name="groupAddress">The GroupAddress object.</param>
            <returns>true if it is possible to parse the group address string into GroupAddress; otherwise, false.</returns>
        </member>
        <member name="M:Knx.Bus.Common.GroupAddress.Equals(Knx.Bus.Common.GroupAddress)">
            <summary>
            Indicates whether the current GroupAddress object is equal to another object of the same type.
            </summary>
            <param name="other">A GroupAddress object to compare with this object.</param>
            <returns>
            true if the current object is equal to the other parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.GroupAddress.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.GroupAddress.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.GroupAddress.op_GreaterThanOrEqual(Knx.Bus.Common.GroupAddress,Knx.Bus.Common.GroupAddress)">
            <summary>
            Implements the operator &gt;=.
            </summary>
            <param name="left">The first group address to compare with.</param>
            <param name="right">The second group address to compare with.</param>
            <returns>
            true if the left group address is greater or equal than the right group address; otherwise, false.
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.GroupAddress.op_LessThanOrEqual(Knx.Bus.Common.GroupAddress,Knx.Bus.Common.GroupAddress)">
            <summary>
            Implements the operator &lt;=.
            </summary>
            <param name="left">The first group address to compare with.</param>
            <param name="right">The second group address to compare with.</param>
            <returns>
            true if the left group address is smaller or equal than the right group address; otherwise, false.
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.GroupAddress.op_GreaterThan(Knx.Bus.Common.GroupAddress,Knx.Bus.Common.GroupAddress)">
            <summary>
            Implements the operator &gt;.
            </summary>
            <param name="left">The first group address to compare with.</param>
            <param name="right">The second group address to compare with.</param>
            <returns>
            true if the left group address is greater than the right group address; otherwise, false.
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.GroupAddress.op_LessThan(Knx.Bus.Common.GroupAddress,Knx.Bus.Common.GroupAddress)">
            <summary>
            Implements the operator &lt;.
            </summary>
            <param name="left">The first group address to compare with.</param>
            <param name="right">The second group address to compare with.</param>
            <returns>
            true if the left group address is smaller than the right group address; otherwise, false.
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.GroupAddress.op_Equality(Knx.Bus.Common.GroupAddress,Knx.Bus.Common.GroupAddress)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The first group address to compare with.</param>
            <param name="right">The second group address to compare with.</param>
            <returns>
            true if the left group address is equal to the right group address; otherwise, false.
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.GroupAddress.op_Inequality(Knx.Bus.Common.GroupAddress,Knx.Bus.Common.GroupAddress)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The first group address to compare with.</param>
            <param name="right">The second group address to compare with.</param>
            <returns>
            true if the left group address is not equal to the right group address; otherwise, false.
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.GroupAddress.ToString(System.String,System.IFormatProvider)">
            <summary>
            Converts the group address value to its equivalent string representation using the specified format string.
            </summary>
            <param name="format">The format string to be used for formatting the group address value. See remarks section for valid format strings.</param>
            <param name="formatProvider">The format provider is not supported and can be null.</param>
            <returns>Returns the group address value converted to its equivalent string representation.</returns>
            <remarks><b>This method is used by <see cref="M:System.String.Format(System.String,System.Object)"/> by using formatting instructions e.g. "{0:G3}" The following format strings are valid:</b>
            <list type="bullet">
              <item>
                <b>"G3":</b> a three level group address string is created in the form '&lt;main&gt;/&lt;middle&gt;/&lt;sub&gt;'
              </item>
              <item>
                <b>"G2":</b> a two level group address string is created in the form '&lt;main&gt;/&lt;sub&gt;'
              </item>
              <item>
                <b>"G1":</b> a free group address string is created in its numeric representation.
              </item>
              <item>
                <b>"X":</b> a free group address string is created in its hexadecimal representation using upper-case letters. The returned string is always filled up with leading zeros.
              </item>
              <item>
                <b>"x":</b> a free group address string is created in its hexadecimal representation using lower-case letters. The returned string is always filled up with leading zeros.
              </item>
              <item>
                  <b>null</b>: a free group address string is created in its numeric representation. This is the default behaviour.
              </item>
            </list>
            </remarks>
        </member>
        <member name="M:Knx.Bus.Common.GroupAddress.ToString(System.String)">
            <summary>
            Converts the group address value to its equivalent string representation using the specified format string.
            </summary>
            <param name="format">The format string to be used for formatting the group address value. See remarks section for valid format strings.</param>
            <returns>Returns the group address value converted to its equivalent string representation.</returns>
            <remarks><b>The following format strings are valid:</b>
            <list type="bullet">
              <item>
                <b>"G3":</b> a three level group address string is created in the form '&lt;main&gt;/&lt;middle&gt;/&lt;sub&gt;'
              </item>
              <item>
                <b>"G2":</b> a two level group address string is created in the form '&lt;main&gt;/&lt;sub&gt;'
              </item>
              <item>
                <b>"G1":</b> a free group address string is created in its numeric representation.
              </item>
              <item>
                <b>"X":</b> a free group address string is created in its hexadecimal representation using upper-case letters. The returned string is always filled up with leading zeros.
              </item>
              <item>
                <b>"x":</b> a free group address string is created in its hexadecimal representation using lower-case letters. The returned string is always filled up with leading zeros.
              </item>
              <item>
                  <b>null</b>: a free group address string is created in its numeric representation. This is the default behaviour.
              </item>
            </list>
            </remarks>
        </member>
        <member name="M:Knx.Bus.Common.GroupAddress.Parse(System.String)">
            <summary>
            Parse the specified group address into a GroupAddress object.
            </summary>
            <param name="addressString">The group address string.</param>
            <returns>The GroupAddress object</returns>
        </member>
        <member name="T:Knx.Bus.Common.GroupAddressTypeConverter">
            <summary>
            TypeConverter for <see cref="T:Knx.Bus.Common.GroupAddress"/>.
            </summary>
            <remarks>Converts <see cref="T:Knx.Bus.Common.GroupAddress"/> from and to UInt16 and String.</remarks>
        </member>
        <member name="M:Knx.Bus.Common.GroupAddressTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Knx.Bus.Common.GroupAddressTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Knx.Bus.Common.GroupAddressTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Knx.Bus.Common.GroupAddressTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Knx.Bus.Common.GroupValueEventArgs">
            <summary>
            This class provides all information about group value events, e.g. receiving and sending group addresses. 
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.GroupValueEventArgs.#ctor(Knx.Bus.Common.IndividualAddress,Knx.Bus.Common.GroupAddress,Knx.Bus.Common.GroupValues.GroupValue,Knx.Bus.Common.Priority,Knx.Bus.Common.APci,System.Boolean,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.GroupValueEventArgs"/> class.
            </summary>
            <param name="individualAddress">The individual address of the sender <see cref="P:Knx.Bus.Common.GroupValueEventArgs.IndividualAddress"/>.</param>
            <param name="groupAddress">The group address <see cref="T:Knx.Bus.Common.GroupAddress"/>.</param>
            <param name="groupValue">The value of the group address<see cref="T:Knx.Bus.Common.GroupValues.GroupValue"/>.</param>
            <param name="priority">The priority of the telegram<see cref="T:Knx.Bus.Common.Priority"/>.</param>
            <param name="apci">The APCI of the telegram (one of <see cref="F:Knx.Bus.Common.APci.APciGroupValueRead"/>, <see cref="F:Knx.Bus.Common.APci.APciGroupValueResponse"/> or <see cref="F:Knx.Bus.Common.APci.APciGroupValueWrite"/>).</param>
            <param name="isSecure">Secure flag</param>
            <param name="isConfirmation">true if this is a LL confirmation of a sent telegram</param>
        </member>
        <member name="P:Knx.Bus.Common.GroupValueEventArgs.Apci">
            <summary>
            Gets the <see cref="T:Knx.Bus.Common.APci"/> of the telegram (one of <see cref="F:Knx.Bus.Common.APci.APciGroupValueRead"/>, <see cref="F:Knx.Bus.Common.APci.APciGroupValueResponse"/> or <see cref="F:Knx.Bus.Common.APci.APciGroupValueWrite"/>).
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.GroupValueEventArgs.TelegramPriority">
            <summary>
            Gets the <see cref="T:Knx.Bus.Common.Priority"/> of the telegram.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.GroupValueEventArgs.Value">
            <summary>
            Gets the value of the group address if applicable, see also <see cref="T:Knx.Bus.Common.GroupValues.GroupValue"/>.
            </summary>
            <remarks>
            For received telegrams with up to 6 bits of data, the value will be of type <see cref="T:Knx.Bus.Common.GroupValues.SixBit"/> because there is no way
            to derive the number of valid bits from the KNX frame.
            If <see cref="P:Knx.Bus.Common.GroupValueEventArgs.IsRead"/> is <c>true</c>, this property is <c>null</c>
            </remarks>
        </member>
        <member name="P:Knx.Bus.Common.GroupValueEventArgs.Address">
            <summary>
            Gets the target <see cref="T:Knx.Bus.Common.GroupAddress"/>.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.GroupValueEventArgs.IndividualAddress">
            <summary>
            Gets the <see cref="P:Knx.Bus.Common.GroupValueEventArgs.IndividualAddress"/> of the sender.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.GroupValueEventArgs.IsSecure">
            <summary>
            Gets a flag designating if the group message was encrypted using KNX data security.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.GroupValueEventArgs.IsConfirmation">
            <summary>
            Returns <c>true</c> if this is a link layer confirmation of a sent telegram
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.GroupValueEventArgs.IsResponse">
            <summary>
            Returns <c>true</c> if this is a value response
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.GroupValueEventArgs.IsWrite">
            <summary>
            Returns <c>true</c> if this is a value write
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.GroupValueEventArgs.IsRead">
            <summary>
            Returns <c>true</c> if this is a value read
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.GroupValues.FourBit">
            <summary>
            Represents a four bit value of a KNX <see cref="T:Knx.Bus.Common.GroupAddress"/>.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.GroupValues.FourBit.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.GroupValues.FourBit"/> struct.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Knx.Bus.Common.GroupValues.FourBit.op_Implicit(System.Int32)~Knx.Bus.Common.GroupValues.FourBit">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Int32"/> to <see cref="T:Knx.Bus.Common.GroupValues.FourBit"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.GroupValues.FourBit.op_Implicit(Knx.Bus.Common.GroupValues.FourBit)~System.Byte">
            <summary>
            Performs an implicit conversion from <see cref="T:Knx.Bus.Common.GroupValues.FourBit"/> to <see cref="T:System.Byte"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.GroupValues.FourBit.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Knx.Bus.Common.GroupValues.GroupValue">
            <summary>
            Represents the value of a KNX group address <see cref="T:Knx.Bus.Common.GroupAddress"/>.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.GroupValues.GroupValue.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Knx.Bus.Common.GroupValues.GroupValue.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.GroupValues.GroupValue"/> class with a 1 bit value.
            </summary>
            <param name="value">The 1 bit value <see cref="T:System.Boolean"/></param>
        </member>
        <member name="M:Knx.Bus.Common.GroupValues.GroupValue.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.GroupValues.GroupValue"/> class with an 8 bit value.
            </summary>
            <param name="value">The 8 bit value <see cref="T:System.Byte"/>.</param>
        </member>
        <member name="M:Knx.Bus.Common.GroupValues.GroupValue.#ctor(Knx.Bus.Common.GroupValues.TwoBit)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.GroupValues.GroupValue"/> class with a 2 bit value.
            </summary>
            <param name="value">The 2 bit value <see cref="T:Knx.Bus.Common.GroupValues.TwoBit"/>.</param>
        </member>
        <member name="M:Knx.Bus.Common.GroupValues.GroupValue.#ctor(Knx.Bus.Common.GroupValues.FourBit)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.GroupValues.GroupValue"/> class with a 4 bit value.
            </summary>
            <param name="value">The 4 bit value <see cref="T:Knx.Bus.Common.GroupValues.FourBit"/>.</param>
        </member>
        <member name="M:Knx.Bus.Common.GroupValues.GroupValue.#ctor(Knx.Bus.Common.GroupValues.SixBit)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.GroupValues.GroupValue"/> class with a 6 bit value.
            </summary>
            <param name="value">The 6 bit value <see cref="T:Knx.Bus.Common.GroupValues.SixBit"/>.</param>
        </member>
        <member name="M:Knx.Bus.Common.GroupValues.GroupValue.#ctor(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.GroupValues.GroupValue"/> class with a value of any size &gt;= 1 byte.
            </summary>
            <param name="value">The value as byte array.</param>
        </member>
        <member name="M:Knx.Bus.Common.GroupValues.GroupValue.op_Explicit(Knx.Bus.Common.GroupValues.GroupValue)~System.Boolean">
            <summary>
            Performs an explicit conversion from a 1 bit <see cref="T:Knx.Bus.Common.GroupValues.GroupValue"/> to <see cref="T:System.Boolean"/>.
            </summary>
            <param name="groupValue">The group value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.GroupValues.GroupValue.op_Explicit(Knx.Bus.Common.GroupValues.GroupValue)~Knx.Bus.Common.GroupValues.TwoBit">
            <summary>
            Performs an explicit conversion from a 2 bit <see cref="T:Knx.Bus.Common.GroupValues.GroupValue"/> to <see cref="T:Knx.Bus.Common.GroupValues.TwoBit"/>.
            </summary>
            <param name="groupValue">The group value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.GroupValues.GroupValue.op_Explicit(Knx.Bus.Common.GroupValues.GroupValue)~Knx.Bus.Common.GroupValues.FourBit">
            <summary>
            Performs an explicit conversion from a 4 bit <see cref="T:Knx.Bus.Common.GroupValues.GroupValue"/> to <see cref="T:Knx.Bus.Common.GroupValues.FourBit"/>.
            </summary>
            <param name="groupValue">The group value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.GroupValues.GroupValue.op_Explicit(Knx.Bus.Common.GroupValues.GroupValue)~Knx.Bus.Common.GroupValues.SixBit">
            <summary>
            Performs an explicit conversion from a 6 bit <see cref="T:Knx.Bus.Common.GroupValues.GroupValue"/> to <see cref="T:Knx.Bus.Common.GroupValues.SixBit"/>.
            </summary>
            <param name="groupValue">The group value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.GroupValues.GroupValue.op_Explicit(Knx.Bus.Common.GroupValues.GroupValue)~System.Byte">
            <summary>
            Performs an explicit conversion from an 8 bit <see cref="T:Knx.Bus.Common.GroupValues.GroupValue"/> to <see cref="T:System.Byte"/>.
            </summary>
            <param name="groupValue">The group value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.GroupValues.GroupValue.op_Explicit(Knx.Bus.Common.GroupValues.GroupValue)~System.UInt16">
            <summary>
            Performs an explicit conversion from a 2 byte integer <see cref="T:Knx.Bus.Common.GroupValues.GroupValue"/> to <see cref="T:System.UInt16"/>.
            </summary>
            <param name="groupValue">The group value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.GroupValues.GroupValue.op_Explicit(Knx.Bus.Common.GroupValues.GroupValue)~System.UInt32">
            <summary>
            Performs an explicit conversion from a 4 byte (or less) integer <see cref="T:Knx.Bus.Common.GroupValues.GroupValue"/> to <see cref="T:System.UInt32"/>.
            </summary>
            <param name="groupValue">The group value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.GroupValues.GroupValue.op_Explicit(Knx.Bus.Common.GroupValues.GroupValue)~System.UInt64">
            <summary>
            Performs an explicit conversion from an 8 byte (or less) integer <see cref="T:Knx.Bus.Common.GroupValues.GroupValue"/> to <see cref="T:System.UInt64"/>.
            </summary>
            <param name="groupValue">The group value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.GroupValues.GroupValue.op_Explicit(Knx.Bus.Common.GroupValues.GroupValue)~System.Single">
            <summary>
            Performs an explicit conversion from a 4 byte floating point <see cref="T:Knx.Bus.Common.GroupValues.GroupValue"/> to <see cref="T:System.Single"/>.
            </summary>
            <param name="groupValue">The group value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.GroupValues.GroupValue.op_Explicit(Knx.Bus.Common.GroupValues.GroupValue)~System.Double">
            <summary>
            Performs an explicit conversion from an 8 byte floating point <see cref="T:Knx.Bus.Common.GroupValues.GroupValue"/> to <see cref="T:System.Double"/>.
            </summary>
            <param name="groupValue">The group value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="P:Knx.Bus.Common.GroupValues.GroupValue.TypedValue">
            <summary>
            Gets the specified typed value, e.g. for a one bit value a boolean is returned.
            </summary>
            <remarks>
            Depending on <see cref="P:Knx.Bus.Common.GroupValues.GroupValue.SizeInBit"/>m the following is returned:
            <list type="table">
            <listheader><term>SizeInBit</term><term>Result</term></listheader>
            <item><term>1</term><term><see cref="T:System.Boolean"/></term></item>
            <item><term>2</term><term><see cref="T:Knx.Bus.Common.GroupValues.TwoBit"/></term></item>
            <item><term>4</term><term><see cref="T:Knx.Bus.Common.GroupValues.FourBit"/></term></item>
            <item><term>6</term><term><see cref="T:Knx.Bus.Common.GroupValues.SixBit"/></term></item>
            <item><term>8</term><term><see cref="T:System.Byte"/></term></item>
            <item><term>other</term><term>Array of <see cref="T:System.Byte"/></term></item>
            </list>
            </remarks>
        </member>
        <member name="P:Knx.Bus.Common.GroupValues.GroupValue.Value">
            <summary>
            Gets the group value as byte array.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.GroupValues.GroupValue.SizeInBit">
            <summary>
            Gets the size in bit from the group value, e.g. for a one bit group value 1 is returned.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.GroupValues.GroupValue.Equals(Knx.Bus.Common.GroupValues.GroupValue)">
            <summary>
            Indicates whether the current GroupValue object is equal to another object of the same type.
            </summary>
            <param name="other">A GroupValue object to compare with this object.</param>
            <returns>
            true if the current object is equal to the other parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.GroupValues.GroupValue.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.GroupValues.GroupValue.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.GroupValues.GroupValue.Parse(System.String)">
            <summary>
            Parse the specified group value into a GroupValue object.
            </summary>
            <param name="valueString">The group value string.</param>
            <returns>The GroupValue object</returns>
            <remarks>
            <para><paramref name="valueString"/> can be in one of the following formats:</para>
            <list type="table">
            <listheader><term>Input</term><term>Result</term><term>Examples</term></listheader>
            <item><term>"true"/"false" (case-insensitive)</term><term>1 bit group value</term><term>"false" "true"</term></item>
            <item><term>Integer between 0 and 3</term><term>2 bit group value as <see cref="T:Knx.Bus.Common.GroupValues.TwoBit"/></term><term>"2" "0x2"</term></item>
            <item><term>Integer between 4 and 15</term><term>4 bit group value as <see cref="T:Knx.Bus.Common.GroupValues.FourBit"/></term><term>"8" "$8"</term></item>
            <item><term>Integer between 16 and 63</term><term>6 bit group value as <see cref="T:Knx.Bus.Common.GroupValues.SixBit"/></term><term>"40" "0x28"</term></item>
            <item><term>Integer between 64 and 255</term><term>8 bit group value</term><term>"120" "$78"</term></item>
            <item><term>At least two hexadecimal bytes</term><term><see cref="T:Knx.Bus.Common.GroupValues.SixBit"/></term><term>"0x02 0x04"</term></item>
            </list>
            Hexadecimal values are denoted by a leading "0x" or "$".
            </remarks>
        </member>
        <member name="M:Knx.Bus.Common.GroupValues.GroupValue.TryParse(System.String,Knx.Bus.Common.GroupValues.GroupValue@)">
            <summary>
            Parse a group value as string into a GroupValue object.
            </summary>
            <param name="valueString">The group value as string.</param>
            <param name="groupValue">The GroupValue object.</param>
            <returns>true if it is possible to parse the group value string into GroupValue; otherwise, false.</returns>
            <remarks>
            <para><paramref name="valueString"/> can be in one of the following formats:</para>
            <list type="table">
            <listheader><term>Input</term><term>Result</term><term>Examples</term></listheader>
            <item><term>"true"/"false" (case-insensitive)</term><term>1 bit group value</term><term>"false" "true"</term></item>
            <item><term>Integer between 0 and 3</term><term>2 bit group value as <see cref="T:Knx.Bus.Common.GroupValues.TwoBit"/></term><term>"2" "0x2"</term></item>
            <item><term>Integer between 4 and 15</term><term>4 bit group value as <see cref="T:Knx.Bus.Common.GroupValues.FourBit"/></term><term>"8" "$8"</term></item>
            <item><term>Integer between 16 and 63</term><term>6 bit group value as <see cref="T:Knx.Bus.Common.GroupValues.SixBit"/></term><term>"40" "0x28"</term></item>
            <item><term>Integer between 64 and 255</term><term>8 bit group value</term><term>"120" "$78"</term></item>
            <item><term>At least two hexadecimal bytes</term><term><see cref="T:Knx.Bus.Common.GroupValues.SixBit"/></term><term>"0x02 0x04"</term></item>
            </list>
            Hexadecimal values are denoted by a leading "0x" or "$".
            </remarks>
        </member>
        <member name="M:Knx.Bus.Common.GroupValues.GroupValue.Clone">
            <inheritdoc />
        </member>
        <member name="T:Knx.Bus.Common.GroupValues.SixBit">
            <summary>
            Represents a six bit value of a KNX <see cref="T:Knx.Bus.Common.GroupAddress"/>.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.GroupValues.SixBit.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.GroupValues.SixBit"/> struct.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Knx.Bus.Common.GroupValues.SixBit.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.GroupValues.SixBit"/> struct.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Knx.Bus.Common.GroupValues.SixBit.op_Implicit(System.Int32)~Knx.Bus.Common.GroupValues.SixBit">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Int32"/> to <see cref="T:Knx.Bus.Common.GroupValues.SixBit"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.GroupValues.SixBit.op_Implicit(Knx.Bus.Common.GroupValues.SixBit)~System.Byte">
            <summary>
            Performs an implicit conversion from <see cref="T:Knx.Bus.Common.GroupValues.SixBit"/> to <see cref="T:System.Byte"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.GroupValues.SixBit.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Knx.Bus.Common.GroupValues.TwoBit">
            <summary>
            Represents a two bit value of a KNX <see cref="T:Knx.Bus.Common.GroupAddress"/>.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.GroupValues.TwoBit.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.GroupValues.TwoBit"/> struct.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="M:Knx.Bus.Common.GroupValues.TwoBit.op_Implicit(System.Int32)~Knx.Bus.Common.GroupValues.TwoBit">
            <summary>
            Performs an implicit conversion from <see cref="T:System.Int32"/> to <see cref="T:Knx.Bus.Common.GroupValues.TwoBit"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.GroupValues.TwoBit.op_Implicit(Knx.Bus.Common.GroupValues.TwoBit)~System.Byte">
            <summary>
            Performs an implicit conversion from <see cref="T:Knx.Bus.Common.GroupValues.TwoBit"/> to <see cref="T:System.Byte"/>.
            </summary>
            <param name="value">The value.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.GroupValues.TwoBit.ToString">
            <inheritdoc/>
        </member>
        <member name="T:Knx.Bus.Common.HidPath">
            <summary>
            Represents information about a HID path as returned by USB device enumeration.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.HidPath.Equals(Knx.Bus.Common.HidPath)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Knx.Bus.Common.HidPath.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <returns>
            true if <paramref name="obj"/> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
            <param name="obj">Another object to compare to. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Knx.Bus.Common.HidPath.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Knx.Bus.Common.HidPath.op_Equality(Knx.Bus.Common.HidPath,Knx.Bus.Common.HidPath)">
            <summary>
            Implements the operator == (equal).
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
             <c>true</c> if the specified <see cref="T:Knx.Bus.Common.HidPath"/> is  equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.HidPath.op_Inequality(Knx.Bus.Common.HidPath,Knx.Bus.Common.HidPath)">
            <summary>
            Implements the operator != (not equal).
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
             <c>true</c> if the specified <see cref="T:Knx.Bus.Common.HidPath"/> is not equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="P:Knx.Bus.Common.HidPath.Empty">
            <summary>
            Creates an empty default HidPath instance.
            </summary>
            <value>
            The empty default HidPath instance.
            </value>
        </member>
        <member name="P:Knx.Bus.Common.HidPath.VendorId">
            <summary>
            Gets the vendor ID.
            </summary>
            <value>
            The vendor ID.
            </value>
        </member>
        <member name="P:Knx.Bus.Common.HidPath.ProductId">
            <summary>
            Gets the product ID.
            </summary>
            <value>
            The product ID.
            </value>
        </member>
        <member name="P:Knx.Bus.Common.HidPath.Path">
            <summary>
            Gets the complete HID path.
            </summary>
            <value>
            The complete HID path.
            </value>
        </member>
        <member name="M:Knx.Bus.Common.HidPath.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.HidPath.System#IEquatable{Knx#Bus#Common#HidPath}#Equals(Knx.Bus.Common.HidPath)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the other parameter; otherwise, false.
            </returns>
        </member>
        <member name="P:Knx.Bus.Common.HidPath.Instance">
            <summary>
            Gets the instance identifier.
            </summary>
            <value>
            The instance identifier.
            </value>
        </member>
        <member name="M:Knx.Bus.Common.HidPath.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.HidPath" /> struct.
            </summary>
            <param name="hidPath">The hid path.</param>
            <exception cref="T:System.ArgumentException">hidPath</exception>
        </member>
        <member name="T:Knx.Bus.Common.ICustomBusDriver">
            <summary>
            Interface to be implemented by user-provided communication drivers.
            </summary>
            <remarks>
            <para>A user-provided communication driver is foreseen exclusively for situations where Falcon is used in an embedded device with
            specialized communication hardware not accessible by the built in USB or IP communication options (e.g. a TP/UART).</para>
            <para><b>Life cycle:</b><br/>
            <list type="bullet">
            <item>After successful construction, Falcon calls the <see cref="M:Knx.Bus.Common.ICustomBusDriver.Open(Knx.Bus.Common.ConnectorMode,System.String,System.Action{System.Byte[]},System.Action{System.Boolean})"/> method exactly once. Only if the Open call succeeds,
            other methods and properties of this interface are accessed.</item>
            <item>When finished with the driver, Falcon calls the <see cref="M:Knx.Bus.Common.ICustomBusDriver.Close"/>
            method as last method of this interface.</item>
            <item>If the object in addition implements <see cref="T:System.IDisposable"/>, <see cref="M:System.IDisposable.Dispose"/> is called.
            This is done even if the Open call failed.</item> 
            </list>
            </para>
            <para><b>Threading:</b><br/>
            Except for the <see cref="M:Knx.Bus.Common.ICustomBusDriver.Open(Knx.Bus.Common.ConnectorMode,System.String,System.Action{System.Byte[]},System.Action{System.Boolean})"/> and <see cref="M:Knx.Bus.Common.ICustomBusDriver.Close"/> calls which are never performed in parallel with other calls,
            the properties and methods may be called by Falcon on any thread at any time, also in parallel. The object implementing this interface must
            therefore implement any required locking itself.
            The two callback methods passed in the <see cref="M:Knx.Bus.Common.ICustomBusDriver.Open(Knx.Bus.Common.ConnectorMode,System.String,System.Action{System.Byte[]},System.Action{System.Boolean})"/> call may be called on any thread. Falcon guarantees that these callback will
            never block.
            </para>
            </remarks>
        </member>
        <member name="P:Knx.Bus.Common.ICustomBusDriver.LocalMediumType">
            <summary>
            Get the medium type
            </summary>
            <returns>The KNX medium type (0=TP, 1=PL, 2=RF, 5=IP)</returns>
            <remarks>
            This information is used by Falcon e.g. to choose one of several possible implementation of network management procedures.
            </remarks>
        </member>
        <member name="P:Knx.Bus.Common.ICustomBusDriver.MaxApduLength">
            <summary>
            Get the maximum possible APDU length
            </summary>
            <returns>The maximum possible APDU length</returns>
            <remarks>
            This information is used by Falcon to restrict the length of sent and received telegrams.
            </remarks>
        </member>
        <member name="P:Knx.Bus.Common.ICustomBusDriver.State">
            <summary>
            Get the state of the connection
            </summary>
            <returns><c>true</c> if the connection is available,
            <c>false</c> if the driver detects a problem with the communication hardware or if the connection to the KNX medium is broken.</returns>
        </member>
        <member name="P:Knx.Bus.Common.ICustomBusDriver.LocalIndividualAddress">
            <summary>
            Get or set the individual address of the interface
            </summary>
            <exception cref="T:Knx.Bus.Common.Exceptions.ConnectorException">If setting the individual address fails</exception>
        </member>
        <member name="P:Knx.Bus.Common.ICustomBusDriver.LocalDomainAddress">
            <summary>
            Get or set the domain address of the interface (if the medium supports it)
            </summary>
            <exception cref="T:Knx.Bus.Common.Exceptions.ConnectorException">If setting the domain address fails</exception>
        </member>
        <member name="M:Knx.Bus.Common.ICustomBusDriver.Open(Knx.Bus.Common.ConnectorMode,System.String,System.Action{System.Byte[]},System.Action{System.Boolean})">
            <summary>
            Called by Falcon to open the driver
            </summary>
            <param name="mode">The requested mode</param>
            <param name="parameters">Any additional parameters</param>
            <param name="received">Whenever a message from the bus is received by the driver, inform Falcon about it via this callback, passing the message as cEMI frame.</param>
            <param name="stateChanged">Whenever the connection state (<see cref="P:Knx.Bus.Common.ICustomBusDriver.State"/>) changes, inform Falcon about it via this callback, passing the new state as parameter</param>
            <exception cref="T:Knx.Bus.Common.Exceptions.ConnectorException">If opening the connection fails.</exception>
            <remarks>
            
            </remarks>
        </member>
        <member name="M:Knx.Bus.Common.ICustomBusDriver.Close">
            <summary>
            Called by Falcon to close the driver
            </summary>
            <remarks>
            After this call, the driver must not call the callbacks passed in the <see cref="M:Knx.Bus.Common.ICustomBusDriver.Open(Knx.Bus.Common.ConnectorMode,System.String,System.Action{System.Byte[]},System.Action{System.Boolean})"/> method any more.
            </remarks>
        </member>
        <member name="M:Knx.Bus.Common.ICustomBusDriver.Send(System.Byte[])">
            <summary>
            Called by Falcon to initiate sending a message to the bus
            </summary>
            <param name="cemiMessage">The message to be sent as cEMI frame; usually a L_Data.req</param>
            <exception cref="T:Knx.Bus.Common.Exceptions.ConnectorException">If sending the message fails.</exception>
            <remarks>
            The call should return as soon as the message was successfully queued for sending. The link layer confirmation
            (negative or positive) has to be reported by passing the L_Data.conf to the received callback as soon as it is available.
            </remarks>
        </member>
        <member name="T:Knx.Bus.Common.IMasterDataProvider">
            <summary>
            This interface is for internal use. 
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.IMasterDataProvider.MaskSupportsAuthenticate(System.UInt16)">
            <summary>
            Indicates whether the mask supports authentication.
            </summary>
            <param name="maskVersion">The mask version.</param>
            <returns></returns>
        </member>
        <member name="M:Knx.Bus.Common.IMasterDataProvider.MaskRequiresKeepAlive(System.UInt16)">
            <summary>
            Indicates whether the mask requires keep alive.
            </summary>
            <param name="maskVersion">The mask version.</param>
            <returns></returns>
        </member>
        <member name="M:Knx.Bus.Common.IMasterDataProvider.MaskSupportsVerifyMode(System.UInt16)">
            <summary>
            Indicates whether the mask supports verify mode.
            </summary>
            <param name="maskVersion">The mask version.</param>
            <returns></returns>
        </member>
        <member name="P:Knx.Bus.Common.IMasterDataProvider.MaskVersions">
            <summary>
            Gets the known mask versions.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.IMasterDataProvider.MediumTypes">
            <summary>
            Gets the known medium types.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.IMasterDataProvider.DatapointTypes">
            <summary>
            Gets the known datapoint types.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.IMasterDataProvider.DelayAfterMemoryWrite(System.Nullable{System.UInt16},System.Int32)">
            <summary>
            The delay after a memory write.
            </summary>
            <param name="maskVersion">The mask version.</param>
            <param name="byteCount">The byte count.</param>
            <returns></returns>
        </member>
        <member name="M:Knx.Bus.Common.IMasterDataProvider.MediumTypeSupportsDoA(System.Byte)">
            <summary>
            Indicates whether the medium type supports domain address.
            </summary>
            <param name="mediumTypeNumber">The medium type number.</param>
            <returns></returns>
        </member>
        <member name="T:Knx.Bus.Common.IndividualAddress">
            <summary>
            Represents the individual address of a KNX device.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.IndividualAddress.#ctor(System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.IndividualAddress"/> struct.
            </summary>
            <param name="address">The address.</param>
        </member>
        <member name="P:Knx.Bus.Common.IndividualAddress.Area">
            <summary>
            Gets the area part of the individual address (0...15).
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.IndividualAddress.Line">
            <summary>
            Gets the line part of the individual address (0...15).
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.IndividualAddress.Address">
            <summary>
            Gets the device part of the individual address (0...255).
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.IndividualAddress.Value">
            <summary>
            Gets or sets the individual address.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.IndividualAddress.AreaLine">
            <summary>
            Gets the area.line.0 value.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.IndividualAddress.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization. </param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="M:Knx.Bus.Common.IndividualAddress.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.IndividualAddress"/> struct.
            </summary>
            <param name="addressString">The address string.</param>
            <exception cref="T:System.FormatException">if the specified string does not match any valid format. See remarks section for valid string representation.</exception>
            <remarks>
            The following input formats are accepted:
            <list type="bullet">
            <item>dotted notation: "<i>area</i>.<i>line</i>.<i>device</i>"</item>
            <item>"$" + hexadecimal number</item>
            <item>"0x" + hexadecimal number</item>
            <item>decimal number</item>
            </list>
            </remarks>
        </member>
        <member name="M:Knx.Bus.Common.IndividualAddress.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.IndividualAddress"/> struct.
            </summary>
            <param name="area">The area part of the address.</param>
            <param name="line">The line part of the address.</param>
            <param name="address">The address part of the address.</param>
        </member>
        <member name="M:Knx.Bus.Common.IndividualAddress.op_Implicit(System.UInt16)~Knx.Bus.Common.IndividualAddress">
            <summary>
            Performs an implicit conversion from <see cref="T:System.UInt16"/> to <see cref="T:Knx.Bus.Common.IndividualAddress"/>.
            </summary>
            <param name="address">The address.</param>
            <returns>
            A new instance of the <see cref="T:Knx.Bus.Common.IndividualAddress"/>.
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.IndividualAddress.op_Implicit(Knx.Bus.Common.IndividualAddress)~System.UInt16">
            <summary>
            Performs an implicit conversion from <see cref="T:Knx.Bus.Common.IndividualAddress"/> to <see cref="T:System.UInt16"/>.
            </summary>
            <param name="address">The address.</param>
            <returns>
            The <see cref="T:System.UInt16"/> value.
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.IndividualAddress.op_Implicit(System.String)~Knx.Bus.Common.IndividualAddress">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Knx.Bus.Common.IndividualAddress"/>.
            </summary>
            <param name="addressString">The address string.</param>
            <returns>
            A new instance of the <see cref="T:Knx.Bus.Common.IndividualAddress"/>.
            </returns>
            <exception cref="T:System.FormatException">if the specified string does not match any valid format. See <see cref="M:Knx.Bus.Common.IndividualAddress.#ctor(System.String)"/>.</exception>
        </member>
        <member name="M:Knx.Bus.Common.IndividualAddress.op_Implicit(Knx.Bus.Common.IndividualAddress)~System.String">
            <summary>
            Performs an implicit conversion from <see cref="T:Knx.Bus.Common.IndividualAddress"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="address">The address.</param>
            <returns>
            The dotted string representation. See <see cref="M:Knx.Bus.Common.IndividualAddress.ToString"/>.
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.IndividualAddress.CompareTo(Knx.Bus.Common.IndividualAddress)">
            <summary>
            Compares this instance to another instance.
            </summary>
            <param name="other">The other instance to compare with.</param>
            <returns>A signed number indicating the relative values of this instance and other.</returns>>
            <list type="table">
            <listheader><term>Value</term><description>Description</description></listheader>
            <item><term>Less than zero</term><description>This instance is less than other.</description></item>
            <item><term>zero</term><description>This instance is equal to other.</description></item>
            <item><term>Greater than zero</term><description>This instance is greater than other.</description></item>
            </list>
        </member>
        <member name="M:Knx.Bus.Common.IndividualAddress.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.IndividualAddress.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
            <remarks>
            Thr following formats are supported:
            <list type="table">
            <listheader><term><paramref name="format"/></term><term>Result</term></listheader>
            <item><term>"D"</term><term>Decimal number</term></item>
            <item><term>"h"</term><term>4-digit hexadecimal number (using lower-case)</term></item>
            <item><term>"H"</term><term>4-digit hexadecimal number (using upper-case)</term></item>
            <item><term>other</term><term>dotted notation: "<i>area</i>.<i>line</i>.<i>device</i>"</term></item>
            </list>
            </remarks>
        </member>
        <member name="M:Knx.Bus.Common.IndividualAddress.TryParse(System.String,Knx.Bus.Common.IndividualAddress@)">
            <summary>
            Parse the individual address string.
            </summary>
            <param name="addressString">The address string.</param>
            <param name="individualAddress">The individual address.</param>
            <returns>true if it is possible to parse the individual address string into IndividualAddress; otherwise, false.</returns>
            <remarks>
            The following input formats are accepted:
            <list type="bullet">
            <item>dotted notation: "<i>area</i>.<i>line</i>.<i>device</i>"</item>
            <item>"$" + hexadecimal number</item>
            <item>"0x" + hexadecimal number</item>
            <item>decimal number</item>
            </list>
            </remarks>
        </member>
        <member name="M:Knx.Bus.Common.IndividualAddress.Equals(Knx.Bus.Common.IndividualAddress)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            true if the current object is equal to the other parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.IndividualAddress.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.IndividualAddress.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.IndividualAddress.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a <see cref="T:System.Runtime.Serialization.SerializationInfo"/> with the data needed to serialize the target object.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> to populate with data.</param>
            <param name="context">The destination (see <see cref="T:System.Runtime.Serialization.StreamingContext"/>) for this serialization. </param>
            <exception cref="T:System.Security.SecurityException">The caller does not have the required permission. </exception>
        </member>
        <member name="M:Knx.Bus.Common.IndividualAddress.op_Equality(Knx.Bus.Common.IndividualAddress,Knx.Bus.Common.IndividualAddress)">
            <summary>
            Implements the operator == (equals).
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            true if the left object is equal to the right parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.IndividualAddress.op_Inequality(Knx.Bus.Common.IndividualAddress,Knx.Bus.Common.IndividualAddress)">
            <summary>
            Implements the operator != (not equal).
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            true if the left object is not equal to the right parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.IndividualAddress.Parse(System.String)">
            <summary>
            Parses the specified address string to IndividualAddress.
            </summary>
            <param name="addressString">The address string.</param>
            <returns>An IndividualAddress object</returns>
            <remarks>
            The following input formats are accepted:
            <list type="bullet">
            <item>dotted notation: "<i>area</i>.<i>line</i>.<i>device</i>"</item>
            <item>"$" + hexadecimal number</item>
            <item>"0x" + hexadecimal number</item>
            <item>decimal number</item>
            </list>
            </remarks>
        </member>
        <member name="T:Knx.Bus.Common.IndividualAddressAndSerialNumber">
            <summary>
            Represents the individual address and the serial number of a KNX device.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.IndividualAddressAndSerialNumber.#ctor(Knx.Bus.Common.IndividualAddress,Knx.Bus.Common.SerialNumber)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.IndividualAddressAndSerialNumber"/> class.
            </summary>
            <param name="individualAddress">The individual address.</param>
            <param name="serialNumber">The serial number.</param>
        </member>
        <member name="P:Knx.Bus.Common.IndividualAddressAndSerialNumber.IndividualAddress">
            <summary>
            Gets the <see cref="T:Knx.Bus.Common.IndividualAddress"/>.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.IndividualAddressAndSerialNumber.SerialNumber">
            <summary>
            Gets the <see cref="T:Knx.Bus.Common.SerialNumber"/>.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.IndividualAddressAndSerialNumber.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Knx.Bus.Common.IndividualAddressAndSerialNumber.op_Equality(Knx.Bus.Common.IndividualAddressAndSerialNumber,Knx.Bus.Common.IndividualAddressAndSerialNumber)">
            <summary>
            Implements the operator == (equal).
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
             <c>true</c> if the specified <see cref="T:Knx.Bus.Common.IndividualAddressAndSerialNumber"/> is  equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.IndividualAddressAndSerialNumber.op_Inequality(Knx.Bus.Common.IndividualAddressAndSerialNumber,Knx.Bus.Common.IndividualAddressAndSerialNumber)">
            <summary>
            Implements the operator != (not equal).
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
             <c>true</c> if the specified <see cref="T:Knx.Bus.Common.IndividualAddressAndSerialNumber"/> is not equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.IndividualAddressAndSerialNumber.CompareTo(Knx.Bus.Common.IndividualAddressAndSerialNumber)">
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A value that indicates the relative order of the objects being compared. The return value has the following meanings: 
            Value Meaning Less than zero: This object is less than the <paramref name="other"/> parameter. 
            Zero: This object is equal to <paramref name="other"/>. Greater than zero: This object is greater than <paramref name="other"/>. 
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Knx.Bus.Common.IndividualAddressAndSerialNumber.Equals(Knx.Bus.Common.IndividualAddressAndSerialNumber)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Knx.Bus.Common.IndividualAddressAndSerialNumber.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Knx.Bus.Common.IndividualAddressAndSerialNumber.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="T:Knx.Bus.Common.IndividualAddressTypeConverter">
            <summary>
            TypeConverter for <see cref="T:Knx.Bus.Common.IndividualAddress"/>.
            </summary>
            <remarks>Converts <see cref="T:Knx.Bus.Common.IndividualAddress"/> from and to UInt16 and String.</remarks>
        </member>
        <member name="M:Knx.Bus.Common.IndividualAddressTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Knx.Bus.Common.IndividualAddressTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Knx.Bus.Common.IndividualAddressTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Knx.Bus.Common.IndividualAddressTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Knx.Bus.Common.InternalConstants">
            <summary>
            This class contains some constants used internally throughout Falcon
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.InternalConstants.MaxCemiTelegramLength">
            <summary>
            The maximum length of a cEMI telegram.
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.InternalConstants.MinApduLength">
            <summary>
            The minimum ADPU length.
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.InternalConstants.UsbFixedLocalMaskPl">
            <summary>
            The usb fixed local mask for Powerline.
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.InternalConstants.UsbFixedLocalMaskRf">
            <summary>
            The usb fixed local mask for RF.
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.InternalConstants.UsbFixedLocalMaskTp">
            <summary>
            The usb fixed local mask for TP.
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.InternalConstants.LockedSecureDeviceMask">
            <summary>
            The mask version reported by a device in secure mode when asked in plain.
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.InternalConstants.OT_DEVICE">
            <summary>
            Object type of the Device interface object
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.InternalConstants.OT_CEMI_SERVER">
            <summary>
            Object type of the cEMI server interface object
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.InternalConstants.OT_IPCONFIG">
            <summary>
            Object type of the IP configuration interface object
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.ISecureReceivingSeqNrService">
            <summary>
            This interface is used for handling the sequence number of incoming S-AL telegrams.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.ISecureReceivingSeqNrService.AssociateIndividualAddress(Knx.Bus.Common.SerialNumber,Knx.Bus.Common.IndividualAddress)">
            <summary>
            Associate an individual address with a serial number.
            </summary>
            <param name="serNo">The serial number of the device</param>
            <param name="indAddr">The individual address</param>
        </member>
        <member name="M:Knx.Bus.Common.ISecureReceivingSeqNrService.UnassociateIndividualAddress(Knx.Bus.Common.SerialNumber)">
            <summary>
            Removes the association of an individual address with a serial number.
            </summary>
            <param name="serNo">The serial number of the device</param>
        </member>
        <member name="M:Knx.Bus.Common.ISecureReceivingSeqNrService.GetSerialNumber(Knx.Bus.Common.IndividualAddress)">
            <summary>
            Gets the serial numbers of the device associated with a given individual address.
            </summary>
            <param name="indAddr">The individual address</param>
            <returns></returns>
        </member>
        <member name="M:Knx.Bus.Common.ISecureReceivingSeqNrService.GetIndividualAddress(Knx.Bus.Common.SerialNumber)">
            <summary>
            Gets the individual address of the device with a given serial number
            </summary>
            <param name="serNo"></param>
            <returns></returns>
        </member>
        <member name="M:Knx.Bus.Common.ISecureReceivingSeqNrService.GetLastValidSeqNr(Knx.Bus.Common.SerialNumber)">
            <summary>
            Gets the last known seq nr for the device.
            </summary>
            <param name="serNo">The serial number of the device</param>
        </member>
        <member name="M:Knx.Bus.Common.ISecureReceivingSeqNrService.UpdateLastValidSeqNr(Knx.Bus.Common.SerialNumber,System.UInt64,System.Object)">
            <summary>
            Sets the last known seq nr of the device if <paramref name="seqNr"/>
            is higher than the current last known seq nr.
            </summary>
            <param name="serNo">The serial number of the device</param>
            <param name="seqNr">The new seq nr.</param>
            <param name="identifier">An optional identification of this update</param>
            <returns>The new last known seq nr (the higher of the current seq nr and <paramref name="seqNr"/>.</returns>
        </member>
        <member name="M:Knx.Bus.Common.ISecureReceivingSeqNrService.ForgetLastValidSeqNr(Knx.Bus.Common.SerialNumber)">
            <summary>
            Forgets the last known seq nr of the device.
            </summary>
            <param name="serNo">The serial number of the device</param>
        </member>
        <member name="M:Knx.Bus.Common.ISecureReceivingSeqNrService.GetLastValidSeqNr(Knx.Bus.Common.IndividualAddress)">
            <summary>
            Gets the last known seq nr for the device.
            </summary>
            <param name="indAddr">The individual address</param>
        </member>
        <member name="M:Knx.Bus.Common.ISecureReceivingSeqNrService.UpdateLastValidSeqNr(Knx.Bus.Common.IndividualAddress,System.UInt64,System.Object)">
            <summary>
            Sets the last known seq nr of the device if <paramref name="seqNr"/>
            is higher than the current last known seq nr.
            </summary>
            <param name="indAddr">The individual address</param>
            <param name="seqNr">The new seq nr.</param>
            <param name="identifier">An optional identification of this update</param>
            <returns>The new last known seq nr (the higher of the current seq nr and <paramref name="seqNr"/>.</returns>
        </member>
        <member name="M:Knx.Bus.Common.ISecureReceivingSeqNrService.ForgetLastValidSeqNr(Knx.Bus.Common.IndividualAddress)">
            <summary>
            Forgets the last known seq nr of the device.
            </summary>
            <param name="indAddr">The individual address</param>
        </member>
        <member name="T:Knx.Bus.Common.ISecureSendingSeqNrService">
            <summary>
            This interface is used for handling the sequence number of outgoing S-AL telegrams.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.ISecureSendingSeqNrService.IsVerified">
            <summary>
            Flag telling whether or not the sequence number has been verified by either a Sync or a successful use of the sequence number
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.ISecureSendingSeqNrService.GetNextSendingSeqNr">
            <summary>
            Returns the next sequence number for sending (with incrementation)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Knx.Bus.Common.ISecureSendingSeqNrService.PeekNextSendingSeqNr">
            <summary>
            Returns the next sequence number for sending (without incrementation)
            </summary>
            <returns></returns>
        </member>
        <member name="M:Knx.Bus.Common.ISecureSendingSeqNrService.UpdateNextSendingSeqNr(System.UInt64)">
            <summary>
            Sets the next sequence number for sending if <paramref name="seqNr"/>
            is higher than the current sending seq nr.
            </summary>
            <param name="seqNr">The new seq nr.</param>
        </member>
        <member name="T:Knx.Bus.Common.KnxIp.AdapterTypes">
            <summary>
            This enum describes the different computer network adapter types
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.KnxIp.AdapterTypes.Ethernet">
            <summary>
            Local area networks (LAN)
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.KnxIp.AdapterTypes.WLan">
            <summary>
            Wireless local area network (WiFi)
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.KnxIp.AdapterTypes.PPP">
            <summary>
            Point-to-Point protocol (PPP)
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.KnxIp.AdapterTypes.All">
            <summary>
            Includes all three types 
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.KnxIp.DiscoveryResult">
            <summary>
            This class provides the result of an IP discovery search. Note that this class may be extended by new properties in future releases.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.KnxIp.DiscoveryResult.NetworkAdapterInfo">
            <summary>
            Gets information about the network adapter which has been used to discover the device. Might be <c>null</c>.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.KnxIp.DiscoveryResult.IpPort">
            <summary>
            Gets the IP port of the device's control endpoint.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.KnxIp.DiscoveryResult.IpAddress">
            <summary>
            Gets the <see cref="T:System.Net.IPAddress"/> of the discovered IP device.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.KnxIp.DiscoveryResult.DiscoveryEndpoint">
            <summary>
            Gets the discovery endpoint
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.KnxIp.DiscoveryResult.ControlEndpoint">
            <summary>
            Gets the control endpoint
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.KnxIp.DiscoveryResult.LocalAddress">
            <summary>
            Gets the local IP address which has been used to discover the device.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.KnxIp.DiscoveryResult.FriendlyName">
            <summary>
            Gets the friendly name of the discovered IP device.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.KnxIp.DiscoveryResult.IsInProgMode">
            <summary>
            Gets a value indicating whether the device is in programming mode.
            </summary>
            <value>
            	<c>true</c> if the device is in programming mode; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Knx.Bus.Common.KnxIp.DiscoveryResult.IndividualAddress">
            <summary>
            Gets the host <see cref="P:Knx.Bus.Common.KnxIp.DiscoveryResult.IndividualAddress"/> of the discovered IP device.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.KnxIp.DiscoveryResult.TunnelingSlots">
            <summary>
            Gets the available tunneling slots of the discovered IP device.
            </summary>
            <remarks>
            If the device supports the tunneling information DIB, the tunneling slots
            are available via this property. If the tunneling information DIB is not supported,
            this property is <c>null</c>.
            </remarks>
        </member>
        <member name="P:Knx.Bus.Common.KnxIp.DiscoveryResult.MediumType">
            <summary>
            Gets the medium type of the IP device.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.KnxIp.DiscoveryResult.MacAddress">
            <summary>
            Gets the MAC address of the discovered IP device.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.KnxIp.DiscoveryResult.MulticastAddress">
            <summary>
            Gets the KNXnet/IP routing multicast address of discovered IP device.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.KnxIp.DiscoveryResult.ProjectInstallationIdentifier">
            <summary>
            Gets the project installation identifier.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.KnxIp.DiscoveryResult.SerialNumber">
            <summary>
            Gets the KNX SerialNumber of the discovered IP device.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.KnxIp.DiscoveryResult.SupportedServiceFamilies">
            <summary>
            Gets the supported KNXnet/IP service families.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.KnxIp.DiscoveryResult.MediumStatus">
            <summary>
            Gets the medium status if the device supports extended device information or <c>null</c> if not.
            </summary>
            <remarks>
            For the encoding of the medium status, see PID_MEDIUM_STATUS in the KNX handbook.
            </remarks>
        </member>
        <member name="P:Knx.Bus.Common.KnxIp.DiscoveryResult.CommunicationImpossible">
            <summary>
            Gets the COMMUNICATION_IMPOSSIBLE bit from the medium status if the device supports extended device information or <c>null</c> if not.
            </summary>
            <value>
            <c>true</c> if communication is impossible, <c>false</c> if communication is possible, <c>null</c> if this information is not available.
            </value>
        </member>
        <member name="P:Knx.Bus.Common.KnxIp.DiscoveryResult.MaxApduLength">
            <summary>
            Gets the maximum local APDU length if the device supports extended device information or 0 if not.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.KnxIp.DiscoveryResult.MaskVersion">
            <summary>
            Gets the mask version (device descriptor 0) if the device supports extended device information or 0 if not.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.KnxIp.DiscoveryResult.SecuredServiceFamilies">
            <summary>
            Gets information about the security for supported KNXnet/IP services.
            </summary>
            <remarks>
            <para>
            This property is <c>null</c> if the device does not support PID_SECURED_SERVICE_FAMILIES.
            </para>
            </remarks>
        </member>
        <member name="M:Knx.Bus.Common.KnxIp.DiscoveryResult.Equals(Knx.Bus.Common.KnxIp.DiscoveryResult)">
            <summary>
            Indicates whether the current DiscoveryResult is equal to another object of the same type.
            </summary>
            <param name="other">DiscoveryResult to compare with this object.</param>
            <returns>
            true if the current object is equal to the other parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.KnxIp.DiscoveryResult.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.KnxIp.DiscoveryResult.Supports(Knx.Bus.Common.KnxIp.ServiceFamilies,System.Byte)">
            <summary>
            Checks if a given service family is supported
            </summary>
            <param name="family">The service family to check for</param>
            <param name="minVersion">The minimum required version</param>
            <returns><c>true</c> if the service family is supported in at least the required version</returns>
        </member>
        <member name="M:Knx.Bus.Common.KnxIp.DiscoveryResult.HasSecuredServiceFamilies(Knx.Bus.Common.KnxIp.ServiceFamilies[])">
            <summary>
            Verifies that all given secured service families are supported by the device in at least version 1
            </summary>
            <param name="serviceFamilies">The list or required <see cref="T:Knx.Bus.Common.KnxIp.ServiceFamilies"/></param>
            <returns><c>true</c> if all secure families are supported</returns>
        </member>
        <member name="M:Knx.Bus.Common.KnxIp.DiscoveryResult.HasSecuredServiceFamilies(Knx.Bus.Common.KnxIp.SecuredServiceFamily[])">
            <summary>
            Verifies that all given secured service families are supported by the device
            </summary>
            <param name="serviceFamilies">The list or required <see cref="T:Knx.Bus.Common.KnxIp.ServiceFamilies"/></param>
            <returns><c>true</c> if all secure families are supported</returns>
        </member>
        <member name="M:Knx.Bus.Common.KnxIp.DiscoveryResult.GetTunnelingConnections">
            <summary>
            Returns a list of possible tunneling connections
            </summary>
            <returns>The possible tunneling connections.</returns>
        </member>
        <member name="T:Knx.Bus.Common.KnxIp.NetworkAdapterEnumerator">
            <summary>
            Enumerates all operational network adapters
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.KnxIp.NetworkAdapterEnumerator.FixLegacyAdapterTypes(Knx.Bus.Common.KnxIp.AdapterTypes)">
            <summary>
            Correct wrong values from Falcon clients linked against Falcon 5.0 SDK
            </summary>
            <param name="adapterTypes"></param>
            <returns>Corrected value</returns>
            <remarks>
            In Falcon 5.0 SDK, the AdapterTypes enum was defined as:
            <code>
            [Flags]
            public enum AdapterTypes
            {
              Ethernet, // = 0
              WLan, // = 1
              PPP, // = 2
              All = Ethernet | WLan | PPP // = 3
            }
            </code>
            </remarks>
        </member>
        <member name="M:Knx.Bus.Common.KnxIp.NetworkAdapterEnumerator.#ctor(Knx.Bus.Common.KnxIp.AdapterTypes)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.KnxIp.NetworkAdapterEnumerator"/> class.
            </summary>
            <param name="adapterTypes">Adapter types to retrieve.</param>
        </member>
        <member name="M:Knx.Bus.Common.KnxIp.NetworkAdapterEnumerator.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.KnxIp.NetworkAdapterEnumerator.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"/> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:Knx.Bus.Common.KnxIp.NetworkAdapterInfo">
            <summary>
            This class represents information about a network interface. 
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.KnxIp.NetworkAdapterInfo.InterfaceId">
            <summary>
            The identifier of the network adapter.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.KnxIp.NetworkAdapterInfo.Name">
            <summary>
             The name of the network adapter.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.KnxIp.NetworkAdapterInfo.Description">
            <summary>
            The description of the interface.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.KnxIp.NetworkAdapterInfo.SpeedInMbps">
            <summary>
            The speed of the interface in Mbps.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.KnxIp.NetworkAdapterInfo.SpeedAsText">
            <summary>
            The speed of the interface as string in the form 1 Gbps, 10 Mbps etc.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.KnxIp.NetworkAdapterInfo.MacAddress">
            <summary>
            The Media Access Control (MAC) address for this adapter. 
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.KnxIp.NetworkAdapterInfo.Equals(Knx.Bus.Common.KnxIp.NetworkAdapterInfo)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Knx.Bus.Common.KnxIp.NetworkAdapterInfo.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Knx.Bus.Common.KnxIp.NetworkAdapterInfo.AllIpAddresses">
            <summary>
            Gets all IP addresses.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.KnxIp.NetworkAdapterInfo.IpV4Addresses">
            <summary>
            Gets the IPv4 addresses.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.KnxIp.NetworkAdapterInfo.IpV6Addresses">
            <summary>
            Gets the IPv6 addresses.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.KnxIp.NetworkAdapterInfo.InterfaceType">
            <summary>
            Specifies the type of network interface. 
            </summary>
            <remarks>
            The following types are supported:
            <list type="bullet">
            <item><term>Ethernet</term><description>as defined in IEEE standard 802.3</description></item>
            <item><term>Wireless80211</term><description>a wireless LAN connection (IEEE 802.11 standard)</description></item>
            <item><term>Ppp</term><description>a Point-To-Point protocol (PPP) connection</description></item>
            </list>
            </remarks>
        </member>
        <member name="T:Knx.Bus.Common.KnxIp.ProjectInstallationId">
            <summary>
            Represents the combination of project number and installation number of a KNX installation.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.KnxIp.ProjectInstallationId.#ctor(System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.KnxIp.ProjectInstallationId" /> struct.
            </summary>
            <param name="id">The combined project and installation number.</param>
        </member>
        <member name="M:Knx.Bus.Common.KnxIp.ProjectInstallationId.#ctor(System.UInt16,System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.KnxIp.ProjectInstallationId" /> struct.
            </summary>
            <param name="projectNumber">The project number.</param>
            <param name="installationNumber">The installation number.</param>
        </member>
        <member name="M:Knx.Bus.Common.KnxIp.ProjectInstallationId.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="P:Knx.Bus.Common.KnxIp.ProjectInstallationId.ProjectNumber">
            <summary>
            Gets the project number.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.KnxIp.ProjectInstallationId.InstallationNumber">
            <summary>
            Gets the installation number.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.KnxIp.ProjectInstallationId.Equals(Knx.Bus.Common.KnxIp.ProjectInstallationId)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Knx.Bus.Common.KnxIp.ProjectInstallationId.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <returns>
            true if <paramref name="obj"/> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
            <param name="obj">Another object to compare to. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Knx.Bus.Common.KnxIp.ProjectInstallationId.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="M:Knx.Bus.Common.KnxIp.ProjectInstallationId.op_Implicit(System.UInt16)~Knx.Bus.Common.KnxIp.ProjectInstallationId">
            <summary>
            Performs an implicit conversion from <see cref="T:System.UInt16"/> to <see cref="T:Knx.Bus.Common.KnxIp.ProjectInstallationId"/>.
            </summary>
            <param name="id">The id.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.KnxIp.ProjectInstallationId.op_Implicit(Knx.Bus.Common.KnxIp.ProjectInstallationId)~System.UInt16">
            <summary>
            Performs an implicit conversion from <see cref="T:Knx.Bus.Common.KnxIp.ProjectInstallationId"/> to <see cref="T:System.UInt16"/>.
            </summary>
            <param name="id">The id.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.KnxIp.ProjectInstallationId.op_Equality(Knx.Bus.Common.KnxIp.ProjectInstallationId,Knx.Bus.Common.KnxIp.ProjectInstallationId)">
            <summary>
            Implements the operator == (equal).
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            true if the left object is equal to the right parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.KnxIp.ProjectInstallationId.op_Inequality(Knx.Bus.Common.KnxIp.ProjectInstallationId,Knx.Bus.Common.KnxIp.ProjectInstallationId)">
            <summary>
            Implements the operator != (not equal).
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            true if the left object is not equal to the right parameter; otherwise, false.
            </returns>
        </member>
        <member name="T:Knx.Bus.Common.KnxIp.SecuredServiceFamily">
            <summary>
            The class provides the secured service types. 
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.KnxIp.SecuredServiceFamily.#ctor(Knx.Bus.Common.KnxIp.ServiceFamilies,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.KnxIp.SupportedServiceFamily"/> class.
            </summary>
            <param name="serviceFamily">The service family.</param>
            <param name="securityVersion">The security version.</param>
        </member>
        <member name="P:Knx.Bus.Common.KnxIp.SecuredServiceFamily.SecurityVersion">
            <summary>
            Gets the security version.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.KnxIp.SecuredServiceFamily.ServiceFamily">
            <summary>
            Gets the service family <see cref="T:Knx.Bus.Common.KnxIp.ServiceFamilies"/>.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.KnxIp.SecuredServiceFamily.ToString">
            <inheritdoc />
        </member>
        <member name="T:Knx.Bus.Common.KnxIp.ServiceFamilies">
            <summary>
            The defined service types.
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.KnxIp.ServiceFamilies.Undefined">
            <summary>
            The default service type
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.KnxIp.ServiceFamilies.Core">
            <summary>
            KNXnet/IP core protocol (basic communication).
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.KnxIp.ServiceFamilies.DeviceMgmt">
            <summary>
            KNXnet/IP device management protocol (configuration of IP devices).
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.KnxIp.ServiceFamilies.Tunneling">
            <summary>
            KNXnet/IP tunneling protocol (access to non-IP KNX subnetworks).
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.KnxIp.ServiceFamilies.Routing">
            <summary>
            KNXnet/IP routing protocol (exchange of KNX telegrams between KNX/IP Servers and routing through the IP network).
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.KnxIp.ServiceFamilies.RemoteLogging">
            <summary>
            KNXnet/IP remote logging protocol (off-line monitoring of KNX networks).
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.KnxIp.ServiceFamilies.RemoteConfiguration">
            <summary>
            KNXnet/IP remote configuration protocol (configuration and diagnosis services for networks).
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.KnxIp.ServiceFamilies.ObjectServer">
            <summary>
            KNXnet/IP object server protocol.
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.KnxIp.ServiceFamilies.Security">
            <summary>
            KNXnet/IP secure protocol.
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.KnxIp.SupportedServiceFamily">
            <summary>
            The class provides the supported service types. 
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.KnxIp.SupportedServiceFamily.#ctor(Knx.Bus.Common.KnxIp.ServiceFamilies,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.KnxIp.SupportedServiceFamily"/> class.
            </summary>
            <param name="serviceFamily">The service family.</param>
            <param name="serviceFamilyVersion">The service family version.</param>
        </member>
        <member name="P:Knx.Bus.Common.KnxIp.SupportedServiceFamily.ServiceFamilyVersion">
            <summary>
            Gets the service family version.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.KnxIp.SupportedServiceFamily.ServiceFamily">
            <summary>
            Gets the service family <see cref="T:Knx.Bus.Common.KnxIp.ServiceFamilies"/>.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.KnxIp.SupportedServiceFamily.ToString">
            <inheritdoc />
        </member>
        <member name="T:Knx.Bus.Common.KnxIp.TunnelingSlotInfo">
            <summary>
            Contains information about a tunneling slot
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.KnxIp.TunnelingSlotInfo.Address">
            <summary>
            Gets the individual address of tunneling slot.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.KnxIp.TunnelingSlotInfo.Status">
            <summary>
            Gets the status of the tunneling slot
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.KnxIp.TunnelingSlotInfo.#ctor(Knx.Bus.Common.IndividualAddress,Knx.Bus.Common.KnxIp.TunnelingSlotStatus)">
            <summary>
            Initialize a new object of class <see cref="T:Knx.Bus.Common.KnxIp.TunnelingSlotInfo"/>.
            </summary>
            <param name="address">The individual address</param>
            <param name="status">The status</param>
        </member>
        <member name="M:Knx.Bus.Common.KnxIp.TunnelingSlotInfo.ToString">
            <inheritdoc />
        </member>
        <member name="T:Knx.Bus.Common.KnxIp.TunnelingSlotStatus">
            <summary>
            Encodes the status of a Tunneling slot. This corresponds to the Tunneling Information DIB field "Status".
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.KnxIp.TunnelingSlotStatus.Free">
            <summary>
            Set if the Tunneling slot is currently not occupied.
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.KnxIp.TunnelingSlotStatus.Authorized">
            <summary>
            Set if the Client would be authorized to use the Tunneling Slot.
            </summary>
            <remarks>
            Within a session, this would be set if the logged in user is allowed to access this slot.
            Outside a session, this would be set if the anonymous user is allowed to access this slot.
            </remarks>
        </member>
        <member name="F:Knx.Bus.Common.KnxIp.TunnelingSlotStatus.Usable">
            <summary>
            Set if this Tunnel-ling Slot is currently usable.
            </summary>
            <remarks>
            If at least one other Tunneling Slot is occupied and has the same Individual Address as this Tunneling Slot, 
            then this bit would be cleared.
            </remarks>
        </member>
        <member name="T:Knx.Bus.Common.LocalConfiguration">
            <summary>
            This struct contains all information about a local interface configuration. 
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.LocalConfiguration.MaskVersion">
            <summary>
            Mask version (read only).
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.LocalConfiguration.Medium">
            <summary>
            Medium supported (read only).
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.LocalConfiguration.Address">
            <summary>
            Individual address (read/write).
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.LocalConfiguration.DoA">
            <summary>
            Domain address (read/write).
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.LocalConfiguration.ApduLenSupported">
            <summary>
            Maximum APDU length supported by interface (read only).
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.LocalConfiguration.IsPlRepeater">
            <summary>
            PL repeater flag, valid only for PL devices (read/write if PL device).
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.LocalConfiguration.SupportsDoA">
            <summary>
            Flag returning true if this device supports a DoA (read only).
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.LocalConfiguration.TimeBase">
            <summary>
            The time base (PID_TIME_BASE) in ns; 0 if unknown or not opened in busmon mode.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.LocalConfiguration.ToString">
            <summary>
            Returns a <see cref="T:System.String" /> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String" /> that represents this instance.
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.LocalConfiguration.Equals(Knx.Bus.Common.LocalConfiguration)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Knx.Bus.Common.LocalConfiguration.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <returns>
            true if <paramref name="obj"/> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
            <param name="obj">Another object to compare to. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Knx.Bus.Common.LocalConfiguration.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Knx.Bus.Common.LocalConfiguration.IsEmpty">
            <summary>
            Gets a value indicating whether this instance is empty.
            </summary>
            <value>
              <c>true</c> if this instance is empty; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Knx.Bus.Common.LocalConfiguration.op_Equality(Knx.Bus.Common.LocalConfiguration,Knx.Bus.Common.LocalConfiguration)">
            <summary>
            Implements the operator == (equals).
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            true if the left object is equal to the <paramref name="right"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.LocalConfiguration.op_Inequality(Knx.Bus.Common.LocalConfiguration,Knx.Bus.Common.LocalConfiguration)">
            <summary>
            Implements the operator != (not equal).
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            true if the left object is not equal to the <paramref name="right"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.MasterDataProvider.#ctor(System.IO.FileInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.MasterDataProvider"/> class
            from the given knx_master.xml file.
            </summary>
            <param name="file">The knx_master.xml file to load</param>
        </member>
        <member name="M:Knx.Bus.Common.MasterDataProvider.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.MasterDataProvider"/> class
            from the given master data stream.
            </summary>
            <param name="stream">The knx_master.xml file to load</param>
        </member>
        <member name="M:Knx.Bus.Common.MasterDataProvider.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.MasterDataProvider"/> class
            from the default knx_master.xml file.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.MasterDataProvider.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.MasterDataProvider"/> class
            from the default knx_master.xml file.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.MasterDataProvider.Default">
            <summary>
            Returns a static instance of the <see cref="T:Knx.Bus.Common.MasterDataProvider"/> class
            loaded from the default knx_master.xml file.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.MasterDataProvider.GetKnxMasterData(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Returns the content of the knx_master.xml file
            </summary>
            <returns>The content of the knx_master.xml file</returns>
            <remarks>
            The following files (if they exist) are considered:
            <list type="bullet">
            <ul>%programdata%\KNX\XML\project-vv\knx_master.xml (vv = current schema version)</ul>
            <ul>(assemblydir)knx_master.xml</ul>
            <ul>knx_master.xml embedded as resource in Knx.Bus.Common.dll (this does always exist)</ul>
            </list>
            The file with the highest version is loaded.
            </remarks>
        </member>
        <member name="P:Knx.Bus.Common.MasterDataProvider.ImplementedSchemaVersion">
            <summary>
            The XML schema version
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.MasterData.DatapointSubtype">
            <summary>
            Provides information about a datapoint sub-type
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.MasterData.DatapointSubtype.DatapointType">
            <summary>
            Returns the datapoint type
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.MasterData.DatapointSubtype.SubTypeNumber">
            <summary>
            Returns the datapoint sub-type's sub number
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.MasterData.DatapointSubtype.Name">
            <summary>
            Returns the datapoint sub-type's name
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.MasterData.DatapointSubtype.Text">
            <summary>
            Returns the datapoint sub-type's user-friendly text
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.MasterData.DatapointSubtype.IsDefaultForSize">
            <summary>
            Returns true if this is the default datapoint type for the size
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.MasterData.DatapointSubtype.Formats">
            <summary>
            Returns the formats
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.MasterData.DatapointSubtype.ToString">
            <inheritdoc />
        </member>
        <member name="T:Knx.Bus.Common.MasterData.DatapointType">
            <summary>
            Provides information about a datapoint type (main type)
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.MasterData.DatapointType.MainTypeNumber">
            <summary>
            Returns the datapoint type's main number
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.MasterData.DatapointType.Name">
            <summary>
            Returns the datapoint type's name
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.MasterData.DatapointType.Text">
            <summary>
            Returns the datapoint type's user-friendly text
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.MasterData.DatapointType.SubTypes">
            <summary>
            Returns the datapoint sub-types
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.MasterData.DatapointType.SizeInBit">
            <summary>
            Returns the datapoint type's size in bit
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.MasterData.DatapointType.IsDefaultForSize">
            <summary>
            Returns true if this is the default datapoint type for the size
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.MasterData.DatapointType.ToString">
            <inheritdoc />
        </member>
        <member name="T:Knx.Bus.Common.MasterData.MaskVersion">
            <summary>
            This class provides information about a mask version
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.MasterData.MaskVersion.MediumType">
            <summary>
            Gets the medium type
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.MasterData.MaskVersion.Version">
            <summary>
            Gets the mask version (device descriptor 0)
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.MasterData.MaskVersion.Id">
            <summary>
            Gets the XML ID
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.MasterData.MaskVersion.SupportsVerifyMode">
            <summary>
            Returns true if the device supports auto-verify mode
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.MasterData.MaskVersion.SupportsAuthenticate">
            <summary>
            Returns true if the device supports Authenticate
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.MasterData.MediumType">
            <summary>
            This class provides information about a KNX medium type
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.MasterData.MediumType.Number">
            <summary>
            Gets the numeric medium identifier
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.MasterData.MediumType.Name">
            <summary>
            Gets the medium type name
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.MasterData.MediumType.DomainAddressLength">
            <summary>
            Gets the domain address length in byte
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.MasterData.MediumType.SupportsDomainAddress">
            <summary>
            Returns true if the medium has a domain address
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.MasterData.MediumType.Type">
            <summary>
            Gets the corresponding value from the <see cref="T:Knx.Bus.Common.MediumTypes"/> enumeration.
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.MasterData.RefTypeFormat">
            <summary>
            Temporary during loading; will be replaced by the referenced Format
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.MediumTypes">
            <summary>
            The provided medium types 
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.MediumTypes.Unknown">
            <summary>
            The default medium type.
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.MediumTypes.Tp">
            <summary>
            Twisted pair
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.MediumTypes.Pl">
            <summary>
            Powerline
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.MediumTypes.Rf">
            <summary>
            KNX RF 
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.MediumTypes.Ip">
            <summary>
            KNXnet/IP 
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.NetworkParameterEventArgs">
            <summary>
            This class provides all information about network parameter events, e.g. receiving and network parameter info reports. 
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.NetworkParameterEventArgs.#ctor(Knx.Bus.Common.APci,Knx.Bus.Common.IndividualAddress,Knx.Bus.Common.IndividualAddress,System.UInt16,System.UInt16,System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.NetworkParameterEventArgs"/> class.
            </summary>
            <param name="apci">The NetworkParameter APCI</param>
            <param name="sourceAddress">The source address.</param>
            <param name="targetAddress">The target address.</param>
            <param name="objectType">The interface object type.</param>
            <param name="propertyId">The property identifier.</param>
            <param name="testInfo">The parameter type dependent value.</param>
            <param name="testResult">The parameter type dependent value.</param>
        </member>
        <member name="P:Knx.Bus.Common.NetworkParameterEventArgs.Apci">
            <summary>
            Gets the <see cref="T:Knx.Bus.Common.APci"/> of the telegram (one of <see cref="F:Knx.Bus.Common.APci.APciGroupValueRead"/>, <see cref="F:Knx.Bus.Common.APci.APciGroupValueResponse"/> or <see cref="F:Knx.Bus.Common.APci.APciGroupValueWrite"/>).
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.NetworkParameterEventArgs.IsResponse">
            <summary>
            Returns <c>true</c> if this is a (System)NetworkParameter Response or InfoReport
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.NetworkParameterEventArgs.IsWrite">
            <summary>
            Returns <c>true</c> if this is a (System)NetworkParameter Write
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.NetworkParameterEventArgs.IsRead">
            <summary>
            Returns <c>true</c> if this is a (System)NetworkParameter Read
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.NetworkParameterEventArgs.IsSystem">
            <summary>
            Gets a flag telling if this was a NetworkParameter or SystemNetworkParameter message
            </summary>
            <value>
            true for SystemNetworkParameter, false for NetworkParameter
            </value> 
        </member>
        <member name="P:Knx.Bus.Common.NetworkParameterEventArgs.SourceAddress">
            <summary>
            Gets the source address.
            </summary>
            <value>
            The <see cref="T:Knx.Bus.Common.IndividualAddress"/>.
            </value> 
        </member>
        <member name="P:Knx.Bus.Common.NetworkParameterEventArgs.TargetAddress">
            <summary>
            Gets the target address for point-to-point communication
            </summary>
            <value>
            The <see cref="T:Knx.Bus.Common.IndividualAddress"/>, or 0 for broadcast communication
            </value> 
        </member>
        <member name="P:Knx.Bus.Common.NetworkParameterEventArgs.ObjectType">
            <summary>
            Gets the interface object type.
            </summary>
            <value>
            The interface object type.
            </value>
        </member>
        <member name="P:Knx.Bus.Common.NetworkParameterEventArgs.PropertyId">
            <summary>
            Gets the property identifier.
            </summary>
            <value>
            The property identifier.
            </value> 
        </member>
        <member name="P:Knx.Bus.Common.NetworkParameterEventArgs.TestInfo">
            <summary>
            Gets the test information.
            </summary>
            <value>
            The parameter type dependent value.
            </value> 
        </member>
        <member name="P:Knx.Bus.Common.NetworkParameterEventArgs.TestResult">
            <summary>
            Gets the test result.
            </summary>
            <value>
            The parameter type dependent value.
            </value> 
        </member>
        <member name="T:Knx.Bus.Common.Priority">
            <summary>
            Message priority of telegrams as specified in the KNX handbook. 
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.Priority.System">
            <summary>
            Telegram transmission priority 'system', see KNX handbook.
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.Priority.Alarm">
            <summary>
            Telegram transmission priority 'alarm', see KNX handbook. 
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.Priority.High">
            <summary>
            Telegram transmission priority 'high', see KNX handbook. 
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.Priority.Low">
            <summary>
            Telegram transmission priority 'low', see KNX handbook. 
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Properties.Resources.DptString_DimmingStep1">
            <summary>
              Looks up a localized string similar to 1 %.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Properties.Resources.DptString_DimmingStep100">
            <summary>
              Looks up a localized string similar to 100 %.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Properties.Resources.DptString_DimmingStep12">
            <summary>
              Looks up a localized string similar to 12 %.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Properties.Resources.DptString_DimmingStep25">
            <summary>
              Looks up a localized string similar to 25 %.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Properties.Resources.DptString_DimmingStep3">
            <summary>
              Looks up a localized string similar to 3 %.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Properties.Resources.DptString_DimmingStep50">
            <summary>
              Looks up a localized string similar to 50 %.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Properties.Resources.DptString_DimmingStep6">
            <summary>
              Looks up a localized string similar to 6 %.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Properties.Resources.DptString_DimmingStepBreak">
            <summary>
              Looks up a localized string similar to Break.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Properties.Resources.DptString_OneBitAcknowledgeCommand">
            <summary>
              Looks up a localized string similar to Acknowledge command (trigger).
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Properties.Resources.DptString_OneBitActive">
            <summary>
              Looks up a localized string similar to Active.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Properties.Resources.DptString_OneBitAlarm">
            <summary>
              Looks up a localized string similar to Alarm.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Properties.Resources.DptString_OneBitAnd">
            <summary>
              Looks up a localized string similar to And.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Properties.Resources.DptString_OneBitCalculated">
            <summary>
              Looks up a localized string similar to Calculated.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Properties.Resources.DptString_OneBitClose">
            <summary>
              Looks up a localized string similar to Close.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Properties.Resources.DptString_OneBitCyclically">
            <summary>
              Looks up a localized string similar to Cyclically.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Properties.Resources.DptString_OneBitDecrease">
            <summary>
              Looks up a localized string similar to Decrease.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Properties.Resources.DptString_OneBitDisable">
            <summary>
              Looks up a localized string similar to Disable.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Properties.Resources.DptString_OneBitDown">
            <summary>
              Looks up a localized string similar to Down.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Properties.Resources.DptString_OneBitEnable">
            <summary>
              Looks up a localized string similar to Enable.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Properties.Resources.DptString_OneBitFalse">
            <summary>
              Looks up a localized string similar to False.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Properties.Resources.DptString_OneBitFixed">
            <summary>
              Looks up a localized string similar to Fixed.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Properties.Resources.DptString_OneBitHigh">
            <summary>
              Looks up a localized string similar to High.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Properties.Resources.DptString_OneBitInactive">
            <summary>
              Looks up a localized string similar to Inactive.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Properties.Resources.DptString_OneBitIncrease">
            <summary>
              Looks up a localized string similar to Increase.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Properties.Resources.DptString_OneBitInverted">
            <summary>
              Looks up a localized string similar to Inverted.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Properties.Resources.DptString_OneBitLow">
            <summary>
              Looks up a localized string similar to Low.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Properties.Resources.DptString_OneBitNoAction">
            <summary>
              Looks up a localized string similar to No Action (dummy).
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Properties.Resources.DptString_OneBitNoAlarm">
            <summary>
              Looks up a localized string similar to No alarm.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Properties.Resources.DptString_OneBitNoPriority">
            <summary>
              Looks up a localized string similar to No priority.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Properties.Resources.DptString_OneBitNoRamp">
            <summary>
              Looks up a localized string similar to No ramp.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Properties.Resources.DptString_OneBitNotInverted">
            <summary>
              Looks up a localized string similar to Not inverted.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Properties.Resources.DptString_OneBitNotOccupied">
            <summary>
              Looks up a localized string similar to Not occupied.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Properties.Resources.DptString_OneBitOccupied">
            <summary>
              Looks up a localized string similar to Occupied.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Properties.Resources.DptString_OneBitOff">
            <summary>
              Looks up a localized string similar to Off.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Properties.Resources.DptString_OneBitOn">
            <summary>
              Looks up a localized string similar to On.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Properties.Resources.DptString_OneBitOpen">
            <summary>
              Looks up a localized string similar to Open.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Properties.Resources.DptString_OneBitOpenDoor">
            <summary>
              Looks up a localized string similar to Open door.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Properties.Resources.DptString_OneBitOpenWindow">
            <summary>
              Looks up a localized string similar to Open window.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Properties.Resources.DptString_OneBitOr">
            <summary>
              Looks up a localized string similar to Or.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Properties.Resources.DptString_OneBitPriority">
            <summary>
              Looks up a localized string similar to Priority.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Properties.Resources.DptString_OneBitRamp">
            <summary>
              Looks up a localized string similar to Ramp.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Properties.Resources.DptString_OneBitResetCommand">
            <summary>
              Looks up a localized string similar to Reset command (trigger).
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Properties.Resources.DptString_OneBitSceneA">
            <summary>
              Looks up a localized string similar to Scene A.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Properties.Resources.DptString_OneBitSceneB">
            <summary>
              Looks up a localized string similar to Scene B.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Properties.Resources.DptString_OneBitStart">
            <summary>
              Looks up a localized string similar to Start.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Properties.Resources.DptString_OneBitStartStop">
            <summary>
              Looks up a localized string similar to Start/Stop.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Properties.Resources.DptString_OneBitStop">
            <summary>
              Looks up a localized string similar to Stop.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Properties.Resources.DptString_OneBitTrigger0">
            <summary>
              Looks up a localized string similar to Trigger 0.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Properties.Resources.DptString_OneBitTrigger1">
            <summary>
              Looks up a localized string similar to Trigger 1.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Properties.Resources.DptString_OneBitTrue">
            <summary>
              Looks up a localized string similar to True.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Properties.Resources.DptString_OneBitUp">
            <summary>
              Looks up a localized string similar to Up.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Properties.Resources.DptString_SceneControlActivate">
            <summary>
              Looks up a localized string similar to Activate.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Properties.Resources.DptString_SceneControlLearn">
            <summary>
              Looks up a localized string similar to Learn.
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.PropertyDataSize">
            <summary>
            Provide the data size from the property data type
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.PropertyDataSize.GetPropertyDataSize(Knx.Bus.Common.PropertyDataType)">
            <summary>
            Gets the size of a specified <see cref="T:Knx.Bus.Common.PropertyDataType"/>.
            </summary>
            <param name="type">The <see cref="T:Knx.Bus.Common.PropertyDataType"/>.</param>
            <returns>The data size in bytes</returns>
            <remarks>
            If <paramref name="type"/> may be <see cref="F:Knx.Bus.Common.PropertyDataType.PT_CONTROL"/>, use
            <see cref="M:Knx.Bus.Common.PropertyDataSize.GetPropertyDataSize(Knx.Bus.Common.PropertyDataType,System.Boolean)"/> instead.
            </remarks>
        </member>
        <member name="M:Knx.Bus.Common.PropertyDataSize.GetPropertyDataSize(Knx.Bus.Common.PropertyDataType,System.Boolean)">
            <summary>
            Gets the size of a specified <see cref="T:Knx.Bus.Common.PropertyDataType"/>.
            </summary>
            <param name="type">The <see cref="T:Knx.Bus.Common.PropertyDataType"/>.</param>
            <param name="read">Specify read (<c>true</c>)or write (<c>false</c>) access. This is only relevant if
            <paramref name="type"/> is <see cref="F:Knx.Bus.Common.PropertyDataType.PT_CONTROL"/>.</param>
            <returns>The data size in bytes</returns>
        </member>
        <member name="T:Knx.Bus.Common.PropertyDataType">
            <summary>
            Property data types as described in the KNX handbook
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.PropertyDataType.PT_CONTROL">
            <summary>
            Type length: 1 octet read/10 octet write
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.PropertyDataType.PT_CHAR">
            <summary>
            Type length: 1 octet
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.PropertyDataType.PT_UNSIGNED_CHAR">
            <summary>
            Type length: 1 octet
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.PropertyDataType.PT_INT">
            <summary>
            Type length: 2 octets
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.PropertyDataType.PT_UNSIGNED_INT">
            <summary>
            Type length: 2 octets
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.PropertyDataType.PT_KNX_FLOAT">
            <summary>
            Type length: 2 octets
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.PropertyDataType.PT_DATE">
            <summary>
            Type length: 3 octets
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.PropertyDataType.PT_TIME">
            <summary>
            Type length: 3 octets
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.PropertyDataType.PT_LONG">
            <summary>
            Type length: 4 octets
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.PropertyDataType.PT_UNSIGNED_LONG">
            <summary>
            Type length: 4 octets
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.PropertyDataType.PT_FLOAT">
            <summary>
            Type length: 4 octets
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.PropertyDataType.PT_DOUBLE">
            <summary>
            Type length: 8 octets
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.PropertyDataType.PT_CHAR_BLOCK">
            <summary>
            Type length: 10 octets
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.PropertyDataType.PT_POLL_GROUP_SETTINGS">
            <summary>
            Type length: 3 octets
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.PropertyDataType.PT_SHORT_CHAR_BLOCK">
            <summary>
            Type length: 5 octets
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.PropertyDataType.PT_VARIABLE_LENGTH">
            <summary>
            Type length: variable
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.PropertyDataType.PT_GENERIC_01">
            <summary>
            Type length: 1 octet
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.PropertyDataType.PT_GENERIC_02">
            <summary>
            Type length: 2 octets
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.PropertyDataType.PT_GENERIC_03">
            <summary>
            Type length: 3 octets
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.PropertyDataType.PT_GENERIC_04">
            <summary>
            Type length: 4 octets
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.PropertyDataType.PT_GENERIC_05">
            <summary>
            Type length: 5 octets
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.PropertyDataType.PT_GENERIC_06">
            <summary>
            Type length: 6 octets
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.PropertyDataType.PT_GENERIC_07">
            <summary>
            Type length: 7 octets
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.PropertyDataType.PT_GENERIC_08">
            <summary>
            Type length: 8 octets
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.PropertyDataType.PT_GENERIC_09">
            <summary>
            Type length: 9 octets
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.PropertyDataType.PT_GENERIC_10">
            <summary>
            Type length: 10 octets
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.PropertyDataType.PT_GENERIC_11">
            <summary>
            Type length: 11 octets
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.PropertyDataType.PT_GENERIC_12">
            <summary>
            Type length: 12 octets
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.PropertyDataType.PT_GENERIC_13">
            <summary>
            Type length: 13 octets
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.PropertyDataType.PT_GENERIC_14">
            <summary>
            Type length: 14 octets
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.PropertyDataType.PT_GENERIC_15">
            <summary>
            Type length: 15 octets
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.PropertyDataType.PT_GENERIC_16">
            <summary>
            Type length: 16 octets
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.PropertyDataType.PT_GENERIC_17">
            <summary>
            Type length: 17 octets
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.PropertyDataType.PT_GENERIC_18">
            <summary>
            Type length: 18 octets
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.PropertyDataType.PT_GENERIC_19">
            <summary>
            Type length: 19 octets
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.PropertyDataType.PT_GENERIC_20">
            <summary>
            Type length: 20 octets
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.PropertyDataType.PT_VERSION">
            <summary>
            Type length: 2 octets
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.PropertyDataType.PT_ALARM_INFO">
            <summary>
            Type length: 6 octets
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.PropertyDataType.PT_BINARY_INFORMATION">
            <summary>
            Type length: 1 bit
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.PropertyDataType.PT_BITSET8">
            <summary>
            Type length: 1 octet
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.PropertyDataType.PT_BITSET16">
            <summary>
            Type length: 2 octets
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.PropertyDataType.PT_ENUM8">
            <summary>
            Type length: 1 octet
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.PropertyDataType.PT_SCALING">
            <summary>
            Type length: 1 octet
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.PropertyDataType.PT_RESERVED_37">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.PropertyDataType.PT_RESERVED_38">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.PropertyDataType.PT_RESERVED_39">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.PropertyDataType.PT_RESERVED_3A">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.PropertyDataType.PT_RESERVED_3B">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.PropertyDataType.PT_NE_VL">
            <summary>
            Type length: variable
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.PropertyDataType.PT_NE_FL">
            <summary>
            Type length: undefined, fixed
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.PropertyDataType.PT_FUNCTION">
            <summary>
            Type length: undefined
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.PropertyDataType.PT_ESCAPE">
            <summary>
            Type length: undefined
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.PropertyDescription">
            <summary>
            The property description class describes an interface object property.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.PropertyDescription.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Knx.Bus.Common.PropertyDescription.WriteRights">
            <summary>
            Gets the property write access rights.
            </summary>
            <value>
            The property write access rights.
            </value> 
        </member>
        <member name="P:Knx.Bus.Common.PropertyDescription.ReadRights">
            <summary>
            Gets the property read access rights.
            </summary>
            <value>
            The property read access rights.
            </value>  
        </member>
        <member name="P:Knx.Bus.Common.PropertyDescription.MaxSize">
            <summary>
            Gets the maximum number of array elements.
            </summary>
            <value>
            The maximum number of array elements.
            </value>  
        </member>
        <member name="P:Knx.Bus.Common.PropertyDescription.WriteEnabled">
            <summary>
            Gets a value indicating whether the KNX object is [write enabled].
            </summary>
            <value>
              <c>true</c> if write enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Knx.Bus.Common.PropertyDescription.PropertyDataType">
            <summary>
            Gets the type of the property data, see also <see cref="T:Knx.Bus.Common.PropertyDataType"/>.
            </summary>
            <value>
            The property data type.
            </value>  
        </member>
        <member name="P:Knx.Bus.Common.PropertyDescription.PropertyIndex">
            <summary>
            Gets the index of the interface object property.
            </summary>
            <value>
            The index of the interface object property.
            </value>   
        </member>
        <member name="P:Knx.Bus.Common.PropertyDescription.PropertyId">
            <summary>
            Gets the Id of the interface object property.
            </summary>
            <value>
            The id of the interface object property.
            </value>   
        </member>
        <member name="P:Knx.Bus.Common.PropertyDescription.ObjectIndex">
            <summary>
            Gets the index of the interface object if known.
            This is only valid if <see cref="P:Knx.Bus.Common.PropertyDescription.Instance"/> == 0.
            </summary>
            <value>
            The index of the interface object if known.
            </value>   
        </member>
        <member name="P:Knx.Bus.Common.PropertyDescription.ObjectType">
            <summary>
            Gets the type of the interface object if known.
            This is only valid if <see cref="P:Knx.Bus.Common.PropertyDescription.Instance"/> &gt; 0.
            </summary>
            <value>
            The type of the interface object if known.
            </value>   
        </member>
        <member name="P:Knx.Bus.Common.PropertyDescription.Instance">
            <summary>
            Gets the occurrence index of the interface object.
            The first occurrence of a specific object type has Instance=1.
            </summary>
            <value>
            The occurrence index of the interface object.
            </value>   
        </member>
        <member name="P:Knx.Bus.Common.PropertyDescription.MainDPT">
            <summary>
            Gets the main DPT number
            </summary>
            <value>
            The main DPT number or 0 is unknown.
            </value>   
        </member>
        <member name="P:Knx.Bus.Common.PropertyDescription.SubDPT">
            <summary>
            Gets the sub DPT number
            </summary>
            <value>
            The sub DPT number.
            </value>   
        </member>
        <member name="T:Knx.Bus.Common.RestartResult">
            <summary>
            Represents the restart result
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.RestartResult.#ctor(System.TimeSpan,Knx.Bus.Common.ConfirmedRestartErrorCodes)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.RestartResult"/> struct.
            </summary>
            <param name="duration">The duration.</param>
            <param name="errorCode">The error code.</param>
        </member>
        <member name="P:Knx.Bus.Common.RestartResult.Succeeded">
            <summary>
            Gets a value indicating whether this <see cref="T:Knx.Bus.Common.RestartResult"/> is succeeded.
            </summary>
            <value>
              <c>true</c> if succeeded; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Knx.Bus.Common.RestartResult.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Knx.Bus.Common.RestartResult.ErrorCode">
            <summary>
            Gets the confirmed restart error code.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.RestartResult.Duration">
            <summary>
            Gets the estimated maximum time for the restart to complete.
            If equal to <see cref="F:System.TimeSpan.Zero"/>, the clients shall assume 5 seconds.
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.ResultCode">
            <summary>
            Unified result codes (from KSG586-03)
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.SecureCryptoEngineAes128.EnableSessionKeyLogging(System.String,System.String)">
            <summary>
            Enabling this will collect IP security session keys
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.SecureCryptoEngineAes128._key">
            <summary>
            128 bit (16 byte) symmetric AES key used for encryption, decryption and MAC calculation.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.SecureCryptoEngineAes128.#ctor">
            <summary>
            Constructor creates an unitialized object. Key must be set before anything useful can be done.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.SecureCryptoEngineAes128.Key">
            <summary>
            Symmetric 128 bit (16 byte) AES key used for encryption, decryption and MAC calculation.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.SecureCryptoEngineAes128.DataSecurityEncryptCcm(System.Byte[],System.Byte[],Knx.Bus.Common.Telegrams.SecureTelegram,System.Byte[]@)">
            <summary>
            Encrypt and calculate MAC make using CCM, in the context of DataSecurity.
            </summary>
            <param name="aData">Data which is only to be authenticated. May be null.</param>
            <param name="pData">Data which is to be authenticated and to be encrypted. May be null.</param>
            <param name="secureTelegram">Partially initialized SecureTelegram. This is used to extract the fields which go into B_0 and Ctr_0: SeqNr, SA, DA, ControlField1, ControlField2, TPCI, APCI</param>
            <param name="encryptedMac">Out: 4 byte MAC.</param>
            <returns>Encrypted pData. Null if pData==null.</returns>
        </member>
        <member name="M:Knx.Bus.Common.SecureCryptoEngineAes128.DataSecurityDecryptCcm(System.Byte[],Knx.Bus.Common.Telegrams.SecureTelegram,System.Byte[],System.Byte[]@)">
            <summary>
            Decrypt pData and MAC in the context of DataSecurity.
            </summary>
            <param name="pData">Encrypted data which should be decrypted. This must not contain a MAC.</param>
            <param name="secureTelegram">SecureTelegram which is used to build Ctr_0. The fields SeqNr, Sa and DA are used.</param>
            <param name="encryptedMac">Encrypted MAC (4 bytes) or null.</param>
            <param name="plainMac">Out: Decrypted MAC (4 bytes) or null if encryptedMac was null.</param>
            <returns>Plain APDU (ACPI+data), without MAC.</returns>
        </member>
        <member name="M:Knx.Bus.Common.SecureCryptoEngineAes128.DataSecurityCalcPlainCcmMac(System.Byte[],System.Byte[],Knx.Bus.Common.Telegrams.SecureTelegram)">
            <summary>
            Calculate plain MAC from plain aData and pData in the context of data security.
            </summary>
            <param name="aData">Authenticated data.</param>
            <param name="pData">Plain data which will be or was encrypted.</param>
            <param name="secureTelegram">Context to build B_0 and Ctr_0.</param>
            <returns>4-byte MAC.</returns>
        </member>
        <member name="M:Knx.Bus.Common.SecureCryptoEngineAes128.IpSecurityCalcUnencryptedCcmMac(System.Byte[],System.Byte[],System.UInt64,System.UInt64,System.UInt16)">
            <summary>
            Calc unencrypted CBC-MAC of KNX-CCM according to AN158 and AN159 in the context of IpSecurity.
            </summary>
            <param name="a_bytes">Data which is authenticated but which will not be encrypted later.</param>
            <param name="p_bytes">Data which is authenticated and which will be encrypted later. May be null.</param>
            <param name="sequenceNumber">Sequence number which goes into the top 6 bytes of the nonce.</param>
            <param name="serialNumber">KNX serial number.</param>
            <param name="messageTag">Message tag.</param>
            <returns>16 byte CBC-MAC of a_bytes and p_bytes</returns>
        </member>
        <member name="M:Knx.Bus.Common.SecureCryptoEngineAes128.CcmCalcCbcMacInternal(System.Byte[],System.Byte[],System.Byte[],System.Boolean)">
            <summary>
            Calc CBC-MAC according to RFC 3610.
            This is verified against the RFC 3610 test vectors in SecureCryptoEngineTest.
            </summary>
            <param name="a_bytes">Data which is authenticated but which will not be encrypted later. May be null.</param>
            <param name="p_bytes">Data which is authenticated and which will be encrypted later. May be null.</param>
            <param name="b_0">Block b_0 for the CBC-MAC algorithm. According to RFC 3610 it contains flags, nonce and the length of p_bytes. For KNX it just contains the nonce and the length of p_bytes. See BuildB0().</param>
            <param name="padAfterA">Set this to false to not insert null bytes after A to align to a 16 byte boundary, which is a KNX specific optimization. Set this to true to get the original CCM behavior (used to check against RFC3610 reference vectors).</param>
            <returns>16 byte CBC-MAC of a_bytes and p_bytes</returns>
        </member>
        <member name="M:Knx.Bus.Common.SecureCryptoEngineAes128.IpSecurityEncryptCcm(System.Byte[],System.Byte[],System.UInt64,System.UInt64,System.UInt16)">
            <summary>
            Encrypt p_bytes using KNX-CCM according to AN158 and AN159 in the context of IpSecurity.
            </summary>
            <param name="p_bytes">Plain text data which is to be encrypted.</param>
            <param name="mac_bytes">CBC-MAC of a_bytes and p_bytes from CcmCalcCbcMac().</param>
            <param name="sequenceNumber">Sequence Number / Timer.</param>
            <param name="serialNumber">KNX SerialNumber.</param>
            <param name="messageTag">Message tag.</param>
            <returns>Encrypted data containing p_bytes and mac_bytes in an encrypted form.</returns>
        </member>
        <member name="M:Knx.Bus.Common.SecureCryptoEngineAes128.CcmEncryptInternal(System.Byte[],System.Byte[],System.Byte[],System.Int32)">
            <summary>
            Encrypt p_bytes and mac_bytes according to RFC 3610.
            This is verified against the RFC 3610 test vectors, see Test().
            </summary>
            <param name="p_bytes">Plain text data which is to be encrypted. May be null in case no plain text data is to be encrypted (then just the MAC is encrypted).</param>
            <param name="mac_bytes">CBC-MAC of a_bytes and p_bytes from CcmCalcCbcMac[Internal]().</param>
            <param name="ctr_0">Ctr_0 value for the CTR encryption mode.</param>
            <param name="s0_bytes_used_for_mac">Number of bytes of S0 used for encrypting the MAC. Offset of the cipherpad bytes used for p_bytes in the cipherpad. 16 bytes in the context of KNX/IP and in the context of CCM (RFC3610). 4 Bytes for KNX DataSecurity. Must be >= mac_bytes.Length.</param>
            <returns>Encrypted data containing p_bytes and mac_bytes in an encrypted form.</returns>
        </member>
        <member name="M:Knx.Bus.Common.SecureCryptoEngineAes128.IpSecurityDecryptCcm(System.Byte[],System.UInt64,System.UInt64,System.UInt16)">
            <summary>
            Decrypt p_bytes and mac_bytes according to AN158 and AN159.
            </summary>
            <param name="cipherText">Encrypted data containing p_bytes and mac_bytes. The last 16 bytes are encrypted mac_bytes. Must be at least 16 bytes long.</param>
            <param name="sequenceNumber">Sequence Number / Timer.</param>
            <param name="serialNumber">KNX SerialNumber.</param>
            <param name="messageTag">Message tag.</param>
            <returns>Decrypted p_bytes + mac_bytes. The last 16 bytes are mac_bytes.</returns>
        </member>
        <member name="M:Knx.Bus.Common.SecureCryptoEngineAes128.CcmDecryptInternal(System.Byte[],System.Byte[],System.Byte[],System.Byte[]@,System.Int32)">
            <summary>
            Decrypt p_bytes and mac_bytes according to AN158 and AN159.
            </summary>
            <param name="cipherData">Encrypted data (P) without MAC. May be null.</param>
            <param name="cipherMac">Encrypted MAC. May be 0..16 bytes or null.</param>
            <param name="ctr_0">Ctr_0 used for decryption.</param>
            <param name="plainMac">Decrypted MAC is returned in this reference, or null if cipherMac is null.</param>
            <param name="s0_bytes_used_for_mac">Number of bytes of S0 used for decrypting the MAC. Offset of the cipherpad bytes used for p_bytes in the cipherpad. 16 bytes in the context of KNX/IP and in the context of CCM (RFC3610). 4 Bytes for KNX DataSecurity. Must be >= cipherMac.Length.</param>
            <returns>plainData as return value and plainMac in plainMac</returns>
        </member>
        <member name="M:Knx.Bus.Common.SecureCryptoEngineAes128.GenerateCipherPad(System.Int32,System.Byte[])">
            <summary>
            Generate cipher-pad for CCM encryption. This is called S (S_0, S_1 ...) in RFC 3610.
            Data is encrypted by XORing it with this cipher-pad.
            Note: S_0 is returned in the first 16 bytes and is usually later used to encrypt the CBC-MAC which is then stored in the _last_ 16 bytes of the encrypted output.
            </summary>
            <param name="length"></param>
            <param name="ctr_0"></param>
            <returns>Cipher-pad S (S_0, S_1, ...).</returns>
        </member>
        <member name="M:Knx.Bus.Common.SecureCryptoEngineAes128.IpSecurityBuildB0(System.UInt64,System.UInt64,System.UInt16,System.UInt16)">
            <summary>
            Build B_0 for CBC-MAC according to KNX AN159 (NOT according to RFC 3610) in the context of IpSecurity. 
            </summary>
            <param name="sequenceNumber">Sequence Number / Timer.</param>
            <param name="serialNumber">KNX SerialNumber.</param>
            <param name="messageTag">Message tag.</param>
            <param name="length">Length of p_bytes (Q).</param>
            <returns>16 byte B_0.</returns>
        </member>
        <member name="M:Knx.Bus.Common.SecureCryptoEngineAes128.IpSecurityBuildCtr0(System.UInt64,System.UInt64,System.UInt16)">
            <summary>
            Build Ctr_0 for encryption/decryption according to KNX AN159 (NOT according to RFC 3610) in the context of IpSecurity. 
            </summary>
            <param name="sequenceNumber">Sequence Number / Timer.</param>
            <param name="serialNumber">KNX SerialNumber.</param>
            <param name="messageTag">Message tag.</param>
            <returns>16 byte Ctr_0.</returns>
        </member>
        <member name="M:Knx.Bus.Common.SecureCryptoEngineAes128.AssertKeyIsSet">
            <summary>
            Check for key. We explicitly allow SecureCryptoEngine instances 
            without a key but no crypto functions may be called on them.
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.SerialNumber">
            <summary>
            Represents a KNX device serial number. 
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.SerialNumber.Size">
            <summary>
            Gets the size in bytes.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.SerialNumber.Value">
            <summary>
            Gets the serial number as byte array.
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.SerialNumber.None">
            <summary>
            Empty serial number (all 0 bytes)
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.SerialNumber.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.SerialNumber"/> struct.
            </summary>
            <param name="serialNumberString">The serial number as hexadecimal string. Leading 0x and $ is allowed.</param>
        </member>
        <member name="M:Knx.Bus.Common.SerialNumber.#ctor(System.UInt64)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.SerialNumber"/> struct.
            </summary>
            <param name="serialNumber">The serial number as <see cref="T:System.UInt64"/>.</param>
        </member>
        <member name="M:Knx.Bus.Common.SerialNumber.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.SerialNumber"/> struct.
            </summary>
            <param name="serialNumber">The serial number as byte array.</param>
        </member>
        <member name="M:Knx.Bus.Common.SerialNumber.op_Implicit(System.Byte[])~Knx.Bus.Common.SerialNumber">
            <summary>
            Performs an implicit conversion from Byte[] to <see cref="T:Knx.Bus.Common.SerialNumber"/>.
            </summary>
            <param name="serialNumber">The serial number as byte array.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.SerialNumber.op_Implicit(Knx.Bus.Common.SerialNumber)~System.Byte[]">
            <summary>
            Performs an implicit conversion from <see cref="T:Knx.Bus.Common.SerialNumber"/> to Byte[].
            </summary>
            <param name="serialNumber">The serial number.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.SerialNumber.op_Implicit(System.String)~Knx.Bus.Common.SerialNumber">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Knx.Bus.Common.SerialNumber"/>.
            </summary>
            <param name="serialNumberString">The number as hexadecimal string. Leading 0x and $ is allowed.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.SerialNumber.op_Implicit(Knx.Bus.Common.SerialNumber)~System.String">
            <summary>
            Performs an implicit conversion from <see cref="T:Knx.Bus.Common.SerialNumber"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="serialNumber">The serial number.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.SerialNumber.op_Implicit(Knx.Bus.Common.SerialNumber)~System.UInt64">
            <summary>
            Performs an implicit conversion from <see cref="T:Knx.Bus.Common.SerialNumber"/> to <see cref="T:System.UInt64"/>.
            </summary>
            <param name="serialNumber">The serial number.</param>
            <returns>
            The result of the conversion.
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.SerialNumber.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.SerialNumber.ToString(System.String,System.IFormatProvider)">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <param name="format">The format.</param>
            <param name="formatProvider">The format provider.</param>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.SerialNumber.TryParse(System.String,Knx.Bus.Common.SerialNumber@)">
            <summary>
            Tries to parse a string into a serial number.
            </summary>
            <param name="serialNumberString">The number as hexadecimal string. Leading 0x and $ is allowed.</param>
            <param name="serialNumber">The serial number object.</param>
            <returns>The operation returns true when it succeeds, otherwise false.</returns>
        </member>
        <member name="M:Knx.Bus.Common.SerialNumber.Equals(Knx.Bus.Common.SerialNumber)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">A serial number object to compare with this object.</param>
            <returns>
            true if the current object is equal to the other parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.SerialNumber.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to this instance.
            </summary>
            <param name="obj">The <see cref="T:System.Object"/> to compare with this instance.</param>
            <returns>
              <c>true</c> if the specified <see cref="T:System.Object"/> is equal to this instance; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.SerialNumber.GetHashCode">
            <summary>
            Returns a hash code for this instance.
            </summary>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table. 
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.SerialNumber.op_Equality(Knx.Bus.Common.SerialNumber,Knx.Bus.Common.SerialNumber)">
            <summary>
            Implements the operator ==.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            true if the left object is equal to the right parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.SerialNumber.op_Inequality(Knx.Bus.Common.SerialNumber,Knx.Bus.Common.SerialNumber)">
            <summary>
            Implements the operator !=.
            </summary>
            <param name="left">The left.</param>
            <param name="right">The right.</param>
            <returns>
            true if the left object is not equal to the right parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:Knx.Bus.Common.SerialNumber.Parse(System.String)">
            <summary>
            Parses the specified serial number string into a serial number.
            </summary>
            <param name="serialNumberString">The number as hexadecimal string. Starting 0x and $ is allowed</param>
            <returns>The serial number object.</returns>
        </member>
        <member name="T:Knx.Bus.Common.SerialNumberReadSelector">
            <summary>
            Specifies which devices shall respond to a SerialNumberRead
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.SerialNumberReadSelector.ProgMode">
            <summary>
            The device(s) in programming mode
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.SerialNumberReadSelector.ExFactoryState">
            <summary>
            The device(s) in ex-factory state
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.SerialNumberReadSelector.PowerReset">
            <summary>
            The device(s) which have recently been powered up
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.SerialNumberTypeConverter">
            <summary>
            TypeConverter for <see cref="T:Knx.Bus.Common.SerialNumber"/>.
            </summary>
            <remarks>Converts <see cref="T:Knx.Bus.Common.SerialNumber"/> from and to UInt64, Byte[] and String.</remarks>
        </member>
        <member name="M:Knx.Bus.Common.SerialNumberTypeConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Knx.Bus.Common.SerialNumberTypeConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
            <inheritdoc />
        </member>
        <member name="M:Knx.Bus.Common.SerialNumberTypeConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
            <inheritdoc />
        </member>
        <member name="M:Knx.Bus.Common.SerialNumberTypeConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Knx.Bus.Common.SupportedLocalServices">
            <summary>
            Describes a value indicating whether the local device supports 
            e.g. only read/write of memory inside or the full featured device management services.
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.SupportedLocalServices.None">
            <summary>
            None
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.SupportedLocalServices.MemoryOnly">
            <summary>
            Device allows memory read/write access
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.SupportedLocalServices.MProp">
            <summary>
            Device supports property services. 
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.SupportedLocalServices.LocalTransportLayer">
            <summary>
            Device supports local transport layer. 
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.TelegramFactory.CreateTelegram(System.Byte[],System.Int32,Knx.Bus.Common.MediumTypes)">
            <summary>
            This method creates a typed telegram object from raw byte data.
            The following types may be returned:
            - <see cref="T:Knx.Bus.Common.Telegrams.MPropTelegram"/>
            - <see cref="T:Knx.Bus.Common.Telegrams.MFunctionPropTelegram"/>
            - <see cref="T:Knx.Bus.Common.Telegrams.LocalServiceTelegram"/>
            - <see cref="T:Knx.Bus.Common.Telegrams.BusmonitorTelegram"/>
            - <see cref="T:Knx.Bus.Common.Telegrams.RawLinkLayerTelegram"/>
            - <see cref="T:Knx.Bus.Common.Telegrams.UnknownRawTelegram"/>
            - all telegram types returned by CreateTelegramFromLinkLayerFrame(), in particular (but not limited to):
            - <see cref="T:Knx.Bus.Common.Telegrams.GroupValueWriteTelegram"/>
            </summary>
            <param name="telegramData">The cEMI telegram data as byte array.</param>
            <param name="telegramLength">If greater than 0, only the number of bytes provided by the telegram length are used for the telegram creation.</param>
            <param name="mediumType">Only relevant for Busmon: the medium type of the interface</param>
            <returns>The typed Telegram object. If no specific type matches the telegram, a Telegram of type <see cref="T:Knx.Bus.Common.Telegrams.RawLinkLayerTelegram"/> is returned.</returns>
        </member>
        <member name="M:Knx.Bus.Common.TelegramFactory.CreateTelegram(System.String,System.Func{System.Byte[],Knx.Bus.Common.Telegrams.Telegram})">
            <summary>
            This method supports different string representations of a telegram including the hlg format.
            </summary>
            <param name="telegramData">Telegram format in any string format.</param>
            <param name="emi1Converter">If not null, the telegrams are expected to be in EMI1 format and the function is called to get a Telegram in cEMI format.</param>
            <returns>The telegram in cEMI format.</returns>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.AdcReadTelegram">
            <summary>
            Telegram class for the A_ADC_Read application layer service
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Telegrams.AdcReadTelegram.#ctor(System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Telegrams.AdcReadTelegram"/> class
            representing an A_ADC_Read.
            </summary>
            <param name="channel">The channel to read</param>
            <param name="readCount">The read count</param>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.AdcReadTelegram.ReadCount">
            <summary>
            Number of desired consecutive CPU accesses to the AD-converter
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.AdcReadTelegram.Channel">
            <summary>
            The channel nr of the AD-converter
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.AdcResponseTelegram">
            <summary>
            Telegram class for the A_ADC_Response application layer service
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Telegrams.AdcResponseTelegram.#ctor(System.Byte,System.Byte,System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Telegrams.AdcReadTelegram"/> class
            representing an A_ADC_Response.
            </summary>
            <param name="channel">The channel to read</param>
            <param name="readCount">The read count</param>
            <param name="adc">The read value</param>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.AdcResponseTelegram.ReadCount">
            <summary>
            Number of desired consecutive CPU accesses to the AD-converter
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.AdcResponseTelegram.Channel">
            <summary>
            The channel nr of the AD-converter
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.AdcResponseTelegram.AdcValue">
            <summary>
            Sum of AD-converter values
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.AdditionalInfo">
            <summary>
            This class represents an instance of additional info which is part of the cEMI specification.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Telegrams.AdditionalInfo.CreateFromcEmiData(System.Byte[],System.Int32)">
            <summary>
            Creates an additional info instance from the binary data of a cEMI telegram.
            </summary>
            <param name="cEmiData">The binary cEMI telegram.</param>
            <param name="pos">The position where the additional info part starts, e.g. the offset to the additional info type to convert.</param>
            <returns>An <see cref="T:Knx.Bus.Common.Telegrams.AdditionalInfo"/> instance representing the additional info provided as binary data in cEMI format,
            or <c>null</c> if something is wrong with the additional info structure.</returns>
        </member>
        <member name="M:Knx.Bus.Common.Telegrams.AdditionalInfo.GetAdditionalInfos(System.Byte[])">
            <summary>
            Returns all additional information elements
            </summary>
            <returns></returns>
        </member>
        <member name="M:Knx.Bus.Common.Telegrams.AdditionalInfo.GetAdditionalInfo(System.Byte[],Knx.Bus.Common.Telegrams.AdditionalInfoTypeIds)">
            <summary>
            Returns a specific additional information element
            </summary>
            <returns></returns>
        </member>
        <member name="M:Knx.Bus.Common.Telegrams.AdditionalInfo.GetAdditionalInfo``1(System.Byte[])">
            <summary>
            Returns a specific additional information element
            </summary>
            <returns></returns>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.AdditionalInfo.Id">
            <summary>
            Returns the additional info ID as typed enum value. 
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.AdditionalInfo.SizeInBytes">
            <summary>
            Gets the size in bytes of the additional info.
            </summary>
            <value>The size in bytes.</value>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.AdditionalInfo.Data">
            <summary>
            Gets the payload data of the additional info.
            </summary>
            <value>The payload data.</value>
        </member>
        <member name="M:Knx.Bus.Common.Telegrams.AdditionalInfo.GetAscEmiData">
            <summary>
            Gets the additional info data as byte array in the cEMI binary format.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.AdditionalInfoTypeIds">
            <summary>
            Type IDs of the cEMI additional information types. The types and the specification of the data are defined in the KNX handbook.
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.Telegrams.AdditionalInfoTypeIds.PlMediumInformation">
            <summary>
            PL medium information.
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.Telegrams.AdditionalInfoTypeIds.RfMediumInformation">
            <summary>
            RF medium information.
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.Telegrams.AdditionalInfoTypeIds.BusmonStatusInfo">
            <summary>
            Busmonitor status information.
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.Telegrams.AdditionalInfoTypeIds.TimestampRelative">
            <summary>
            Relative timestamp information.
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.Telegrams.AdditionalInfoTypeIds.TimeDelayUntilSending">
            <summary>
            Send delay information.
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.Telegrams.AdditionalInfoTypeIds.ExtendedTimestampRelative">
            <summary>
            Extended relative timestamp information.
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.Telegrams.AdditionalInfoTypeIds.BiBatInfo">
            <summary>
            Bidirectional battery frame info.
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.Telegrams.AdditionalInfoTypeIds.RfMultiInfo">
            <summary>
            RF multi channel and further info.
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.Telegrams.AdditionalInfoTypeIds.RfPrePostAmble">
            <summary>
            RF Preamble and postamble
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.Telegrams.AdditionalInfoTypeIds.RfFastAck">
            <summary>
            RF Fast Ack information.
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.Telegrams.AdditionalInfoTypeIds.ManufacturerSpecific">
            <summary>
            Manufacturer specific data.
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.AuthorizeRequestTelegram">
            <summary>
            Telegram class for the A_Authorize_Request application layer service
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Telegrams.AuthorizeRequestTelegram.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Telegrams.AuthorizeRequestTelegram"/> class
            representing an A_Authorize_Request.
            </summary>
            <param name="key">The BCU key to use</param>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.AuthorizeRequestTelegram.Key">
            <summary>
            Gets or sets the key
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.AuthorizeResponseTelegram">
            <summary>
            Telegram class for the A_Authorize_Response application layer service
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Telegrams.AuthorizeResponseTelegram.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Telegrams.AuthorizeResponseTelegram"/> class
            representing an A_Authorize_Response.
            </summary>
            <param name="level">The access level granted</param>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.AuthorizeResponseTelegram.Level">
            <summary>
            Gets or sets the granted access level
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.BiBatInfo">
            <summary>
            This class represents the cEMI bidirectional battery frame info.
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.BroadcastCommunicationTelegram">
            <summary>
            Base class for messages that are usually (but not necessarily) sent via broadcast
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.BusmonInfo">
            <summary>
            This class represents the cEMI busmon status info.
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.BusmonitorTelegram">
            <summary>
            Telegram class for Busmon_ind services
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.BusmonitorTelegram.CheckSum">
            <summary>
            Gets the check sum (only for TP).
            </summary>
            <value>
            The check sum.
            </value>  
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.BusmonitorTelegram.Telegrams">
            <summary>
            Gets the enclosed telegram(s).
            </summary>
            <value>
            The enclosed telegram(s).
            </value>  
            <remarks>
            <para>
            The telegrams may be of the following types:
            <list type="bullet">
            <item><c>null</c> if the data cannot be interpreted</item>
            <item><see cref="T:Knx.Bus.Common.Telegrams.RawLinkLayerTelegram"/> with <see cref="P:Knx.Bus.Common.Telegrams.LinkLayerTelegram.IsImmediateAck"/>=true if the data represents an TP1 immediate ACK</item>
            <item>A subtype of <see cref="T:Knx.Bus.Common.Telegrams.LinkLayerTelegram"/> if the data is a valid frame</item>
            </list>
            </para>
            <para>Note: BiBat may put multiple KNX messages in one RF block. This is currently not supported by Falcon.</para>
            </remarks>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.BusmonitorTelegram.Telegram">
            <summary>
            Gets the first converted busmonitor frame as telegram.
            </summary>
            <value>
            The converted telegram.
            </value>  
        </member>
        <member name="M:Knx.Bus.Common.Telegrams.BusmonitorTelegram.ConvertBusmonFrame(System.Byte[],Knx.Bus.Common.MediumTypes,System.DateTime)">
            <summary>
            Extracts a cEMI representation of the contained telegram
            </summary>
            <param name="telegramData">The raw L_Busmon.ind data</param>
            <param name="mediumType">The medium type if known (as frame formats on th medium differ)</param>
            <param name="timestamp">The timestamp</param>
            <returns></returns>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.ConfirmedRestartResponseTelegram">
            <summary>
            Telegram class for the A_Restart_Response application layer service
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Telegrams.ConfirmedRestartResponseTelegram.#ctor(System.TimeSpan,Knx.Bus.Common.ConfirmedRestartErrorCodes)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Telegrams.ConfirmedRestartResponseTelegram"/> class
            representing an A_Restart_Response.
            </summary>
            <param name="processTime">The estimated time to process</param>
            <param name="errorCode">The error code</param>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.ConfirmedRestartResponseTelegram.ProcessTime">
            <summary>
            Worst case time required by the remote Application Layer user needs for the execution of the requested Master Reset
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.ConfirmedRestartResponseTelegram.ErrorCode">
            <summary>
            Indication about success or failure of the Master Reset request
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.ConfirmedRestartTelegram">
            <summary>
            Telegram class for the A_Restart application layer service (confirmed restart or master reset)
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Telegrams.ConfirmedRestartTelegram.#ctor(Knx.Bus.Common.ConfirmedRestartEraseCodes,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Telegrams.ConfirmedRestartTelegram"/> class
            representing an A_Restart (confirmed restart or master reset).
            </summary>
            <param name="eraseCode">The erase code</param>
            <param name="channelNumber">The channel number</param>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.ConfirmedRestartTelegram.EraseCode">
            <summary>
            Indication of Resources that shall be reset prior to resetting the device
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.ConfirmedRestartTelegram.ChannelNumber">
            <summary>
            Number of the application channel that shall be reset or 00h
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.ConnectionStatusTelegram">
            <summary>
            Dummy telegram class used to communicate changes in the connection status
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.ControlField1.AddressExtensionType">
            <summary>
            Gets the AET. (See: KSG512-01 SystemBroadcast renamed to Address Extension Type)
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.ControlField1.IsAcknowledged">
            <summary>
            Acknowledge request flag
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.DeviceDescriptorReadTelegram">
            <summary>
            Telegram class for the A_DeviceDescriptor_Read application layer service
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Telegrams.DeviceDescriptorReadTelegram.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Telegrams.DeviceDescriptorReadTelegram"/> class
            representing an A_DeviceDescriptor_Read.
            </summary>
            <param name="descriptorType">The descriptor type</param>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.DeviceDescriptorReadTelegram.DescriptorType">
            <summary>
            Type of the Device Descriptor (0 for mask version)
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.DeviceDescriptorResponseTelegram">
            <summary>
            Telegram class for the A_DeviceDescriptor_Response (or A_DeviceDescriptor_InfoReport) application layer service for type=0
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Telegrams.DeviceDescriptorResponseTelegram.#ctor(System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Telegrams.DeviceDescriptorResponseTelegram"/> class
            representing an A_DeviceDescriptor_Response (or A_DeviceDescriptor_InfoReport) with descriptor type 0.
            </summary>
            <param name="maskVersion">The device descriptor type 0 (mask version) to report</param>
        </member>
        <member name="M:Knx.Bus.Common.Telegrams.DeviceDescriptorResponseTelegram.#ctor(System.Byte,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Telegrams.DeviceDescriptorResponseTelegram"/> class
            representing an A_DeviceDescriptor_Response (or A_DeviceDescriptor_InfoReport) with any descriptor type
            </summary>
            <param name="descriptorType">The device descriptor type to report</param>
            <param name="data">The data to report</param>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.DeviceDescriptorResponseTelegram.DescriptorType">
            <summary>
            Type of the Device Descriptor (0 for mask version)
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.DeviceDescriptorResponseTelegram.MaskVersion">
            <summary>
            If <see cref="P:Knx.Bus.Common.Telegrams.DeviceDescriptorResponseTelegram.DescriptorType"/> = 0, the mask version
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.DomainAddressReadTelegram">
            <summary>
            Telegram class for the A_DomainAddress_Read application layer service
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Telegrams.DomainAddressReadTelegram.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Telegrams.DomainAddressReadTelegram"/> class
            representing an A_DomainAddress_Read.
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.DomainAddressResponseTelegram">
            <summary>
            Telegram class for the A_DomainAddress_Response application layer service
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Telegrams.DomainAddressResponseTelegram.#ctor(Knx.Bus.Common.DomainAddress)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Telegrams.DomainAddressResponseTelegram"/> class
            representing an A_DomainAddress_Response.
            </summary>
            <param name="domainAddress">The domain address</param>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.DomainAddressResponseTelegram.DomainAddress">
            <summary>
            The value of the Domain Address
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.DomainAddressSelectiveReadType0Telegram">
            <summary>
            Telegram class for the A_DomainAddressSelective_Read application layer service with type=0 (for PL).
            See KNX Handbook 3/5/2 2.12.1.1.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Telegrams.DomainAddressSelectiveReadType0Telegram.#ctor(Knx.Bus.Common.DomainAddress,System.UInt16,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Telegrams.DomainAddressSelectiveReadType0Telegram"/> class
            representing an A_DomainAddressSelective_Read with type=0.
            </summary>
            <param name="domainAddress">The domain address</param>
            <param name="startAddress">The first individual address</param>
            <param name="range">The number of addresses to scan</param>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.DomainAddressSelectiveReadType0Telegram.DomainAddress">
            <summary>
            The PL Domain address (one byte)
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.DomainAddressSelectiveReadType0Telegram.StartAddress">
            <summary>
            This shall be the start address of the range of Individual Addresses to which the Management Server 
            shall compare its own Individual Address.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.DomainAddressSelectiveReadType0Telegram.Range">
            <summary>
            This shall be the range of Individual Addresses, starting from StartAddress and ending at 
            StartAddress + Range to which a Management Server shall compare its own Individual Address.
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.DomainAddressSelectiveReadType1Telegram">
            <summary>
            Telegram class for the A_DomainAddressSelective_Read application layer service with type=1 (for RF).
            See KNX Handbook 3/5/2 2.12.1.2.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Telegrams.DomainAddressSelectiveReadType1Telegram.#ctor(Knx.Bus.Common.DomainAddress,Knx.Bus.Common.DomainAddress)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Telegrams.DomainAddressSelectiveReadType1Telegram"/> class
            representing an A_DomainAddressSelective_Read with type=1.
            </summary>
            <param name="domainAddressStart">The first domain address</param>
            <param name="domainAddressEnd">The last domain address</param>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.DomainAddressSelectiveReadType1Telegram.DomainAddressStart">
            <summary>
            This shall be the start_address of the range of Domain Addresses to which the Management Server shall compare its own Domain Address.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.DomainAddressSelectiveReadType1Telegram.DomainAddressEnd">
            <summary>
            This shall be the end_address of the range of Domain Addresses to which the Management Server shall compare its own Domain Address.
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.DomainAddressSelectiveReadTypeFETelegram">
            <summary>
            Telegram class for the A_DomainAddressSelective_Read application layer service with type=0xFE
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Telegrams.DomainAddressSelectiveReadTypeFETelegram.#ctor(System.UInt16,System.UInt16,System.Byte,System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Telegrams.DomainAddressSelectiveReadTypeFETelegram"/> class
            representing an A_DomainAddressSelective_Read with type=0xFE.
            </summary>
            <param name="manufacturerId">The manufacturer ID</param>
            <param name="objectType">The interface object type</param>
            <param name="pid">The property ID</param>
            <param name="parameters">Parameters</param>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.DomainAddressSerialNumberReadTelegram">
            <summary>
            Telegram class for the A_DomainAddressSerialNumberRead_Read application layer service
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Telegrams.DomainAddressSerialNumberReadTelegram.#ctor(Knx.Bus.Common.SerialNumber)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Telegrams.DomainAddressSerialNumberReadTelegram"/> class
            representing an A_DomainAddressSerialNumberRead_Read.
            </summary>
            <param name="serialNumber">The serial number of the device to read</param>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.DomainAddressSerialNumberReadTelegram.SerialNumber">
            <summary>
            The KNX Serial Number of the remote device
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.DomainAddressSerialNumberResponseTelegram">
            <summary>
            Telegram class for the A_DomainAddressSerialNumber_Response application layer services
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Telegrams.DomainAddressSerialNumberResponseTelegram.#ctor(Knx.Bus.Common.SerialNumber,Knx.Bus.Common.DomainAddress)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Telegrams.DomainAddressSerialNumberResponseTelegram"/> class
            representing an A_DomainAddressSerialNumber_Response.
            </summary>
            <param name="serialNumber">The serial number of the device</param>
            <param name="domainAddress">The domain address to write (A_DomainAddressSerialNumberRead_Write) or report (A_DomainAddressSerialNumberRead_Response)</param>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.DomainAddressSerialNumberResponseTelegram.SerialNumber">
            <summary>
            The KNX Serial Number of the remote device
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.DomainAddressSerialNumberResponseTelegram.DomainAddress">
            <summary>
            The value of the Domain Address
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.DomainAddressSerialNumberWriteTelegram">
            <summary>
            Telegram class for the A_DomainAddressSerialNumber_Write application layer services
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Telegrams.DomainAddressSerialNumberWriteTelegram.#ctor(Knx.Bus.Common.SerialNumber,Knx.Bus.Common.DomainAddress)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Telegrams.DomainAddressSerialNumberWriteTelegram"/> class
            representing an A_DomainAddressSerialNumber_Write.
            </summary>
            <param name="serialNumber">The serial number of the device</param>
            <param name="domainAddress">The domain address to write (A_DomainAddressSerialNumberRead_Write) or report (A_DomainAddressSerialNumberRead_Response)</param>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.DomainAddressWriteTelegram">
            <summary>
            Telegram class for the A_DomainAddress_Write application layer service
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Telegrams.DomainAddressWriteTelegram.#ctor(Knx.Bus.Common.DomainAddress)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Telegrams.DomainAddressWriteTelegram"/> class
            representing an A_DomainAddress_Write.
            </summary>
            <param name="domainAddress">The domain address</param>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.DomainAddressWriteTelegram.DomainAddress">
            <summary>
            The new value of the Domain Address
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.ExtendedTimestampRelativeInfo">
            <summary>
            This class represents the cEMI extended relative timestamp info.
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.FunctionPropertyCommandTelegram">
            <summary>
            Telegram class for the A_FunctionPropertyCommand application layer service
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Telegrams.FunctionPropertyCommandTelegram.#ctor(System.Byte,System.Byte,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Telegrams.FunctionPropertyCommandTelegram"/> class
            representing an A_FunctionPropertyCommand.
            </summary>
            <param name="objectIndex">The interface object index</param>
            <param name="propertyId">The property ID</param>
            <param name="data">The data</param>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.FunctionPropertyCommandTelegram.ObjectIndex">
            <summary>
            The object index of the object addressed
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.FunctionPropertyCommandTelegram.PropertyId">
            <summary>
            The property id of the Property of the object
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.FunctionPropertyCommandTelegram.Command">
            <summary>
            Input data to the function
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.FunctionPropertyExtCommandTelegram">
            <summary>
            Telegram class for the A_FunctionPropertyExtCommand application layer service
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.FunctionPropertyExtStateReadTelegram">
            <summary>
            Telegram class for the A_FunctionPropertyExtState_Read application layer service
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.FunctionPropertyExtStateResponseTelegram">
            <summary>
            Telegram class for the A_FunctionPropertyExtState_Response application layer service
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.FunctionPropertyStateReadTelegram">
            <summary>
            Telegram class for the A_FunctionPropertyState_Read application layer service
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Telegrams.FunctionPropertyStateReadTelegram.#ctor(System.Byte,System.Byte,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Telegrams.FunctionPropertyStateReadTelegram"/> class
            representing an A_FunctionPropertyState_Read.
            </summary>
            <param name="objectIndex">The interface object index</param>
            <param name="propertyId">The property ID</param>
            <param name="data">The data</param>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.FunctionPropertyStateReadTelegram.ObjectIndex">
            <summary>
            The object index of the object addressed
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.FunctionPropertyStateReadTelegram.PropertyId">
            <summary>
            The property id of the Property of the object
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.FunctionPropertyStateReadTelegram.Command">
            <summary>
            Input data to the function
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.FunctionPropertyStateResponseTelegram">
            <summary>
            Telegram class for the A_FunctionPropertyState_Response application layer service
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Telegrams.FunctionPropertyStateResponseTelegram.#ctor(System.Byte,System.Byte,Knx.Bus.Common.FunctionPropertyResult)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Telegrams.FunctionPropertyStateResponseTelegram"/> class
            representing an A_FunctionPropertyState_Response.
            </summary>
            <param name="objectIndex">The interface object index</param>
            <param name="propertyId">The property ID</param>
            <param name="propertyData">The result</param>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.FunctionPropertyStateResponseTelegram.ObjectIndex">
            <summary>
            The object index of the object addressed
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.FunctionPropertyStateResponseTelegram.PropertyId">
            <summary>
            The property id of the Property of the object
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.FunctionPropertyStateResponseTelegram.ReturnCode">
            <summary>
            Error code returned by the function
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.FunctionPropertyStateResponseTelegram.CommandData">
            <summary>
            Output data from the function
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.GroupTelegram">
            <summary>
            Telegram class for group addressed application layer service
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Telegrams.GroupTelegram.#ctor(Knx.Bus.Common.APci,Knx.Bus.Common.GroupAddress)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Telegrams.GroupTelegram"/> class.
            </summary>
            <param name="apci">The APCI</param>
            <param name="targetAddress">The group address</param>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.GroupValueReadTelegram">
            <summary>
            Telegram class for A_GroupValue_Read application layer service
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Telegrams.GroupValueReadTelegram.#ctor(Knx.Bus.Common.GroupAddress)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Telegrams.GroupValueReadTelegram"/> class
            representing an A_GroupValue_Read.
            </summary>
            <param name="targetAddress">The group address</param>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.GroupValueResponseTelegram">
            <summary>
            Telegram class for A_GroupValue_Response application layer service
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Telegrams.GroupValueResponseTelegram.#ctor(Knx.Bus.Common.GroupAddress,Knx.Bus.Common.GroupValues.GroupValue)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Telegrams.GroupValueResponseTelegram"/> class
            representing an A_GroupValue_Response.
            </summary>
            <param name="targetAddress">The group address</param>
            <param name="value">The value</param>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.GroupValueWriteTelegram">
            <summary>
            Telegram class for A_GroupValue_Write application layer service
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Telegrams.GroupValueWriteTelegram.#ctor(Knx.Bus.Common.GroupAddress,Knx.Bus.Common.GroupValues.GroupValue)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Telegrams.GroupValueWriteTelegram"/> class
            representing an A_GroupValue_Write or A_GroupValue_Response.
            </summary>
            <param name="targetAddress">The group address</param>
            <param name="value">The value</param>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.IndividualAddressReadTelegram">
            <summary>
            Telegram class for the A_IndividualAddress_Read application layer service
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Telegrams.IndividualAddressReadTelegram.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Telegrams.IndividualAddressReadTelegram"/> class
            representing an A_IndividualAddress_Read.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Telegrams.IndividualAddressReadTelegram.#ctor(Knx.Bus.Common.Priority)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Telegrams.IndividualAddressReadTelegram"/> class
            representing an A_IndividualAddress_Read.
            </summary>
            <param name="priority">the message priority to use</param>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.IndividualAddressResponseTelegram">
            <summary>
            Telegram class for the A_IndividualAddress_Response application layer service
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Telegrams.IndividualAddressResponseTelegram.#ctor(Knx.Bus.Common.Priority)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Telegrams.IndividualAddressResponseTelegram"/> class
            representing an A_IndividualAddress_Read or A_IndividualAddress_Response.
            </summary>
            <param name="priority">the message priority to use</param>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.IndividualAddressSerialNumberReadTelegram">
            <summary>
            Telegram class for the A_IndividualAddressSerialNumber_Read application layer service
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Telegrams.IndividualAddressSerialNumberReadTelegram.#ctor(Knx.Bus.Common.SerialNumber)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Telegrams.IndividualAddressSerialNumberReadTelegram"/> class
            representing an A_IndividualAddressSerialNumber_Read.
            </summary>
            <param name="serialNumber">The serial number of the device to read</param>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.IndividualAddressSerialNumberReadTelegram.SerialNumber">
            <summary>
            The KNX Serial Number
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.IndividualAddressSerialNumberResponseTelegram">
            <summary>
            Telegram class for the A_IndividualAddressSerialNumber_Response application layer service
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Telegrams.IndividualAddressSerialNumberResponseTelegram.#ctor(Knx.Bus.Common.SerialNumber)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Telegrams.IndividualAddressSerialNumberResponseTelegram"/> class
            representing an A_IndividualAddressSerialNumber_Response.
            </summary>
            <param name="serialNumber">The serial number of the device</param>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.IndividualAddressSerialNumberWriteTelegram">
            <summary>
            Telegram class for the A_IndividualAddressSerialNumber_Write application layer service
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Telegrams.IndividualAddressSerialNumberWriteTelegram.#ctor(Knx.Bus.Common.SerialNumber,Knx.Bus.Common.IndividualAddress)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Telegrams.IndividualAddressSerialNumberWriteTelegram"/> class
            representing an A_IndividualAddressSerialNumber_Write.
            </summary>
            <param name="serialNumber">The serial number of the device</param>
            <param name="individualAddress">The individual address to write</param>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.IndividualAddressSerialNumberWriteTelegram.SerialNumber">
            <summary>
            The KNX Serial Number
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.IndividualAddressSerialNumberWriteTelegram.IndividualAddress">
            <summary>
            The new value of the Individual Address
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.IndividualAddressWriteTelegram">
            <summary>
            Telegram class for the A_IndividualAddress_Write application layer service
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Telegrams.IndividualAddressWriteTelegram.#ctor(Knx.Bus.Common.IndividualAddress)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Telegrams.IndividualAddressWriteTelegram"/> class
            representing an A_IndividualAddress_Write.
            </summary>
            <param name="address">The individual address to write</param>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.IndividualAddressWriteTelegram.NewAddress">
            <summary>
            The new value of the Individual Address
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.KeyResponseTelegram">
            <summary>
            Telegram class for the A_Key_Response application layer service
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Telegrams.KeyResponseTelegram.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Telegrams.KeyResponseTelegram"/> class
            representing an A_Key_Response.
            </summary>
            <param name="level">The access level</param>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.KeyResponseTelegram.Level">
            <summary>
            Gets or sets the the access level for which the associated key has been modified, 
            or the minimum access level if it hasn’t been modified
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.KeyWriteTelegram">
            <summary>
            Telegram class for the A_Key_Write application layer service
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Telegrams.KeyWriteTelegram.#ctor(System.Byte,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Telegrams.KeyWriteTelegram"/> class
            representing an A_Key_Write.
            </summary>
            <param name="level">The access level</param>
            <param name="accessKey">The BCU key to write</param>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.KeyWriteTelegram.Level">
            <summary>
            Gets or sets the access level for which the key shall be modified
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.KeyWriteTelegram.Key">
            <summary>
            Gets or sets the new value of the key or FFFFFFFFh to delete the key
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.LinkLayerTelegram">
            <summary>
            Base class for all messages representing data telegrams on the bus
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.LinkLayerTelegram.ContainsSecret">
            <summary>
            Returns true if the telegram contains some secret that should not be stored e.g. in a telegram trace
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.LinkLayerTelegram.BusmonCheckSum">
            <summary>
            Returns the busmon check sum if applicable. 
            This value is only valid if the <see cref="P:Knx.Bus.Common.Telegrams.LinkLayerTelegram.IsBusmonIndication"/> property is true and the medium type was TP.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.LinkLayerTelegram.OffsetToData">
            <summary>
            Offset within telegram to the first byte after the APCI
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.LinkLayerTelegram.Data">
            <summary>
            Beware: for Length == 1, this returns the lower 6 bit of the APCI field,
            for Length > 1, this returns the data after the APCI field (without the 6 bits even for short APCIs)
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Telegrams.LinkLayerTelegram.IsShortApci(System.Int32)">
            <summary>
            Returns true if the APCI given is encoded in 4 bits only. The rest of 6 bits in the second
            APCI octet is either reserved (and 0) or used for APDU data.
            </summary>
            <param name="apci">The APCI (10 bit)</param>
            <returns></returns>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.LinkLayerTelegram.HasShortApci">
            <summary>
            Returns true if the telegram contains an APCI (<see cref="P:Knx.Bus.Common.Telegrams.LinkLayerTelegram.HasApci"/>) and the APCI
            found is one of the 4 bit APCIs
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.LinkLayerTelegram.HasApci">
            <summary>
            Returns true if the telegram is long enough to include the APCI field
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Telegrams.LinkLayerTelegram.IsResponse(Knx.Bus.Common.BusData)">
            <summary>
            Check whether <paramref name="telegram"/> is the application layer response to this telegram
            </summary>
            <param name="telegram"></param>
            <returns></returns>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.LinkLayerTelegram.IsBroadcast">
            <summary>
            Returns true of the telegram is a broadcast telegram (to "group address 0"). To determine if the telegram is a 
            system broadcast check the appropriate flag in the <see cref="P:Knx.Bus.Common.Telegrams.LinkLayerTelegram.ControlField1"/>.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Telegrams.LinkLayerTelegram.GetAdditionalInformationElements">
            <summary>
            Returns all additional information elements
            </summary>
            <returns></returns>
        </member>
        <member name="M:Knx.Bus.Common.Telegrams.LinkLayerTelegram.GetAdditionalInformation``1">
            <summary>
            Returns a specific additional information element
            </summary>
            <returns></returns>
        </member>
        <member name="M:Knx.Bus.Common.Telegrams.LinkLayerTelegram.InitializeUnicast">
            <summary>
            Initialize LL, NL and TL fields for unicast (individually addressed) communication
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Telegrams.LinkLayerTelegram.InitializeMulticast">
            <summary>
            Initialize LL, NL and TL fields for multicast (group addressed) communication
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Telegrams.LinkLayerTelegram.InitializeBroadcast">
            <summary>
            Initialize LL, NL and TL fields for broadcast communication
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Telegrams.LocalServiceTelegram.#ctor(System.UInt16,System.Int32)">
            <summary>
            Creates PcGetValue.Req telegram.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Telegrams.LocalServiceTelegram.#ctor(System.UInt16,System.Byte[],System.Boolean)">
            <summary>
            Creates PcSetValue.Req telegram.
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.MBaseTelegram">
            <summary>
            Base class for all M telegram classes
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.MemoryExtendedReadResponseTelegram">
            <summary>
            Telegram class for the A_MemoryExtended_ReadResponse application layer service
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.MemoryExtendedReadTelegram">
            <summary>
            Telegram class for the A_MemoryExtended_Read application layer service
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.MemoryExtendedWriteResponseTelegram">
            <summary>
            Telegram class for the A_MemoryExtended_WriteResponse application layer service
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.MemoryExtendedWriteTelegram">
            <summary>
            Telegram class for the A_MemoryExtended_Write application layer service
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.MemoryReadTelegram">
            <summary>
            Telegram class for the A_Memory_Read/A_UserMemory_Read/A_RouterMemory_Read/A_RoutingTable_Read application layer services
            (TODO: official name for router services?)
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Telegrams.MemoryReadTelegram.#ctor(Knx.Bus.Common.Telegrams.MemoryTypes,System.UInt32,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Telegrams.MemoryReadTelegram"/> class
            representing an A_Memory_Read/A_UserMemory_Read/A_RouterMemory_Read/A_RoutingTable_Read.
            </summary>
            <param name="memoryType">The memory address space</param>
            <param name="startAddress">The start address</param>
            <param name="count">The number of bytes to read</param>
        </member>
        <member name="M:Knx.Bus.Common.Telegrams.MemoryReadTelegram.AddressAndCountSize(Knx.Bus.Common.Telegrams.MemoryTypes)">
            <summary>
            Returns the number of bytes used for address and count information 
            (including the 6 bit field in the second APCI byte)
            </summary>
            <param name="memoryType">The memory type</param>
            <returns></returns>
        </member>
        <member name="M:Knx.Bus.Common.Telegrams.MemoryReadTelegram.MaxDataLength(Knx.Bus.Common.Telegrams.MemoryTypes)">
            <summary>
            Returns the maximum count value
            </summary>
            <param name="memoryType">The memory type</param>
            <returns></returns>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.MemoryReadTelegram.Address">
            <summary>
            Specifies the start address
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.MemoryReadTelegram.Count">
            <summary>
            Number of octets to be read beginning with the start address to increasing addresses
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.MemoryResponseTelegram">
            <summary>
            Telegram class for the A_Memory_Response/A_UserMemory_Response/A_RouterMemory_Response/A_RoutingTable_Response application layer services.
            (TODO: official name for router services?)
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Telegrams.MemoryResponseTelegram.#ctor(Knx.Bus.Common.Telegrams.MemoryTypes,System.UInt32,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Telegrams.MemoryResponseTelegram"/> class
            representing an A_Memory_Response/A_UserMemory_Response/A_RouterMemory_Response/A_RoutingTable_Response.
            </summary>
            <param name="memoryType">The memory address space</param>
            <param name="startAddress">The start address</param>
            <param name="memoryData">The data</param>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.MemoryResponseTelegram.Address">
            <summary>
            Specifies the start address
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.MemoryResponseTelegram.MemoryData">
            <summary>
            the octet(s) read or no data if there was a problem
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.MemoryResponseTelegram.Count">
            <summary>
            Number of octets read beginning with the start address to increasing addresses, or zero to indicate a problem
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.MemoryWriteTelegram">
            <summary>
            Telegram class for the A_Memory_Write/A_UserMemory_Write/A_RouterMemory_Write/A_RoutingTable_Write
            application layer services.
            (TODO: official name for router services?)
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Telegrams.MemoryWriteTelegram.#ctor(Knx.Bus.Common.Telegrams.MemoryTypes,System.UInt32,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Telegrams.MemoryWriteTelegram"/> class
            representing an A_Memory_Write/A_UserMemory_Write/A_RouterMemory_Write/A_RoutingTable_Write.
            </summary>
            <param name="memoryType">The memory address space</param>
            <param name="startAddress">The start adress</param>
            <param name="memoryData">The data</param>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.MemoryWriteTelegram.Address">
            <summary>
            Specifies the start address
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.MemoryWriteTelegram.MemoryData">
            <summary>
            the octet(s) to be written
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.MemoryWriteTelegram.Count">
            <summary>
            Number of octets to be written beginning with the start address to increasing addresses
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.MFunctionPropTelegram">
            <summary>
            Telegram class for the MFuncPropCommand_Req, MFuncPropState_Req and and MFuncProp_Con services
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.MPropTelegram">
            <summary>
            Telegram class for the MPropRead_Req and MPropWrite_Req services
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Telegrams.MPropTelegram.#ctor(System.UInt16,System.Byte,System.Byte,System.Byte,System.UInt16)">
            <summary>
            Creates MPropRead.Req telegram.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Telegrams.MPropTelegram.#ctor(System.UInt16,System.Byte,System.Byte,System.Byte,System.UInt16,System.Byte[])">
            <summary>
            Creates MPropWrite.Req telegram.
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.MResetIndTelegram">
            <summary>
            Telegram class for the MReset_Ind services
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.MResetReqTelegram">
            <summary>
            Telegram class for the MReset_Req services
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.NetworkParameterReadTelegram">
            <summary>
            Telegram class for the A_NetworkParameter_Read application layer service
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Telegrams.NetworkParameterReadTelegram.#ctor(System.Int32,System.UInt16,System.Byte,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Telegrams.NetworkParameterReadTelegram"/> class
            representing an A_NetworkParameter_Read or A_NetworkParameter_Write.
            </summary>
            <param name="routingCounter">The hop count to use</param>
            <param name="objectType">The interface object type</param>
            <param name="propertyId">The property ID</param>
            <param name="testInfo">Value against which the resource indicated by objectType and propertyId is tested</param>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.NetworkParameterReadTelegram.ObjectType">
            <summary>
            The Interface Object Type part of the network parameter type identifier
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.NetworkParameterReadTelegram.PropertyID">
            <summary>
            The property ID part of the network parameter type identifier
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.NetworkParameterReadTelegram.TestInfo">
            <summary>
            Value against which the resource indicated by ObjectType and PropertyID is tested
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.NetworkParameterResponseTelegram">
            <summary>
            Telegram class for the A_NetworkParameter_Response (or A_NetworkParameter_InfoReport) application layer service
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Telegrams.NetworkParameterResponseTelegram.#ctor(System.Int32,System.UInt16,System.Byte,System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Telegrams.NetworkParameterResponseTelegram"/> class
            representing an A_NetworkParameter_Response (or A_NetworkParameter_InfoReport).
            </summary>
            <param name="routingCounter">The hop count to use</param>
            <param name="objectType">The interface object type</param>
            <param name="propertyId">The interface object type</param>
            <param name="testInfo">Value against which the resource indicated by objectType and propertyId is tested</param>
            <param name="testResult">response value</param>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.NetworkParameterResponseTelegram.ObjectType">
            <summary>
            The Interface Object Type part of the network parameter type identifier
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.NetworkParameterResponseTelegram.PropertyID">
            <summary>
            The property ID part of the network parameter type identifier
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.NetworkParameterResponseTelegram.TestInfo">
            <summary>
            Value against which the resource indicated by ObjectType and PropertyID is tested
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.NetworkParameterResponseTelegram.TestResult">
            <summary>
            Response (dependent on ObjectType and PropertyID)
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.NetworkParameterWriteTelegram">
            <summary>
            Telegram class for the A_NetworkParameter_Write application layer service
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Telegrams.NetworkParameterWriteTelegram.#ctor(System.Int32,System.UInt16,System.Byte,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Telegrams.NetworkParameterWriteTelegram"/> class
            representing an A_NetworkParameter_Read or A_NetworkParameter_Write.
            </summary>
            <param name="routingCounter">The hop count to use</param>
            <param name="objectType">The interface object type</param>
            <param name="propertyId">The interface object type</param>
            <param name="testInfo">Value against which the resource indicated by objectType and propertyId is tested</param>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.NetworkParameterWriteTelegram.ObjectType">
            <summary>
            The Interface Object Type part of the network parameter type identifier
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.NetworkParameterWriteTelegram.PropertyID">
            <summary>
            The property ID part of the network parameter type identifier
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.NetworkParameterWriteTelegram.TestInfo">
            <summary>
            Value to which the resource indicated by ObjectType and PropertyID shall be set
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.PropertyDescriptionReadTelegram">
            <summary>
            Telegram class for the A_PropertyDescription_Read application layer service
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Telegrams.PropertyDescriptionReadTelegram.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Telegrams.PropertyDescriptionReadTelegram"/> class
            representing an A_PropertyDescription_Read.
            </summary>
            <param name="objectIndex">The interface object index</param>
            <param name="propertyId">The property ID, or 0 to query by index</param>
            <param name="propertyIndex">If <paramref name="propertyId"/> is 0, the property index</param>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.PropertyDescriptionReadTelegram.ObjectIndex">
            <summary>
            The object index of the object addressed
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.PropertyDescriptionReadTelegram.PropertyId">
            <summary>
            The property id of the Property of the object
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.PropertyDescriptionReadTelegram.PropertyIndex">
            <summary>
            Sequential Property number
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.PropertyDescriptionResponseTelegram">
            <summary>
            Telegram class for the A_PropertyDescription_Response application layer service
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Telegrams.PropertyDescriptionResponseTelegram.#ctor(Knx.Bus.Common.PropertyDescription)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Telegrams.PropertyDescriptionResponseTelegram"/> class
            representing an A_PropertyDescription_Response.
            </summary>
            <param name="description">The property description</param>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.PropertyDescriptionResponseTelegram.ObjectIndex">
            <summary>
            The object index of the object addressed
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.PropertyDescriptionResponseTelegram.PropertyId">
            <summary>
            The property id of the Property of the object
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.PropertyDescriptionResponseTelegram.PropertyIndex">
            <summary>
            Sequential Property number
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.PropertyDescriptionResponseTelegram.DataType">
            <summary>
            The Property DataType according to which the Property value is encoded
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.PropertyDescriptionResponseTelegram.WriteEnabled">
            <summary>
            Specifies whether the Property value can be written or not
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.PropertyDescriptionResponseTelegram.MaxSize">
            <summary>
            Maximum number of elements of the array or zero to indicate a problem
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.PropertyDescriptionResponseTelegram.ReadRights">
            <summary>
            Access level to read the Property value
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.PropertyDescriptionResponseTelegram.WriteRights">
            <summary>
            Access level to to the Property value
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.PropertyExtDescriptionReadTelegram">
            <summary>
            Telegram class for the A_PropertyExtDescription_Read application layer service
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.PropertyExtDescriptionResponseTelegram">
            <summary>
            Telegram class for the A_PropertyExtDescription_Response application layer service
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.PropertyExtTelegram">
            <summary>
            Base class for all PropertyExt telegram classes
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.PropertyExtValueTelegram">
            <summary>
            Base class for all PropertyExtValue telegram classes
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.PropertyExtValueInfoReportTelegram">
            <summary>
            Telegram class for the A_PropertyExtValue_InfoReport application layer service
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.PropertyExtValueReadTelegram">
            <summary>
            Telegram class for the A_PropertyExtValue_Read application layer service
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.PropertyExtValueResponseTelegram">
            <summary>
            Telegram class for the A_PropertyExtValue_Response application layer service
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.PropertyExtValueWriteResponseTelegram">
            <summary>
            Telegram class for the A_PropertyExtValue_WriteConRes application layer service
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.PropertyExtValueWriteTelegram">
            <summary>
            Telegram class for the A_PropertyExtValue_WriteCon and A_PropertyExtValue_WriteUnCon application layer service
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.PropertyValueReadTelegram">
            <summary>
            Telegram class for the A_PropertyValue_Read application layer service
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Telegrams.PropertyValueReadTelegram.#ctor(System.Byte,System.Byte,System.Byte,System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Telegrams.PropertyValueReadTelegram"/> class
            representing an A_PropertyValue_Read.
            </summary>
            <param name="objectIndex">The interface object index</param>
            <param name="propertyId">The property ID</param>
            <param name="numberOfElements">The number of elements to read</param>
            <param name="startIndex">The index of the first element to read</param>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.PropertyValueReadTelegram.ObjectIndex">
            <summary>
            The object index of the object addressed
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.PropertyValueReadTelegram.PropertyId">
            <summary>
            The Property ID of the Property of the object
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.PropertyValueReadTelegram.NumberOfElements">
            <summary>
            The number of array elements to be read in the Property value
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.PropertyValueReadTelegram.StartIndex">
            <summary>
            The array index of the first array element to be read
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.PropertyValueResponseTelegram">
            <summary>
            Telegram class for the A_PropertyValue_Response application layer service
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Telegrams.PropertyValueResponseTelegram.#ctor(System.Byte,System.Byte,System.Byte,System.UInt16,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Telegrams.PropertyValueResponseTelegram"/> class
            representing an A_PropertyValue_Write or A_PropertyValue_Response.
            </summary>
            <param name="objectIndex">The interface object index</param>
            <param name="propertyId">The property ID</param>
            <param name="numberOfElements">The number of elements to read</param>
            <param name="startIndex">The index of the first element to read</param>
            <param name="propertyData">The data</param>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.PropertyValueResponseTelegram.ObjectIndex">
            <summary>
            The object index of the object addressed
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.PropertyValueResponseTelegram.PropertyId">
            <summary>
            The Property ID of the Property of the object
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.PropertyValueResponseTelegram.NumberOfElements">
            <summary>
            The number of array elements read in the Property value or zero if problem occurred
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.PropertyValueResponseTelegram.StartIndex">
            <summary>
            The array index of the first array element to be read
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.PropertyValueResponseTelegram.PropertyData">
            <summary>
            The value of the array elements read, or no data, if a problem occurred
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.PropertyValueWriteTelegram">
            <summary>
            Telegram class for the A_PropertyValue_Write application layer service
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Telegrams.PropertyValueWriteTelegram.#ctor(System.Byte,System.Byte,System.Byte,System.UInt16,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Telegrams.PropertyValueWriteTelegram"/> class
            representing an A_PropertyValue_Write or A_PropertyValue_Response.
            </summary>
            <param name="objectIndex">The interface object index</param>
            <param name="propertyId">The property ID</param>
            <param name="numberOfElements">The number of elements to read</param>
            <param name="startIndex">The index of the first element to read</param>
            <param name="propertyData">The data</param>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.PropertyValueWriteTelegram.ObjectIndex">
            <summary>
            The object index of the object addressed
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.PropertyValueWriteTelegram.PropertyId">
            <summary>
            The Property ID of the Property of the object
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.PropertyValueWriteTelegram.NumberOfElements">
            <summary>
            The number of array elements to be written in the Property value
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.PropertyValueWriteTelegram.StartIndex">
            <summary>
            The array index of the first array element to be written
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.PropertyValueWriteTelegram.PropertyData">
            <summary>
            The data to write to the array elements
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.ResetReceivedTelegram">
            <summary>
            Represents a EMI1 Reset_ind service
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.RestartTelegram">
            <summary>
            Telegram class for the A_Restart application layer service (basic restart)
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Telegrams.RestartTelegram.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Telegrams.RestartTelegram"/> class
            representing an A_Restart (basic restart).
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.RfMediumInfo">
            <summary>
            This class represents the cEMI RF medium info.
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.RfMediumInfo.SignalStrength">
            <summary>
            Enumeration with possible signal strengths.
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.Telegrams.RfMediumInfo.SignalStrength.Unknown">
            <summary>
            No measurement (void).
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.Telegrams.RfMediumInfo.SignalStrength.Weak">
            <summary>
            Signal strength is weak.
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.Telegrams.RfMediumInfo.SignalStrength.Medium">
            <summary>
            Signal strength is medium.
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.Telegrams.RfMediumInfo.SignalStrength.Strong">
            <summary>
            Signal strength is strong.
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.RfMediumInfo.BatteryState">
            <summary>
            Enumeration of possible battery states.
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.Telegrams.RfMediumInfo.BatteryState.Weak">
            <summary>
            The battery is weak.
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.Telegrams.RfMediumInfo.BatteryState.Ok">
            <summary>
            The battery is OK.
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.RfMediumInfo.SenderType">
            <summary>
            Enumeration of possible sender types.
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.Telegrams.RfMediumInfo.SenderType.Bidirectional">
            <summary>
            The sender is a bidirectional device.
            </summary>
        </member>
        <member name="F:Knx.Bus.Common.Telegrams.RfMediumInfo.SenderType.Unidirectional">
            <summary>
            The sender is a unidirectional device.
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.RfMultiInfo">
            <summary>
            This class represents the cEMI RF multi info.
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.RoutingBusyTelegram">
            <summary>
            This is produced by the routing connector when a ROUTING_BUSY IP frame is received
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.RoutingBusyTelegram.DeviceState">
            <summary>
            Gets the current device state
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.RoutingBusyTelegram.RoutingBusyControlField">
            <summary>
            Gets the content of the ROUTING_BUSY control field
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.RoutingBusyTelegram.RoutingBusyWaitTime">
            <summary>
            Gets the content of the ROUTING_BUSY wait time field
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.RoutingLostMessageTelegram">
            <summary>
            This is produced by the routing connector when a ROUTING_LOST_MESSAGE IP frame is received
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.RoutingLostMessageTelegram.DeviceState">
            <summary>
            Gets the current device state
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.RoutingLostMessageTelegram.NumberOfLostMessages">
            <summary>
            Gets the number of lost messages
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.RoutingTableOpenTelegram">
            <summary>
            Telegram class for the A_OpenRoutingTable (TODO: is there an official name?) application layer service
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Telegrams.RoutingTableOpenTelegram.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Telegrams.RoutingTableOpenTelegram"/> class
            representing an A_OpenRoutingTable.
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.SecureDataTelegram">
            <summary>
            Telegram class for the S-A_Data application layer service
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Telegrams.SecureDataTelegram.#ctor(Knx.Bus.Common.Telegrams.LinkLayerTelegram)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Telegrams.SecureDataTelegram"/> class by wrapping
            a plain telegram. 
            The resulting SecureSyncTelegram is still unencrypted 
            (<see cref="P:Knx.Bus.Common.Telegrams.SecureTelegram.Unencrypted"/> = <c>true</c>!)
            </summary>
            <param name="plainTelegram"></param>
        </member>
        <member name="M:Knx.Bus.Common.Telegrams.SecureDataTelegram.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Telegrams.SecureDataTelegram"/> class from raw frame data
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.SecureDataTelegram.Decrypted">
            <summary>
            To avoid decrypting the same telegram multiple times, the decryption result is stored here
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.SecureDataTelegram.SeqNr">
            <summary>
            Gets or sets the sequence number
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Telegrams.SecureDataTelegram.ExtractPlainTelegram">
            <summary>
            Extracts the wrapped APDU from an unencrypted (i.e. <see cref="P:Knx.Bus.Common.Telegrams.SecureTelegram.Unencrypted"/> = <c>true</c>) 
            <see cref="T:Knx.Bus.Common.Telegrams.SecureDataTelegram"/>.
            </summary>
            <returns>The wrapped APDU</returns>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.SecureDataTelegram.InnerApciAndData">
            <summary>
            Gets or sets the inner APCI and data (but not the MAC).
            This may be encrypted or plain text.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.SecureDataTelegram.A">
            <summary>
            Extract A from Telegram.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.SecureDataTelegram.P">
            <summary>
            Get or set P in Telegram
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.SecureDataTelegram.B0">
            <summary>
            Extract B0 from Telegram.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.SecureDataTelegram.Ctr0">
            <summary>
            Extract Ctr0 from Telegram.
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.SecureSyncRequestTelegram">
            <summary>
            Telegram class for the S-A_Sync_Req application layer service
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Telegrams.SecureSyncRequestTelegram.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Telegrams.SecureSyncRequestTelegram"/> class from scratch
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Telegrams.SecureSyncRequestTelegram.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Telegrams.SecureSyncRequestTelegram"/> class from raw frame data
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.SecureSyncRequestTelegram.Decrypted">
            <summary>
            To avoid decrypting the same telegram multiple times, the decryption result is stored here
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.SecureSyncRequestTelegram.SourceSeqNr">
            <summary>
            Gets or sets the sequence number of the sender
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.SecureSyncRequestTelegram.TargetSerialNumber">
            <summary>
            Gets or sets the serial number of the target. May be 0 for point-to-point communication
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.SecureSyncRequestTelegram.Challenge">
            <summary>
            Gets or sets the challenge
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.SecureSyncRequestTelegram.A">
            <summary>
            Extract A from Telegram.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.SecureSyncRequestTelegram.P">
            <summary>
            Get or set P in Telegram
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.SecureSyncRequestTelegram.B0">
            <summary>
            Extract B0 from Telegram.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.SecureSyncRequestTelegram.Ctr0">
            <summary>
            Extract Ctr0 from Telegram.
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.SecureSyncResponseTelegram">
            <summary>
            Telegram class for the S-A_Sync_Res application layer services
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Telegrams.SecureSyncResponseTelegram.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Telegrams.SecureSyncResponseTelegram"/> class from scratch
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Telegrams.SecureSyncResponseTelegram.#ctor(System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Telegrams.SecureSyncResponseTelegram"/> class from raw frame data
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.SecureSyncResponseTelegram.Decrypted">
            <summary>
            To avoid decrypting the same telegram multiple times, the decryption result is stored here
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.SecureSyncResponseTelegram.Random">
            <summary>
            Gets or sets the random number (not transmitted on the wire).
            Must be set before encrypting/decrypting
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.SecureSyncResponseTelegram.SourceSeqNr">
            <summary>
            Gets or sets the sequence number of the sender
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.SecureSyncResponseTelegram.TargetSeqNr">
            <summary>
            Gets or sets the sequence number of the target
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.SecureSyncResponseTelegram.Challenge">
            <summary>
            Gets or sets the challenge (if the telegram is unencrypted) 
            or Challenge ^ Random (if the telegram is encrypted)
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.SecureSyncResponseTelegram.A">
            <summary>
            Extract A from Telegram.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.SecureSyncResponseTelegram.P">
            <summary>
            Get or set P in Telegram
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.SecureSyncResponseTelegram.B0">
            <summary>
            Extract B0 from Telegram.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.SecureSyncResponseTelegram.Ctr0">
            <summary>
            Extract Ctr0 from Telegram.
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.SecureAlgorithmInformation">
            <summary>
            Enum for the algorithm
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.SecureServiceType">
            <summary>
            Enum for the service type bits
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.SecureTelegram">
            <summary>
            Base class for KNX secure AL telegram (data or sync)
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Telegrams.SecureTelegram.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Telegrams.SecureTelegram"/> class
            </summary>
            <param name="size">The number of bytes to allocate between (and excluding) the SCF and the MAC. Later changes are not possible.</param>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.SecureTelegram.SCF">
            <summary>
            Gets or sets the whole secure control field.
            </summary>
            <remarks>
            Access to the individual bits is via the <see cref="P:Knx.Bus.Common.Telegrams.SecureTelegram.SAI"/>, <see cref="P:Knx.Bus.Common.Telegrams.SecureTelegram.ToolAccess"/>, 
            <see cref="P:Knx.Bus.Common.Telegrams.SecureTelegram.ToolAccess"/>, <see cref="P:Knx.Bus.Common.Telegrams.SecureTelegram.ServiceType"/>, <see cref="P:Knx.Bus.Common.Telegrams.SecureTelegram.SystemBroadcast"/>, and <see cref="P:Knx.Bus.Common.Telegrams.SecureTelegram.SAI"/> properties.
            </remarks>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.SecureTelegram.ToolAccess">
            <summary>
            Gets or sets the T bit (bit#7) in the secure control field
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.SecureTelegram.SAI">
            <summary>
            Gets or sets the SAI bits (bit#4 to #6) in the secure control field
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.SecureTelegram.SystemBroadcast">
            <summary>
            Gets or sets the SBC bit (bit#3) in the secure control field
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.SecureTelegram.ServiceType">
            <summary>
            Gets or sets the S-AL service type bits (bit#0 to #2) in the secure control field
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.SecureTelegram.IsSyncRequest">
            <summary>
            Check whether this is a sync request.
            </summary>   
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.SecureTelegram.IsSyncResponse">
            <summary>
            Check whether this is a sync response.
            </summary>   
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.SecureTelegram.IsDataWithConfidentiality">
            <summary>
            Check whether this a data frame with confidentiality (encrypted).
            </summary>   
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.SecureTelegram.MAC">
            <summary>
            Gets or sets the MAC
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.SecureTelegram.MacBytes">
            <summary>
            Gets or sets the MAC as byte array.
            Getting MacBytes on a telegram without Authentication return null.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.SecureTelegram.A">
            <summary>
            Extract A from Telegram.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.SecureTelegram.P">
            <summary>
            Get or set P in Telegram
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.SecureTelegram.B0">
            <summary>
            Extract B0 from Telegram.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.SecureTelegram.Ctr0">
            <summary>
            Extract Ctr0 from Telegram.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.SecureTelegram.Unencrypted">
            <summary>
            Internal flag; true if this is already/yet unencrypted for use in P-AL
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.SecureTelegram.ReEncryptWithModifiedTlSeqNo">
            <summary>
            If the TL needs to change the TL seq no, the telegram must be re-encrypted
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.SecureTelegram.ReAssignSecureSeqNr">
            <summary>
            If the TL needs to inject other secure telegrams (like on re-connect), a new secure seq nr must be assigned
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.SystemNetworkParameterReadTelegram">
            <summary>
            Telegram class for the A_SystemNetworkParameter_Read service
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Telegrams.SystemNetworkParameterReadTelegram.#ctor(System.Int32,System.UInt16,System.UInt16,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Telegrams.SystemNetworkParameterReadTelegram"/> class
            representing an A_SystemNetworkParameter_Read.
            </summary>
            <param name="routingCounter">The hop count to use</param>
            <param name="objectType">The interface object type</param>
            <param name="propertyId">The interface object type</param>
            <param name="testInfo">Value against which the resource indicated by objectType and propertyId is tested</param>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.SystemNetworkParameterReadTelegram.ObjectType">
            <summary>
            The Interface Object Type part of the network parameter type identifier
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.SystemNetworkParameterReadTelegram.PropertyID">
            <summary>
            The property ID part of the network parameter type identifier
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.SystemNetworkParameterReadTelegram.Operand">
            <summary>
            Gets the first octet of TestInfo
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.SystemNetworkParameterReadTelegram.TestInfo">
            <summary>
            Value against which the resource indicated by ObjectType and PropertyID is tested
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.SystemNetworkParameterResponseTelegram">
            <summary>
            Telegram class for the A_SystemNetworkParameter_Response service
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Telegrams.SystemNetworkParameterResponseTelegram.#ctor(System.Int32,System.UInt16,System.UInt16,System.Byte[],System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Telegrams.SystemNetworkParameterResponseTelegram"/> class
            representing an A_SystemNetworkParameter_Response.
            </summary>
            <param name="routingCounter">The hop count to use</param>
            <param name="objectType">The interface object type</param>
            <param name="propertyId">The interface object type</param>
            <param name="testInfo">Value against which the resource indicated by objectType and propertyId is tested</param>
            <param name="testResult">The result</param>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.SystemNetworkParameterResponseTelegram.ObjectType">
            <summary>
            The Interface Object Type part of the network parameter type identifier
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.SystemNetworkParameterResponseTelegram.PropertyID">
            <summary>
            The property ID part of the network parameter type identifier
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.SystemNetworkParameterResponseTelegram.Operand">
            <summary>
            Gets the first octet of TestInfo
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.SystemNetworkParameterResponseTelegram.TestInfo">
            <summary>
            Value against which the resource indicated by ObjectType and PropertyID is tested
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.SystemNetworkParameterWriteTelegram">
            <summary>
            Telegram class for the A_SystemNetworkParameter_Write service
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Telegrams.SystemNetworkParameterWriteTelegram.#ctor(System.Int32,System.UInt16,System.UInt16,System.Byte[])">
            <summary>
            Initializes a new instance of the <see cref="T:Knx.Bus.Common.Telegrams.SystemNetworkParameterWriteTelegram"/> class
            representing an A_SystemNetworkParameter_Write.
            </summary>
            <param name="routingCounter">The hop count to use</param>
            <param name="objectType">The interface object type</param>
            <param name="propertyId">The interface object type</param>
            <param name="value">Value</param>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.SystemNetworkParameterWriteTelegram.ObjectType">
            <summary>
            The Interface Object Type part of the network parameter type identifier
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.SystemNetworkParameterWriteTelegram.PropertyID">
            <summary>
            The property ID part of the network parameter type identifier
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.SystemNetworkParameterWriteTelegram.Value">
            <summary>
            Value to which the resource indicated by ObjectType and PropertyID shall be set
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.TAckTelegram">
            <summary>
            Telegram class to the T_Ack transport layer service
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.TConnectTelegram">
            <summary>
            Telegram class for the T_Connect transport layer service
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.TDisconnectTelegram">
            <summary>
            Telegram class for the T_Disconnect transport layer service
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.Telegram">
            <summary>
            Represents a cEMI frame.
            </summary>
        </member>
        <member name="M:Knx.Bus.Common.Telegrams.Telegram.WriteIntegerValueBigEndian(System.Int32,System.UInt64,System.Int32)">
            <summary>
            Writes an integer value (big-endian)
            </summary>
            <param name="startOffset">The start offset.</param>
            <param name="value">The value to write</param>
            <param name="count">The number of bytes to write.</param>
        </member>
        <member name="M:Knx.Bus.Common.Telegrams.Telegram.ExtractIntegerValueBigEndian(System.Int32,System.Int32)">
            <summary>
            Extracts an integer value (big-endian)
            </summary>
            <param name="startOffset">The start offset.</param>
            <param name="count">The number of bytes to write.</param>
        </member>
        <member name="M:Knx.Bus.Common.Telegrams.Telegram.Equals(Knx.Bus.Common.Telegrams.Telegram)">
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other"/> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Knx.Bus.Common.Telegrams.Telegram.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>.
            </summary>
            <returns>
            true if the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:System.Object"/>; otherwise, false.
            </returns>
            <param name="obj">The <see cref="T:System.Object"/> to compare with the current <see cref="T:System.Object"/>. </param><filterpriority>2</filterpriority>
        </member>
        <member name="M:Knx.Bus.Common.Telegrams.Telegram.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. 
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"/>.
            </returns>
            <filterpriority>2</filterpriority>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.Telegram.IsTransportSecured">
            <summary>
            Returns true if this telegram has been transmitted by a secure transport channel(IP secure)
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Telegrams.Telegram.IsDataSecured">
            <summary>
             Returns true is this is a KNX secure APDU (data security)
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Telegrams.TimestampRelativeInfo">
            <summary>
            This class represents the cEMI relative timestamp info.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Timeouts.ApplicationResponseTimeout">
            <summary>
            Gets the application response timeout.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Timeouts.TransportLayerAckTimeout">
            <summary>
            Timeout to send repetitions if no T_Ack was received.
            </summary>
            <remarks>See KNX handbook 3.3.4 Transport layer chapter 4.</remarks>
        </member>
        <member name="P:Knx.Bus.Common.Timeouts.TransportLayerTimeout">
            <summary>
            Timeout to break down the connection if idle.
            </summary>
            <remarks>See KNX handbook 3.3.4 Transport layer chapter 4.</remarks>
        </member>
        <member name="P:Knx.Bus.Common.Timeouts.DelayBetweenWriteIaInProgModeAndFinalCheck">
            <summary>
            Gets the delay between writing the individual address in programming mode and final check.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Timeouts.TpLineScanDelaySendingTConnect">
            <summary>
            Gets the TP line scan delay sending T-Connect.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Timeouts.RfLineScanDelaySendingTConnect">
            <summary>
            Gets the RF line scan delay sending T-Connect.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Timeouts.DomainAddressScanDelay">
            <summary>
            Gets the domain address scan delay.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Timeouts.DelayBetweenWriteDomainAddressAndFinalCheck">
            <summary>
            Gets the delay between writing the domain address and final check.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Timeouts.DelayPowerlineSelectiveReadSlotTime">
            <summary>
            Gets the delay slot time for Powerline selective read.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Timeouts.CoTransportLayerResponseTimeout">
            <summary>
            Gets the co transport layer response timeout.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Timeouts.ConnectRequestTimeout">
            <summary>
            Gets the connect request timeout.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Timeouts.ConnectionStateRequestTimeout">
            <summary>
            Gets the connection state request timeout.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Timeouts.DeviceConfigurationRequestTimeout">
            <summary>
            Gets the device configuration request timeout.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Timeouts.DeviceConfigurationResponseTimeout">
            <summary>
            Gets the device configuration response timeout.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Timeouts.TunnelingRequestTimeout">
            <summary>
            Gets the tunneling request timeout.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Timeouts.TunnelingConfirmationTimeout">
            <summary>
            Gets the tunneling confirmation timeout.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Timeouts.DefaultHeartbeatTime">
            <summary>
            Gets the default heartbeat time.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Timeouts.TpLineScanDelaySendingTConnectForRouting">
            <summary>
            Gets the TP line scan delay sending T-Connect for routing connectors.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Timeouts.RfLineScanDelaySendingTConnectForRouting">
            <summary>
            Gets the RF line scan delay sending T-Connect for routing connectors.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Timeouts.SecureSessionResponseTimeout">
            <summary>
            Gets the timeout for receiving a SESSION_RESPONSE after a SESSION_REQUEST when creating a secure session.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Timeouts.SecureSessionStatusTimeout">
            <summary>
            Gets the timeout for receiving a SESSION_STATUS after a SESSION_AUTHENTICATE when creating a secure session.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Timeouts.SecureSessionKeepaliveInterval">
            <summary>
            Gets the interval at which SESSION_STATUS/STATUS_KEEPALIVE frames 
            are sent on idle connections. This should be set to ServerSideSecureSessionTimeout / 2 - 1 s 
            to make sure that least two keepalive frames arrive at the server during each timeout period.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Timeouts.IpWriteDoATimeout">
            <summary>
            Gets the timeout to wait after a DomainAddressWrite on IP (default: 60 seconds)
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Timeouts.Bcu1DelayAfterMemoryWriteBase">
            <summary>
            Base delay after each memory write for BCU1 (to account for EEPROM write time)
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Timeouts.Bcu1DelayAfterMemoryWritePerByte">
            <summary>
            Per-byte delay after each memory write for BCU1 (to account for EEPROM write time)
            </summary>
        </member>
        <member name="T:Knx.Bus.Common.Timing">
            <summary>
            All timing implementations are based on this class.
            It uses the precise timer available in Windows 8 and higher and is able to simulate a faster running clock
            for timing-sensitive unit tests.
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Timing.UtcNow">
            <summary>
            Get the current time
            </summary>
        </member>
        <member name="P:Knx.Bus.Common.Timing.ClockSpeedFactor">
            <summary>
            For unit tests, we can increase the clock speed by an arbitrary factor
            </summary>
        </member>
    </members>
</doc>
